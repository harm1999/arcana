{
  "com.fsck.k9": {
    "com.fsck.k9.Throttle$MyTimerTask": [
      [
        "run()",
        "The goal of the method is to execute a `HandlerRunnable` instance on a `Handler` object."
      ],
      [
        "cancel()",
        "The method cancels the timer task and sets a flag to indicate that it has been canceled."
      ]
    ],
    "com.fsck.k9.Throttle": [
      [
        "cancelScheduledCallback()",
        "The method cancels a previously scheduled callback if there is one."
      ],
      [
        "onEvent()",
        "The goal of the `onEvent()` method is to schedule a callback if one has not already been scheduled, and update the current timeout."
      ]
    ],
    "com.fsck.k9.PRNGFixes": [
      [
        "apply()",
        "The `apply()` method applies OpenSSL fix and installs Linux PRNG secure random to fix potential security issues related to PRNG on certain Android versions."
      ]
    ],
    "com.fsck.k9.BaseAccount": [
      [
        "setEmail(java.lang.String)",
        "The method sets the email address associated with the account."
      ],
      [
        "getEmail()",
        "The `getEmail()` method returns the email address associated with the `BaseAccount` interface."
      ],
      [
        "getUuid()",
        "The method returns the universally unique identifier (UUID) of the account."
      ],
      [
        "getDescription()",
        "The method returns the account description."
      ],
      [
        "setDescription(java.lang.String)",
        "The `setDescription()` method sets a description for the account."
      ]
    ],
    "com.fsck.k9.Throttle$MyTimerTask$HandlerRunnable": [
      [
        "run()",
        "The goal of this method is to execute the callback if the task has not been cancelled."
      ]
    ],
    "com.fsck.k9.K9": [
      [
        "messageListSenderAboveSubject()",
        "The goal of the method is to return the value of the boolean variable `mMessageListSenderAboveSubject`."
      ],
      [
        "setDebug(boolean)",
        "The method sets the debug mode of the K9 email client and updates the logging status accordingly."
      ],
      [
        "setContactNameColor(int)",
        "The goal of the method is to set the color of contact name in the K9 email client to the given integer value."
      ],
      [
        "setConfirmDeleteStarred(boolean)",
        "The method sets whether or not to confirm before deleting a starred message."
      ],
      [
        "setBackgroundOps(com.fsck.k9.K9$BACKGROUND_OPS)",
        "The goal of this method is to set the background operations mode of the K9 email client and return a boolean indicating whether the mode was changed."
      ],
      [
        "setNotificationDuringQuietTimeEnabled(boolean)",
        "The method sets whether notifications are enabled during quiet time in the K9 email client."
      ],
      [
        "getSplitViewMode()",
        "The method returns the current split view mode of the K9 email client."
      ],
      [
        "setAnimations(boolean)",
        "The method sets the value of a static boolean variable that controls animations in the K9 email client."
      ],
      [
        "setDatabasesUpToDate(boolean)",
        "The goal of the method `setDatabasesUpToDate()` is to mark all account databases as using the most recent database schema and optionally save the current database version to `SharedPreferences`."
      ],
      [
        "setGesturesEnabled(boolean)",
        "The method sets whether or not gestures are enabled in the K9 email app."
      ],
      [
        "useBackgroundAsUnreadIndicator()",
        "The method returns a boolean value indicating whether the background should be used as an unread indicator in the K9 email client."
      ],
      [
        "isColorizeMissingContactPictures()",
        "The method returns a boolean indicating whether or not K-9 Mail should colorize missing contact pictures."
      ],
      [
        "setMessageViewReturnToList(boolean)",
        "The goal of this method is to set the value of a static boolean variable that determines whether the message view should return to the message list or to the previous activity."
      ],
      [
        "getOpenPgpSupportSignOnly()",
        "The method retrieves a boolean value indicating whether OpenPGP support is only for signing or also for encryption."
      ],
      [
        "setPgpInlineDialogCounter(int)",
        "The goal of the `setPgpInlineDialogCounter(int)` method is to set the value of the static variable `sPgpInlineDialogCounter` in the `com.fsck.k9.K9` class."
      ],
      [
        "registerApplicationAware(com.fsck.k9.K9$ApplicationAware)",
        "The goal of this method is to register a component to be notified when the K9 instance is ready."
      ],
      [
        "setNotificationQuickDeleteBehaviour(com.fsck.k9.K9$NotificationQuickDelete)",
        "The method sets the quick delete behavior for notification in the K9 email client."
      ],
      [
        "setHideUserAgent(boolean)",
        "The method sets the state of a boolean variable that determines whether or not the user agent is hidden."
      ],
      [
        "setMessageViewArchiveActionVisible(boolean)",
        "The method sets the visibility of the message view archive action in the K9 email client."
      ],
      [
        "setLockScreenNotificationVisibility(com.fsck.k9.K9$LockScreenNotificationVisibility)",
        "The goal of this method is to set the visibility of the lock screen notification for the K-9 email client."
      ],
      [
        "setMessageListPreviewLines(int)",
        "The goal of the `setMessageListPreviewLines(int)` method is to set the number of lines to show in the message list preview in the K-9 email client."
      ],
      [
        "setQuietTimeStarts(java.lang.String)",
        "The goal of this method is to set the start time of the quiet period in K9 email app."
      ],
      [
        "messageViewShowNext()",
        "The method returns a boolean value representing whether the next message in the message view should be shown or not."
      ],
      [
        "setHideTimeZone(boolean)",
        "The method sets the state of a boolean variable that determines whether the time zone should be hidden in the user interface."
      ],
      [
        "isMessageViewCopyActionVisible()",
        "The method returns a boolean indicating whether the message copy action is visible in the K9 email client's message view."
      ],
      [
        "showCorrespondentNames()",
        "The goal of the method is to return a boolean value indicating whether correspondent names should be shown."
      ],
      [
        "getPgpSignOnlyDialogCounter()",
        "The method returns the value of the PgpSignOnlyDialogCounter counter."
      ],
      [
        "save(com.fsck.k9.preferences.StorageEditor)",
        "The method saves various preferences of the K9 email client to the specified storage editor."
      ],
      [
        "getQuietTimeEnabled()",
        "The method returns whether the quiet time feature is enabled or not in the K9 email client."
      ],
      [
        "setSplitViewMode(com.fsck.k9.K9$SplitViewMode)",
        "The method sets the split view mode of the K-9 email client."
      ],
      [
        "getSortType()",
        "The method returns the current sorting type used by the K9 email application."
      ],
      [
        "setMessageViewFixedWidthFont(boolean)",
        "The method sets whether the fixed-width font is used in the message view of the K9 email client."
      ],
      [
        "setQuietTimeEnabled(boolean)",
        "The method sets the enabled status for the quiet time feature in the K-9 email client."
      ],
      [
        "getK9ThemeResourceId(com.fsck.k9.K9$Theme)",
        "The method returns the resource ID of a K-9 Mail theme based on the given theme ID."
      ],
      [
        "getK9ThemeResourceId()",
        "This method returns the resource ID for the current K9 theme."
      ],
      [
        "setMessageViewCopyActionVisible(boolean)",
        "The method sets the visibility of the copy action button in the message view."
      ],
      [
        "getK9Language()",
        "The `getK9Language()` method retrieves the language used in the K9 email client."
      ],
      [
        "getK9MessageViewTheme()",
        "The goal of the `getK9MessageViewTheme()` method is to get the theme to use for the message view in K9 email client."
      ],
      [
        "showContactName()",
        "The goal of the method is to retrieve the value of the `mShowContactName` boolean variable."
      ],
      [
        "gesturesEnabled()",
        "The `gesturesEnabled()` method returns a boolean indicating if gestures are currently enabled or disabled in the K9 email client application."
      ],
      [
        "setShowContactName(boolean)",
        "The method sets the value indicating whether to show contact names in the K9 email application."
      ],
      [
        "wrapFolderNames()",
        "The goal of this method is to return whether or not the folder names should be wrapped."
      ],
      [
        "setMessageListSenderAboveSubject(boolean)",
        "The method sets whether the sender should be displayed above the subject in the message list of the K9 email client."
      ],
      [
        "getLockScreenNotificationVisibility()",
        "The method retrieves the current lock screen notification visibility setting in K9 email client."
      ],
      [
        "getFontSizes()",
        "This method returns the font sizes currently set in the K9 email client."
      ],
      [
        "isNotificationDuringQuietTimeEnabled()",
        "The method returns a boolean indicating whether or not notification during quiet time is enabled in the K9 email client."
      ],
      [
        "measureAccounts()",
        "The goal of this method is to return a boolean value indicating whether accounts should be measured or not."
      ],
      [
        "useFixedMessageViewTheme()",
        "The method returns whether or not to use a fixed theme for the message view."
      ],
      [
        "setSortAscending(com.fsck.k9.Account$SortType,boolean)",
        "The method sets the sorting order (ascending or descending) for a given type of mail account in K9 mail client."
      ],
      [
        "getBackgroundOps()",
        "The goal of the method is to return the background operations setting for the K9 email client."
      ],
      [
        "setColorizeMissingContactPictures(boolean)",
        "The method is used to enable or disable the colorization of missing contact pictures in K-9 Mail."
      ],
      [
        "confirmSpam()",
        "The method returns if the user has confirmed that an email is spam or not."
      ],
      [
        "areDatabasesUpToDate()",
        "The goal of the method is to check if all databases are using the current database schema and return a boolean value indicating whether the databases are up to date or not."
      ],
      [
        "isThreadedViewEnabled()",
        "The method returns a boolean value indicating whether the threaded view is enabled in the email client."
      ],
      [
        "setWrapFolderNames(boolean)",
        "This method sets the wrapping state of folder names in K9."
      ],
      [
        "getK9ComposerTheme()",
        "The goal of the method is to return the theme used for composing emails in the K9 email client."
      ],
      [
        "setMessageListCheckboxes(boolean)",
        "To set the state of the message list checkboxes in K9 email client."
      ],
      [
        "onCreate()",
        "The onCreate() method initializes the K9 email client by setting various preferences, registering receivers, and notifying observers."
      ],
      [
        "getQuietTimeStarts()",
        "This method returns the start time of the \"quiet time\" period in K-9 Mail as a string."
      ],
      [
        "showContactPicture()",
        "The method returns a boolean value indicating whether to show contact pictures in K-9 mail."
      ],
      [
        "messageListCheckboxes()",
        "The goal of this method is to return the value of the static boolean variable `mMessageListCheckboxes`."
      ],
      [
        "setAutofitWidth(boolean)",
        "To set the value of a static variable mAutofitWidth to a boolean value."
      ],
      [
        "getQuietTimeEnds()",
        "The goal of `getQuietTimeEnds()` is to retrieve the ending time of the quiet time setting in the K9 email client."
      ],
      [
        "setMessageViewShowNext(boolean)",
        "The method sets whether the message view should show the next message."
      ],
      [
        "setChangeContactNameColor(boolean)",
        "The goal of this method is to set whether or not to change the color of contact names in K9 email app."
      ],
      [
        "setConfirmDeleteFromNotification(boolean)",
        "The method sets whether or not to confirm deletion of a message from a notification."
      ],
      [
        "confirmDeleteStarred()",
        "The goal of this method is to return whether or not starred messages should be confirmed before deletion."
      ],
      [
        "setNotificationHideSubject(com.fsck.k9.K9$NotificationHideSubject)",
        "This method sets the notification hide subject mode in K9 email client."
      ],
      [
        "setUseFixedMessageViewTheme(boolean)",
        "The method sets whether or not to use a fixed message view theme in K9 email client."
      ],
      [
        "autofitWidth()",
        "The method returns whether or not the autofit width feature is enabled in the K9 email client."
      ],
      [
        "hideUserAgent()",
        "The goal of the method is to return a boolean indicating whether the user agent should be hidden or not."
      ],
      [
        "setMessageViewDeleteActionVisible(boolean)",
        "The method sets the visibility state of the delete action button in the message view."
      ],
      [
        "checkCachedDatabaseVersion()",
        "The method checks if the cached version of the accounts' databases matches the current version and sets a flag indicating if the databases are up to date."
      ],
      [
        "isHideSpecialAccounts()",
        "The goal of the `isHideSpecialAccounts()` method is to return the value of the `mHideSpecialAccounts` boolean variable in the `com.fsck.k9.K9` class."
      ],
      [
        "setConfirmMarkAllRead(boolean)",
        "The method sets a flag to enable or disable confirmation prompt when marking all emails as read in K9 email client."
      ],
      [
        "confirmDelete()",
        "This method returns a boolean indicating whether the user has confirmed to delete emails."
      ],
      [
        "isMessageViewArchiveActionVisible()",
        "To determine if the archive action is visible in the message view."
      ],
      [
        "getContactNameColor()",
        "This method returns the contact name color that is set in the K-9 email client."
      ],
      [
        "getK9Theme()",
        "The method returns the current theme used in the K-9 email client application."
      ],
      [
        "setStartIntegratedInbox(boolean)",
        "The method sets whether K9 should start with the integrated inbox view."
      ],
      [
        "countSearchMessages()",
        "The goal of this method is to return a boolean value representing whether or not K9 should count messages that match search criteria."
      ],
      [
        "setMessageViewMoveActionVisible(boolean)",
        "The goal of this method is to set the visibility of the message move action in K9's message view."
      ],
      [
        "isDebug()",
        "The method returns the value of the DEBUG constant of the K9 class to determine if the app is running in debug mode."
      ],
      [
        "getNotificationHideSubject()",
        "The goal of this method is to return the NotificationHideSubject object in the K9 application."
      ],
      [
        "setQuietTimeEnds(java.lang.String)",
        "The goal of this method is to set the value of the `mQuietTimeEnds` static variable to the provided string."
      ],
      [
        "getPgpInlineDialogCounter()",
        "The goal of this method is to return the current value of the PGP inline dialog counter for K9 mail."
      ],
      [
        "setBackgroundOps(java.lang.String)",
        "The method sets the background operations mode of the K9 email client based on the input string."
      ],
      [
        "setConfirmSpam(boolean)",
        "The method sets the value of a static boolean variable that determines whether the user is prompted to confirm before marking an email as spam."
      ],
      [
        "setServicesEnabled(android.content.Context)",
        "The goal of this method is to enable or disable certain features of the K9 email client based on whether any accounts are configured."
      ],
      [
        "setHideSpecialAccounts(boolean)",
        "The method sets a boolean value to determine whether special accounts should be hidden or not in K9 email client."
      ],
      [
        "isSortAscending(com.fsck.k9.Account$SortType)",
        "This method returns a boolean indicating whether the given sort type is set to be in ascending order or not, and caches the value for future use."
      ],
      [
        "loadPrefs(com.fsck.k9.Preferences)",
        "The `loadPrefs` method loads preferences into static variables used by the K-9 email app."
      ],
      [
        "setMessageListStars(boolean)",
        "The goal of the method is to set the value of the static variable `mMessageListStars` to the specified boolean value."
      ],
      [
        "setOpenPgpSupportSignOnly(boolean)",
        "The method sets a boolean value to indicate whether K9 should support only signing of OpenPGP messages."
      ],
      [
        "getNotificationQuickDeleteBehaviour()",
        "The goal of this method is to return the current notification quick delete behavior setting."
      ],
      [
        "showAnimations()",
        "The method returns whether animations are enabled in the K9 email client."
      ],
      [
        "setUseVolumeKeysForListNavigation(boolean)",
        "The method sets whether volume keys should be used for list navigation in the K9 email client."
      ],
      [
        "getK9MessageViewThemeSetting()",
        "The goal of the method is to return the message view theme setting."
      ],
      [
        "setAttachmentDefaultPath(java.lang.String)",
        "The method sets the default path for the attachment files."
      ],
      [
        "setPgpSignOnlyDialogCounter(int)",
        "The method sets the counter for the number of times the PGP sign-only dialog has been shown."
      ],
      [
        "setThreadedViewEnabled(boolean)",
        "The goal of this method is to set a boolean value indicating whether threaded view for email conversations is enabled or not."
      ],
      [
        "isMessageViewMoveActionVisible()",
        "The goal of the method is to return a boolean value indicating whether the message view move action is visible in the K9 email client."
      ],
      [
        "confirmDiscardMessage()",
        "The goal of the method is to return the value of `mConfirmDiscardMessage` which is a boolean indicating whether the user should be prompted to confirm before discarding a message."
      ],
      [
        "setOpenPgpProvider(java.lang.String)",
        "The method sets the OpenPGP provider used by K9."
      ],
      [
        "isMessageViewSpamActionVisible()",
        "The method returns whether the spam action is visible in the message view or not."
      ],
      [
        "useVolumeKeysForNavigationEnabled()",
        "The method returns whether the use of volume keys for navigation is enabled or not."
      ],
      [
        "isOpenPgpProviderConfigured()",
        "The goal of the method is to check if an OpenPGP provider is configured in K9 mail."
      ],
      [
        "useVolumeKeysForListNavigationEnabled()",
        "This method returns whether or not the use of volume keys for list navigation is enabled in the K9 email client."
      ],
      [
        "setK9MessageViewThemeSetting(com.fsck.k9.K9$Theme)",
        "The method sets the theme for the message view in the K9 email client."
      ],
      [
        "messageListPreviewLines()",
        "The goal of the method is to return the number of preview lines for messages in the message list."
      ],
      [
        "setShowContactPicture(boolean)",
        "The goal of this method is to set the value of the static boolean variable `sShowContactPicture` to the boolean value passed as an argument."
      ],
      [
        "getOpenPgpProvider()",
        "This method returns the name of the OpenPGP provider configured in K-9 Mail."
      ],
      [
        "setMeasureAccounts(boolean)",
        "The method sets the flag indicating whether account measurement should be performed or not."
      ],
      [
        "confirmDeleteFromNotification()",
        "The method returns a boolean value indicating whether to confirm deletion of a message from the notification."
      ],
      [
        "setConfirmDelete(boolean)",
        "The method sets the value of a boolean variable to determine whether a confirmation dialogue should be displayed before deleting an email."
      ],
      [
        "messageViewFixedWidthFont()",
        "The goal of this method is to return a boolean indicating whether a fixed width font should be used in the message view."
      ],
      [
        "isMessageViewDeleteActionVisible()",
        "The goal of this method is to return a boolean value indicating whether the delete action is visible in the message view."
      ],
      [
        "messageListStars()",
        "The goal of the method is to return a boolean value indicating whether the message list stars are enabled in K9 email client."
      ],
      [
        "changeContactNameColor()",
        "The method returns a boolean indicating whether or not the contact name color has been changed in the K9 email application."
      ],
      [
        "startIntegratedInbox()",
        "To start the integrated inbox in K9 email client and return whether it was successfully started or not."
      ],
      [
        "setSortType(com.fsck.k9.Account$SortType)",
        "The method sets the sort type for email messages in K9 application."
      ],
      [
        "setK9ComposerThemeSetting(com.fsck.k9.K9$Theme)",
        "The goal of this method is to set the theme for the mail composer in the K9 email application."
      ],
      [
        "hideTimeZone()",
        "The method returns a boolean indicating whether the time zone should be hidden in the user interface."
      ],
      [
        "getK9ComposerThemeSetting()",
        "The method returns the composer theme setting of the K9 email client."
      ],
      [
        "setConfirmDiscardMessage(boolean)",
        "Sets whether or not to prompt the user to confirm discarding of messages in K9 mail."
      ],
      [
        "getAttachmentDefaultPath()",
        "The method returns the default attachment path of the K9 email client."
      ],
      [
        "saveSettingsAsync()",
        "The goal of this method is to save the K-9 email client settings asynchronously."
      ],
      [
        "setCountSearchMessages(boolean)",
        "The goal of the method is to set a boolean flag that determines whether or not to count search messages in K9."
      ],
      [
        "isQuietTime()",
        "This method determines whether or not the current time is during the \"quiet time\" specified in the K9 email client settings."
      ],
      [
        "setK9Language(java.lang.String)",
        "This method sets the language for the K9 email client to the specified language."
      ],
      [
        "setUseBackgroundAsUnreadIndicator(boolean)",
        "The method sets whether the background color should be used as an indicator for unread emails in K9 email client."
      ],
      [
        "setUseVolumeKeysForNavigation(boolean)",
        "The method sets whether or not to use volume keys for navigation in the K9 email application."
      ],
      [
        "setShowCorrespondentNames(boolean)",
        "The method sets whether or not to display the names of correspondents in K9 email client."
      ],
      [
        "setK9Theme(com.fsck.k9.K9$Theme)",
        "The goal of the method is to set the theme of the K9 email client to the provided theme, as long as it is not the global theme."
      ],
      [
        "messageViewReturnToList()",
        "The goal of the method is to retrieve the value of a static boolean variable `mMessageViewReturnToList` of the `K9` class."
      ],
      [
        "confirmMarkAllRead()",
        "The method returns a boolean value indicating whether the user has confirmed they want to mark all emails as read."
      ]
    ],
    "com.fsck.k9.EmailAddressValidator": [
      [
        "fixText(java.lang.CharSequence)",
        "The method returns an empty string, indicating it does not have any functionality or goal beyond that."
      ],
      [
        "isValid(java.lang.CharSequence)",
        "This method checks if the given text is a valid email address."
      ],
      [
        "isValidAddressOnly(java.lang.CharSequence)",
        "The method checks whether a given CharSequence matches the standard email address pattern."
      ]
    ],
    "com.fsck.k9.Account$SortType": [
      [
        "isDefaultAscending()",
        "The goal of the method is to return a boolean value indicating whether the sort order for the Account's SortType is default ascending or not."
      ],
      [
        "getToast(boolean)",
        "The method returns a toast message based on whether the sorting order is ascending or descending."
      ]
    ],
    "com.fsck.k9.Globals": [],
    "com.fsck.k9.FontSizes": [
      [
        "getMessageViewContentAsPercent()",
        "The goal of the method is to return the content percentage of the font size for the message view."
      ],
      [
        "getMessageViewDate()",
        "The method returns the font size for message view date."
      ],
      [
        "getFolderStatus()",
        "This method returns the folder status as an integer."
      ],
      [
        "setMessageViewContentAsPercent(int)",
        "The goal of this method is to set the percentage size of the message view content font."
      ],
      [
        "getMessageViewBCC()",
        "The method returns the font size for the BCC field in a message view."
      ],
      [
        "setMessageViewSubject(int)",
        "The goal of this method is to set the font size for the subject of a message in the message view."
      ],
      [
        "setMessageListPreview(int)",
        "The goal of the `setMessageListPreview(int)` method is to set the font size of the message preview in the message list."
      ],
      [
        "getMessageViewAdditionalHeaders()",
        "The method returns the number of additional headers to display in the message view."
      ],
      [
        "getMessageListDate()",
        "The method returns the font size of the date displayed in the message list."
      ],
      [
        "getMessageViewCC()",
        "The method returns the font size of the message view CC."
      ],
      [
        "setMessageListDate(int)",
        "The goal of this method is to set the font size of the date in a message list."
      ],
      [
        "setMessageViewTo(int)",
        "The goal of the method is to set the font size for the message view to a specified value."
      ],
      [
        "getMessageComposeInput()",
        "This method returns the size of the font used in the message compose input field."
      ],
      [
        "getMessageViewSubject()",
        "The goal of the method is to return the font size for the subject line of a message view."
      ],
      [
        "setMessageListSender(int)",
        "The goal of this method is to set the font size of the sender's name in a message list."
      ],
      [
        "getMessageViewSender()",
        "The method returns the font size used for displaying the sender of a message in the message view."
      ],
      [
        "load(com.fsck.k9.preferences.Storage)",
        "The method loads font sizes from persistent storage."
      ],
      [
        "setAccountDescription(int)",
        "The method sets the value of the `accountDescription` property of the `FontSizes` class."
      ],
      [
        "setAccountName(int)",
        "The goal of the `setAccountName(int)` method is to set the value of the `accountName` variable in the `FontSizes` class to the value passed as the method argument."
      ],
      [
        "setMessageViewSender(int)",
        "The goal of the method is to set the messageViewSender field to the specified integer value."
      ],
      [
        "setMessageListSubject(int)",
        "The goal of this method is to set the font size for the subject line in the message list."
      ],
      [
        "getMessageListPreview()",
        "The goal of this method is to retrieve the message list preview font size."
      ],
      [
        "getMessageListSender()",
        "The method returns the sender font size used in the message list."
      ],
      [
        "setMessageViewBCC(int)",
        "The method sets the font size for the BCC field in an email message view."
      ],
      [
        "setViewTextSize(android.widget.TextView,int)",
        "The goal of the `setViewTextSize` method is to set the text size of a `TextView` to a given font size."
      ],
      [
        "setMessageViewAdditionalHeaders(int)",
        "The method sets the number of additional headers to be shown in the message view in an email application."
      ],
      [
        "setFolderName(int)",
        "The method sets the font size for folder names."
      ],
      [
        "getMessageViewTo()",
        "The goal of the method is to return the value of the messageViewTo variable."
      ],
      [
        "getAccountDescription()",
        "The goal of this method is to return the account description as an integer value."
      ],
      [
        "getMessageListSubject()",
        "The method returns the font size of the subject line in the message list."
      ],
      [
        "setMessageComposeInput(int)",
        "The method sets the font size of the input field for composing a message."
      ],
      [
        "setMessageViewDate(int)",
        "The method sets the font size for the date displayed in the message view."
      ],
      [
        "save(com.fsck.k9.preferences.StorageEditor)",
        "The method saves the font sizes for various UI elements of the K-9 mail client to a storage editor."
      ],
      [
        "getAccountName()",
        "The method `getAccountName()` returns the integer value of the account name."
      ],
      [
        "getFolderName()",
        "The goal of the method is to return an integer value representing the folder name in the font size settings."
      ],
      [
        "setMessageViewCC(int)",
        "The method sets the font size for carbon copy recipients in an email message display view."
      ],
      [
        "setFolderStatus(int)",
        "The goal of the `setFolderStatus(int)` method is to set the status of a folder represented by an integer value."
      ]
    ],
    "com.fsck.k9.NotificationSetting": [
      [
        "isRingEnabled()",
        "The method returns a boolean indicating whether the ringtone is allowed to play or not."
      ],
      [
        "isVibrateEnabled()",
        "This method returns a boolean indicating whether vibration is enabled for notifications in K-9 Mail."
      ],
      [
        "isLedEnabled()",
        "The method returns a boolean indicating whether the LED notification is enabled or not."
      ],
      [
        "setLed(boolean)",
        "The goal of the method is to set the value of `ledEnabled` to the value of the boolean input `led`."
      ],
      [
        "setVibratePattern(int)",
        "The goal of this method is to set the vibration pattern for a notification."
      ],
      [
        "getVibrateTimes()",
        "This method returns the number of times the device should vibrate for new notifications."
      ],
      [
        "setRingEnabled(boolean)",
        "The method sets whether or not ringtones are allowed to play for notifications."
      ],
      [
        "getLedColor()",
        "The goal of this method is to return the LED color set for notifications in the K-9 email client."
      ],
      [
        "getRingtone()",
        "The method returns the URI of the current ringtone selected for the notification."
      ],
      [
        "setVibrate(boolean)",
        "The goal of the method is to set whether or not vibration is enabled for the notification."
      ],
      [
        "getVibration(int,int)",
        "The goal of the method is to return an array of long intervals that represent a pattern of vibrations for a notification, determined by the input parameters representing the pattern and number of times to repeat."
      ],
      [
        "getVibration()",
        "The method returns a vibration pattern multiplied by the number of times requested."
      ],
      [
        "setVibrateTimes(int)",
        "The goal of this method is to set the number of times the device should vibrate when a notification is received."
      ],
      [
        "getVibratePattern()",
        "The method returns the currently set vibration pattern for the notification."
      ],
      [
        "setLedColor(int)",
        "The goal of the `setLedColor(int)` method is to set the LED color for a notification."
      ],
      [
        "setRingtone(java.lang.String)",
        "The method sets the ringtone URI for the notification."
      ]
    ],
    "com.fsck.k9.Preferences": [
      [
        "setDefaultAccount(com.fsck.k9.Account)",
        "The goal of the `setDefaultAccount` method is to set the default email account for K-9 Mail application by storing its UUID in preferences."
      ],
      [
        "getAvailableAccounts()",
        "The method returns a collection of available accounts on the system."
      ],
      [
        "loadAccounts()",
        "The `loadAccounts()` method loads the list of email accounts from storage into memory."
      ],
      [
        "getAccounts()",
        "The method returns a list of all registered email accounts on the system."
      ],
      [
        "newAccount()",
        "The goal of the `newAccount()` method is to create a new email account and add it to the list of accounts."
      ],
      [
        "getAccount(java.lang.String)",
        "The goal of the `getAccount` method is to return a `com.fsck.k9.Account` object based on the UUID passed in as an argument."
      ],
      [
        "getPreferences(android.content.Context)",
        "To return a singleton instance of `Preferences` for the given `Context`, creating one if it does not already exist."
      ],
      [
        "deleteAccount(com.fsck.k9.Account)",
        "The goal of this method is to delete a given email account from the app's preferences and related data."
      ],
      [
        "getStorage()",
        "The method returns the storage instance for accessing preferences."
      ],
      [
        "getDefaultAccount()",
        "This method returns the default `com.fsck.k9.Account` object; if no default account has been set, it sets the first account as default and returns it, and returns null if no accounts exist."
      ]
    ],
    "com.fsck.k9.Clock": [
      [
        "getTime()",
        "The `getTime()` method returns the current system time in milliseconds."
      ]
    ],
    "com.fsck.k9.Account": [
      [
        "getLocalStore()",
        "The method retrieves an instance of the local mail store for the current account."
      ],
      [
        "addCertificate(com.fsck.k9.activity.setup.AccountSetupCheckSettings$CheckDirection,java.security.cert.X509Certificate)",
        "The method adds a new certificate for the incoming or outgoing server to the local key store."
      ],
      [
        "setDisplayCount(int)",
        "The `setDisplayCount(int)` method sets the number of messages to be displayed and resets the visible limits accordingly."
      ],
      [
        "isReplyAfterQuote()",
        "To retrieve the value of the `replyAfterQuote` flag that determines whether replies should be placed above or below the original message quoted in the email."
      ],
      [
        "getIdentities()",
        "The method `getIdentities()` returns a list of identities associated with the K-9 Mail account."
      ],
      [
        "setSignatureBeforeQuotedText(boolean)",
        "This method sets whether the signature should be placed before or after the quoted text in email messages for a particular account."
      ],
      [
        "setIdleRefreshMinutes(int)",
        "This method sets the number of minutes after which the account should be automatically refreshed when it is idle."
      ],
      [
        "goToUnreadMessageSearch()",
        "The goal of this method is to return a boolean indicating whether or not the account should navigate to the search view for unread messages."
      ],
      [
        "setSortType(com.fsck.k9.Account$SortType)",
        "The method sets the sort type for the email messages of the account."
      ],
      [
        "setFolderTargetMode(com.fsck.k9.Account$FolderMode)",
        "The goal of this method is to set the folder target mode for an email account."
      ],
      [
        "getStoreUri()",
        "The method returns the store URI for the email account."
      ],
      [
        "getMaxPushFolders()",
        "The goal of this method is to return the maximum number of folders that can be pushed to this account."
      ],
      [
        "setEnabled(boolean)",
        "The goal of the method is to set the enabled status of the account."
      ],
      [
        "setExpungePolicy(com.fsck.k9.Account$Expunge)",
        "The goal of this method is to set the expunge policy for the K-9 email account."
      ],
      [
        "limitToDisplayableFolders(com.fsck.k9.search.LocalSearch)",
        "The goal of the `limitToDisplayableFolders` method is to modify a `LocalSearch` instance to limit the search to folders that are currently displayable, based on the account's folder display mode."
      ],
      [
        "hasDraftsFolder()",
        "The method checks if the account has a drafts folder set and returns true if it does."
      ],
      [
        "setArchiveFolderName(java.lang.String)",
        "The goal of this method is to set the name of the archive folder for an email account."
      ],
      [
        "getSearchableFolders()",
        "The method returns the `Searchable` object for the searchable folders of the current email account."
      ],
      [
        "isSortAscending(com.fsck.k9.Account$SortType)",
        "The method checks if a specific sorting type in an email account is set to ascending order and returns a boolean value accordingly."
      ],
      [
        "setInboxFolderName(java.lang.String)",
        "The goal of this method is to set the name of the inbox folder for the account."
      ],
      [
        "setTransportUri(java.lang.String)",
        "The goal of this method is to set the transport URI of an email account."
      ],
      [
        "getFolderSyncMode()",
        "This method returns the mode in which the account folders are currently being synced."
      ],
      [
        "setNotifyContactsMailOnly(boolean)",
        "The method sets a boolean variable to specify whether only contacts should be notified for new email messages."
      ],
      [
        "setSyncRemoteDeletions(boolean)",
        "The method sets whether or not remote deletions should be synchronized with the local account."
      ],
      [
        "setFolderPushMode(com.fsck.k9.Account$FolderMode)",
        "The method sets the \"push\" mode for a folder in an email account and returns `true` if the mode was updated."
      ],
      [
        "getAlwaysBcc()",
        "The method returns the email address that is always blind carbon copied for outgoing messages sent from this email account."
      ],
      [
        "setDraftsFolderName(java.lang.String)",
        "The goal of the method `setDraftsFolderName()` is to set the name of the drafts folder for a given email account."
      ],
      [
        "setSubscribedFoldersOnly(boolean)",
        "The method sets whether the account should only display subscribed folders or all available folders."
      ],
      [
        "setMessageFormat(com.fsck.k9.Account$MessageFormat)",
        "The method sets the message format of the email messages for the specified account."
      ],
      [
        "getLastSelectedFolderName()",
        "This method returns the name of the last selected folder for the email account."
      ],
      [
        "getQuotePrefix()",
        "The method returns the current value of the quotePrefix field of the Account class."
      ],
      [
        "getStats(android.content.Context)",
        "The `getStats` method returns account statistics (such as the number of unread and flagged messages) for a given context."
      ],
      [
        "getSpamFolderName()",
        "The method returns the name of the spam folder associated with a K-9 email account."
      ],
      [
        "syncRemoteDeletions()",
        "The method returns the value of a boolean variable indicating whether remote deletions should be synchronized."
      ],
      [
        "save(com.fsck.k9.Preferences)",
        "The `save` method is responsible for saving the account data, preferences and settings to a storage provider."
      ],
      [
        "useCompression(com.fsck.k9.mail.NetworkType)",
        "The goal of the method is to determine whether to use compression for the specified type of network."
      ],
      [
        "setSpamFolderName(java.lang.String)",
        "The goal of this method is to set the name of the spam folder for a given email account."
      ],
      [
        "setAutomaticCheckIntervalMinutes(int)",
        "The method sets the automatic check interval in minutes for the email account and returns a boolean indicating if the interval has changed."
      ],
      [
        "setGoToUnreadMessageSearch(boolean)",
        "The goal of the method is to set whether the account should automatically navigate to the search for unread messages when opened."
      ],
      [
        "setShowPictures(com.fsck.k9.Account$ShowPictures)",
        "The goal of the `setShowPictures` method is to set the value of the `showPictures` variable for a K9 mail account."
      ],
      [
        "setQuotePrefix(java.lang.String)",
        "The method sets the prefix used when quoting previous messages in email replies."
      ],
      [
        "hashCode()",
        "The `hashCode()` method returns a hash code value for the `Account` object based on the hash code value of its unique identifier."
      ],
      [
        "getRemoteSearchNumResults()",
        "The method returns the number of search results to be fetched from the remote server."
      ],
      [
        "setFolderDisplayMode(com.fsck.k9.Account$FolderMode)",
        "The method sets the display mode for folders in an email account and returns whether the value was changed."
      ],
      [
        "isRemoteSearchFullText()",
        "The method temporarily disables remote full text search."
      ],
      [
        "isSearchByDateCapable()",
        "The method determines whether the account's email store supports searching emails by date."
      ],
      [
        "getAccountNumber()",
        "The goal of the method is to return the account number associated with the account."
      ],
      [
        "isPushPollOnConnect()",
        "The goal of this method is to return the value of the private boolean variable `pushPollOnConnect`."
      ],
      [
        "getOutboxFolderName()",
        "The goal of the method is to return the name of the outbox folder for a K-9 email account."
      ],
      [
        "getFolderPushMode()",
        "The method returns the current folder mode for push synchronization of the email account."
      ],
      [
        "setSentFolderName(java.lang.String)",
        "The goal of this method is to set the name of the folder which will be used to store sent mail for the account."
      ],
      [
        "setChipColor(int)",
        "The method sets the color of the chip associated with the account and caches the change."
      ],
      [
        "getLatestOldMessageSeenTime()",
        "This method returns the timestamp of the latest old message seen by the user in the account."
      ],
      [
        "findIdentity(com.fsck.k9.mail.Address)",
        "The goal of this method is to find and return the identity (email, name, signature, etc.) associated with a given email address."
      ],
      [
        "setEmail(java.lang.String)",
        "The method sets the email address for the primary identity of the account."
      ],
      [
        "setSortAscending(com.fsck.k9.Account$SortType,boolean)",
        "The method sets the sort order for a specific sort type to either ascending or descending."
      ],
      [
        "getName()",
        "The `getName()` method returns the name of the first identity associated with the email account."
      ],
      [
        "generateColorChip(boolean,boolean)",
        "The goal of the `generateColorChip(boolean, boolean)` method is to return a `ColorChip` based on whether a message is read or flagged."
      ],
      [
        "isAnIdentity(com.fsck.k9.mail.Address)",
        "The goal of the method is to determine if the given email address belongs to an identity associated with this account."
      ],
      [
        "getFolderUnreadCount(android.content.Context,java.lang.String)",
        "The goal of the method is to retrieve the number of unread messages in a specified folder for an email account."
      ],
      [
        "getEmail()",
        "This method returns the email address associated with the first identity of a K-9 email account."
      ],
      [
        "subscribedFoldersOnly()",
        "The method returns a boolean indicating whether only subscribed folders should be shown for the account."
      ],
      [
        "hasArchiveFolder()",
        "The goal of the method `hasArchiveFolder()` is to check whether the `archiveFolderName` of the given `Account` is set or not."
      ],
      [
        "setFolderNotifyNewMailMode(com.fsck.k9.Account$FolderMode)",
        "Sets the folder mode for notifying the user of new mail for a specific account."
      ],
      [
        "setReplyAfterQuote(boolean)",
        "The method sets whether to place the reply after or before the quoted text in email replies."
      ],
      [
        "setLastSelectedFolderName(java.lang.String)",
        "The method sets the last selected folder name of an email account to the input string."
      ],
      [
        "getAutomaticCheckIntervalMinutes()",
        "This method returns the automatic check interval in minutes for an email account, or -1 if it should never check automatically."
      ],
      [
        "getSignatureUse()",
        "The goal of the `getSignatureUse()` method is to return a boolean indicating whether the first identity associated with the account should use a signature."
      ],
      [
        "setRingNotified(boolean)",
        "To set whether the user has been notified of new email messages by the ringtone."
      ],
      [
        "getMessageFormat()",
        "The method returns the message format of a K-9 email account."
      ],
      [
        "isNotifyNewMail()",
        "The method returns a boolean indicating whether notifications should be sent for new emails in this account."
      ],
      [
        "setStripSignature(boolean)",
        "To set whether the signature should be stripped from outgoing messages for an email account represented by the `com.fsck.k9.Account` class."
      ],
      [
        "setMarkMessageAsReadOnView(boolean)",
        "The method is used to set the value of a boolean variable that determines whether newly viewed messages should be marked as read."
      ],
      [
        "isDefaultQuotedTextShown()",
        "This method returns whether the default quoted text is currently set to be shown or not for the account."
      ],
      [
        "getEarliestPollDate()",
        "The goal of `getEarliestPollDate()` is to calculate and return the earliest date/time that the account should poll for new messages based on the maximum age of messages that should be polled."
      ],
      [
        "setRemoteSearchFullText(boolean)",
        "The method sets whether full text should be searched remotely for the account or not."
      ],
      [
        "generateAccountNumber(com.fsck.k9.Preferences)",
        "The goal of this method is to generate a new unique account number for an email account."
      ],
      [
        "setMessageReadReceipt(boolean)",
        "The goal of this method is to set the boolean flag for requesting read receipts on incoming messages for the email account."
      ],
      [
        "setCompression(com.fsck.k9.mail.NetworkType,boolean)",
        "The method sets whether or not to use compression for a specified network type."
      ],
      [
        "setDefaultQuotedTextShown(boolean)",
        "The goal of the `setDefaultQuotedTextShown(boolean)` method is to set the value of a boolean variable `defaultQuotedTextShown` in the `com.fsck.k9.Account` class."
      ],
      [
        "isStripSignature()",
        "The method `isStripSignature()` returns whether or not signature stripping is enabled for this email account."
      ],
      [
        "setQuoteStyle(com.fsck.k9.Account$QuoteStyle)",
        "The method sets the quote style for the associated email account."
      ],
      [
        "isAnIdentity(com.fsck.k9.mail.Address[])",
        "The method checks if any of the given email addresses belong to an identity associated with the email account."
      ],
      [
        "isEnabled()",
        "This method returns a boolean value indicating whether the account is currently enabled or not."
      ],
      [
        "setSearchableFolders(com.fsck.k9.Account$Searchable)",
        "This method sets the folders that should be included in search operations for a given email account."
      ],
      [
        "isSignatureBeforeQuotedText()",
        "To check if the signature should be placed before or after the quoted text in an email."
      ],
      [
        "isNotifyContactsMailOnly()",
        "The method returns a boolean indicating whether to notify contacts only when new mail arrives for an account."
      ],
      [
        "getFolderNotifyNewMailMode()",
        "The method returns the folder notification mode for new emails of a specific email account."
      ],
      [
        "setName(java.lang.String)",
        "The goal of this method is to set the name of the first identity associated with the account to the given string."
      ],
      [
        "setIdentities(java.util.List)",
        "The method sets the identities of the email account."
      ],
      [
        "allowRemoteSearch()",
        "This method returns a boolean value indicating whether remote search is allowed for the email account."
      ],
      [
        "setSignatureUse(boolean)",
        "The method sets whether the first identity in the account should use the signature when sending emails."
      ],
      [
        "getRemoteStore()",
        "This method returns an instance of `com.fsck.k9.mail.Store` representing the remote email server used by the account."
      ],
      [
        "hasTrashFolder()",
        "The goal of the `hasTrashFolder()` method is to check if the account has a trash folder set and return true if it does."
      ],
      [
        "deleteCertificate(java.lang.String,int,com.fsck.k9.activity.setup.AccountSetupCheckSettings$CheckDirection)",
        "The goal of the `deleteCertificate` method in the `com.fsck.k9.Account` class is to delete any certificate stored for the old email host and port, if they have changed, by using the LocalKeyStore."
      ],
      [
        "getLocalStorageProviderId()",
        "This method returns the ID of the local storage provider used for the K9 email account."
      ],
      [
        "setAutoExpandFolderName(java.lang.String)",
        "This method sets the auto-expand folder name property of an email account."
      ],
      [
        "hasSpamFolder()",
        "The goal of this method is to check whether the account has a spam folder set and return a boolean value accordingly."
      ],
      [
        "setMaximumAutoDownloadMessageSize(int)",
        "The method sets the maximum size of messages that can be automatically downloaded for this email account."
      ],
      [
        "getQuoteStyle()",
        "The method returns the quote style used by the email account."
      ],
      [
        "getSignature()",
        "The goal of this method is to return the signature of the first identity associated with the account."
      ],
      [
        "getInboxFolderName()",
        "The method returns the name of the inbox folder for this email account."
      ],
      [
        "setRemoteSearchNumResults(int)",
        "The method sets the maximum number of search results to be retrieved from the remote server for a given email account, ensuring it is at least zero."
      ],
      [
        "excludeSpecialFolders(com.fsck.k9.search.LocalSearch)",
        "The `excludeSpecialFolders` method modifies a `LocalSearch` instance to exclude certain special folders (e.g. Trash, Drafts, Spam, Outbox, Sent) when searching for emails in an email account, while still ensuring that the Inbox is always included in the search."
      ],
      [
        "setPushPollOnConnect(boolean)",
        "The method sets whether push polling should start automatically when the account is connected."
      ],
      [
        "getTrashFolderName()",
        "The method returns the name of the trash folder for the email account."
      ],
      [
        "toString()",
        "The `toString()` method returns the description of the `com.fsck.k9.Account` object."
      ],
      [
        "getArchiveFolderName()",
        "The method returns the name of the archive folder associated with the account."
      ],
      [
        "getDescription()",
        "This method returns the description of the account."
      ],
      [
        "getAutoExpandFolderName()",
        "This method returns the name of the folder that is set to automatically expand when the account is opened."
      ],
      [
        "setMaximumPolledMessageAge(int)",
        "The method sets the maximum age of messages to be polled for a specific email account."
      ],
      [
        "setLocalStorageProviderId(java.lang.String)",
        "The goal of the `setLocalStorageProviderId` method is to set the local storage provider ID for an email account and migrate the account data to the new storage provider if necessary."
      ],
      [
        "hasSentFolder()",
        "The goal of the method is to check if the account has a sent folder set and return a boolean value accordingly."
      ],
      [
        "getMaximumAutoDownloadMessageSize()",
        "This method returns the maximum size of emails that can be automatically downloaded for the account."
      ],
      [
        "getSortType()",
        "The method returns the sorting type of the email messages for the account."
      ],
      [
        "setDescription(java.lang.String)",
        "The goal of this method is to set the description of a K9 email account."
      ],
      [
        "getChipColor()",
        "The method `getChipColor()` returns the integer value of the chip color associated with the account."
      ],
      [
        "getDeletePolicy()",
        "The method returns the delete policy for the email account."
      ],
      [
        "isMarkMessageAsReadOnView()",
        "The method returns a boolean indicating whether or not messages are marked as read when viewed."
      ],
      [
        "setDeletePolicy(com.fsck.k9.Account$DeletePolicy)",
        "This method sets the delete policy for the email account."
      ],
      [
        "isRingNotified()",
        "The goal of this method is to check if a new mail notification has been sent on this account."
      ],
      [
        "getDisplayCount()",
        "The method returns the display count of the account."
      ],
      [
        "isAlwaysShowCcBcc()",
        "The method returns a boolean indicating whether the \"cc\" and \"bcc\" fields should always be displayed in outgoing email messages for this account."
      ],
      [
        "getDraftsFolderName()",
        "The method returns the name of the drafts folder associated with the email account."
      ],
      [
        "getExpungePolicy()",
        "The goal of the `getExpungePolicy()` method in class `com.fsck.k9.Account` is to return the current expunge policy."
      ],
      [
        "getShowPictures()",
        "The goal of the method is to retrieve the current setting for displaying pictures in emails for the given K-9 mail account."
      ],
      [
        "setCryptoKey(long)",
        "The goal of this method is to set the PGP crypto key ID for the account."
      ],
      [
        "isSpecialFolder(java.lang.String)",
        "The method checks if a given folder name belongs to a special folder in an email account."
      ],
      [
        "setNotifySelfNewMail(boolean)",
        "The method sets whether to notify the account holder when new mail arrives."
      ],
      [
        "move(com.fsck.k9.Preferences,boolean)",
        "The `move` method moves the position of an email account in the list of accounts stored in the preferences."
      ],
      [
        "getNotificationSetting()",
        "The method returns the notification setting of a K-9 email account in a thread-safe manner."
      ],
      [
        "getSentFolderName()",
        "The goal of this method is to return the name of the sent folder for a given email account."
      ],
      [
        "setNotifyNewMail(boolean)",
        "The goal of the method is to set whether or not notifications will be sent for new emails received by the account."
      ],
      [
        "setFolderSyncMode(com.fsck.k9.Account$FolderMode)",
        "This method sets the synchronization mode for the folders of the email account and returns true if the sync mode has been changed."
      ],
      [
        "setAlwaysBcc(java.lang.String)",
        "The method sets a default recipient email address for blind carbon copy (Bcc) for all emails sent from this email account."
      ],
      [
        "setShowOngoing(boolean)",
        "The method sets a boolean value indicating whether ongoing synchronization notifications should be displayed for the account."
      ],
      [
        "setAlwaysShowCcBcc(boolean)",
        "The method sets whether to always show the CC/BCC fields in outgoing emails for the account."
      ],
      [
        "getIdleRefreshMinutes()",
        "The method returns the number of minutes after which the account should be refreshed if it has been idle."
      ],
      [
        "isNotifySelfNewMail()",
        "The method returns whether or not the account should notify itself of new mail."
      ],
      [
        "setAllowRemoteSearch(boolean)",
        "Sets whether or not remote searching is allowed for this email account."
      ],
      [
        "isShowOngoing()",
        "To return whether or not the account should display a notification for ongoing synchronization."
      ],
      [
        "getCryptoKey()",
        "The method returns the PGP crypto key of the account."
      ],
      [
        "setStoreUri(java.lang.String)",
        "The method sets the store URI for the email account."
      ],
      [
        "getFolderTargetMode()",
        "This method returns the current folder mode used for determining the target location when moving or copying messages."
      ],
      [
        "getTransportUri()",
        "The goal of this method is to return the transport URI associated with the account."
      ],
      [
        "setSignature(java.lang.String)",
        "The method sets the signature of the first identity associated with the account."
      ],
      [
        "getFolderDisplayMode()",
        "The goal of this method is to return the folder display mode of a K9 email account."
      ],
      [
        "equals(java.lang.Object)",
        "The goal of this method is to check whether two `Account` objects are equal by comparing their UUIDs."
      ],
      [
        "setLatestOldMessageSeenTime(long)",
        "The method sets the timestamp of the latest old message that has been seen in an email account."
      ],
      [
        "excludeUnwantedFolders(com.fsck.k9.search.LocalSearch)",
        "The goal of this method is to modify a given LocalSearch instance by excluding specific folders (Trash, Spam, Outbox) and ensuring that the Inbox is always included."
      ],
      [
        "getIdentity(int)",
        "The goal of the `getIdentity(int)` method is to retrieve the identity at the specified index from the list of identities associated with the account."
      ],
      [
        "getMaximumPolledMessageAge()",
        "To get the maximum age of a polled message for a particular email account."
      ],
      [
        "isAvailable(android.content.Context)",
        "The goal of the method is to check whether the storage provider for the account is available or not."
      ],
      [
        "getUuid()",
        "The method returns the UUID (Universally Unique Identifier) of the account."
      ],
      [
        "setTrashFolderName(java.lang.String)",
        "The method sets a new name for the trash folder associated with the email account."
      ],
      [
        "setMaxPushFolders(int)",
        "The method sets the maximum number of folders to be pushed for this email account and returns whether the value has been changed."
      ],
      [
        "isMessageReadReceiptAlways()",
        "The goal of the method is to return a boolean value indicating whether read receipts for messages are always sent for the account."
      ]
    ],
    "com.fsck.k9.K9$ApplicationAware": [
      [
        "initializeComponent(android.app.Application)",
        "The method initializes a component of the K9 email application by providing the application instance."
      ]
    ],
    "com.fsck.k9.Identity": [
      [
        "getDescription()",
        "The goal of the method is to return the description of the Identity."
      ],
      [
        "setSignature(java.lang.String)",
        "The goal of this method is to set the signature of the email identity."
      ],
      [
        "setEmail(java.lang.String)",
        "The method sets the email address of the identity object."
      ],
      [
        "getSignatureUse()",
        "This method returns the current value of the boolean signatureUse variable."
      ],
      [
        "getSignature()",
        "The method returns the signature of the identity."
      ],
      [
        "getName()",
        "The method `getName()` returns the name property of the `Identity` object."
      ],
      [
        "setDescription(java.lang.String)",
        "The goal of the method is to set the description of the identity."
      ],
      [
        "setReplyTo(java.lang.String)",
        "The goal of this method is to set the reply-to address for an email identity."
      ],
      [
        "getReplyTo()",
        "The method returns the email address to which replies should be directed."
      ],
      [
        "setName(java.lang.String)",
        "The goal of the `setName` method is to set the name of an `Identity` object."
      ],
      [
        "toString()",
        "The goal of the `toString()` method is to return a string representation of an `Identity` object, including its description, name, email, replyTo, and signature."
      ],
      [
        "getEmail()",
        "The method returns the email address associated with the identity."
      ],
      [
        "setSignatureUse(boolean)",
        "The method sets whether the identity will be used to sign outgoing messages."
      ]
    ],
    "com.fsck.k9.Account$DeletePolicy": [
      [
        "preferenceString()",
        "The method returns a string representation of the DeletePolicy setting."
      ],
      [
        "fromInt(int)",
        "The goal of the method is to retrieve the corresponding `DeletePolicy` enumeration constant based on a given integer value."
      ]
    ]
  },
  "com.fsck.k9.account": {
    "com.fsck.k9.account.AccountCreator": [
      [
        "getDefaultDeletePolicy(com.fsck.k9.mail.ServerSettings.Type)",
        "The method returns the default delete policy for a given mail server type."
      ],
      [
        "getDefaultPort(com.fsck.k9.mail.ConnectionSecurity,com.fsck.k9.mail.ServerSettings.Type)",
        "This method returns the default port number based on the given connection security and server type."
      ]
    ]
  },
  "com.fsck.k9.activity": {
    "com.fsck.k9.activity.FolderList$FolderListAdapter": [
      [
        "getFilter()",
        "The method returns an instance of an Android `Filter` object to be used for filtering data in the `FolderListAdapter` class."
      ],
      [
        "getCount()",
        "The goal of the method is to return the number of elements in the `mFilteredFolders` list."
      ],
      [
        "getFolder(java.lang.String)",
        "The goal of this method is to return a `FolderInfoHolder` object based on the name of a folder."
      ],
      [
        "isEnabled(int)",
        "The method always returns `true` to indicate that all items in the list are enabled."
      ],
      [
        "getItemView(int,android.view.View,android.view.ViewGroup)",
        "The `getItemView` method returns a view for a given item position in the folder list along with the corresponding folder information."
      ],
      [
        "getView(int,android.view.View,android.view.ViewGroup)",
        "The method returns a view corresponding to the data at the specified position in the adapter, or logs an error if the given position is invalid."
      ],
      [
        "areAllItemsEnabled()",
        "The goal of this method is to return a boolean indicating whether all items in the adapter are enabled."
      ],
      [
        "isItemSelectable(int)",
        "This method always returns `true` indicating that items in the folder list are always selectable."
      ],
      [
        "getFolderIndex(java.lang.String)",
        "This method returns the index of a given folder name in the list of filtered folders."
      ],
      [
        "setFilter(android.widget.Filter)",
        "This method sets the filter for the folder list adapter."
      ],
      [
        "getItem(int)",
        "The method retrieves the object at the given position in the list of filtered folders."
      ],
      [
        "getItemId(int)",
        "The `getItemId(int)` method returns the hash code of the name of the filtered folder at the given position to uniquely identify the item."
      ],
      [
        "getItem(long)",
        "This method returns the item at the specified position in the adapter."
      ],
      [
        "hasStableIds()",
        "The method returns a boolean value indicating if the items in the list have stable IDs that persist across data changes and allow for efficient updates."
      ]
    ],
    "com.fsck.k9.activity.Accounts$AccountsHandler": [
      [
        "progress(boolean)",
        "The goal of the `progress(boolean)` method is to show or hide a progress indicator in the action bar menu based on the boolean value passed as a parameter."
      ],
      [
        "dataChanged()",
        "The goal of this method is to update the UI with any changes made to the data."
      ],
      [
        "accountSizeChanged(com.fsck.k9.Account,long,long)",
        "The `accountSizeChanged` method updates account size information and displays a toast with the update."
      ],
      [
        "refreshTitle()",
        "The `refreshTitle()` method updates the view title for the accounts screen in the UI thread."
      ],
      [
        "progress(int)",
        "The goal of the `progress` method is to update the progress of a window feature for displaying progress."
      ],
      [
        "workingAccount(com.fsck.k9.Account,int)",
        "To display a toast message indicating that the given email account is currently being used/activated."
      ]
    ],
    "com.fsck.k9.activity.MessageCompose": [
      [
        "showContactPicker(int)",
        "The goal of the `showContactPicker(int)` method is to display the contact picker activity and process the selected contact(s) for the message recipient."
      ],
      [
        "onOptionsItemSelected(android.view.MenuItem)",
        "The goal of the method is to handle the selection of options from the menu in the message composing screen of the K-9 email client application."
      ],
      [
        "onRecipientsChanged()",
        "The goal of the `onRecipientsChanged()` method is to set the `changesMadeSinceLastSave` variable to true."
      ],
      [
        "onMessageBuildCancel()",
        "The goal of this method is to reset the current message builder and hide the progress bar when the message building is cancelled."
      ],
      [
        "saveDraftEventually()",
        "The goal of this method is to set a flag indicating that changes have been made to the draft since it was last saved."
      ],
      [
        "onClick(android.view.View)",
        "The goal of this method is to show a dialog for choosing the identity when the \"identity\" button is clicked in a compose message view."
      ],
      [
        "onPrepareOptionsMenu(android.view.Menu)",
        "The goal of the method is to prepare the options menu for the message compose activity."
      ],
      [
        "onAttachmentRemoved()",
        "The goal of the method is to set the `changesMadeSinceLastSave` flag to true when an attachment is removed in the `MessageCompose` activity."
      ],
      [
        "onCreate(android.os.Bundle)",
        "The `onCreate` method initializes the compose message screen including loading any previous message data, setting up recipient views, and updating message format and title."
      ],
      [
        "onProgressCancel(com.fsck.k9.fragment.ProgressDialogFragment)",
        "The method cancels the progress dialog for email attachments and notifies the attachment presenter."
      ],
      [
        "onOpenPgpClickDisable()",
        "The goal of this method is to disable PGP encryption for the recipient of the current email being composed."
      ],
      [
        "performSendAfterChecks()",
        "The goal of this method is to create and send a message if it meets certain conditions."
      ],
      [
        "onAttachmentAdded()",
        "The goal of this method is to set a flag indicating that there have been changes made to the message since the last save."
      ],
      [
        "onRetainNonConfigurationInstance()",
        "The goal of this method is to retain the current message builder object during a configuration change, such as a screen rotation."
      ],
      [
        "loadLocalMessageForDisplay(com.fsck.k9.mailstore.MessageViewInfo,com.fsck.k9.activity.MessageCompose$Action)",
        "The goal of the `loadLocalMessageForDisplay` method is to load a local message and update the UI with quoted text and message format for a MessageCompose activity."
      ],
      [
        "onFocusChange(android.view.View,boolean)",
        "The method checks if the focus has changed to the message content or subject fields and if so, notifies the recipient presenter that a non-recipient field has gained focus."
      ],
      [
        "updateMessageFormat()",
        "The goal of the `updateMessageFormat()` method is to determine the message format (text or HTML) to use for a message based on various criteria and set it as the current message format."
      ],
      [
        "onCreateOptionsMenu(android.view.Menu)",
        "The goal of the method is to create the options menu for message composition and disable the 'Save' menu option if the Drafts folder is not set."
      ],
      [
        "onOpenPgpSignOnlyChange(boolean)",
        "This method is called when the user enables or disables PGP signing, and it notifies the recipient presenter that PGP signing-only mode has been disabled."
      ],
      [
        "onMessageBuildSuccess(com.fsck.k9.mail.internet.MimeMessage,boolean)",
        "The goal of this method is to handle the successful building of a message by either saving it as a draft or sending it immediately."
      ],
      [
        "onDestroy()",
        "The goal of the `onDestroy()` method is to call `onActivityDestroy()` on `recipientPresenter` if it is not null."
      ],
      [
        "launchUserInteractionPendingIntent(android.app.PendingIntent,int)",
        "Launches a given `PendingIntent` for user interaction with the current message composer."
      ],
      [
        "onCreateDialog(int)",
        "The goal of the `onCreateDialog(int)` method in `com.fsck.k9.activity.MessageCompose` is to create and return a dialog box based on the given ID."
      ],
      [
        "onPause()",
        "The purpose of the `onPause()` method is to remove the messaging listener, check if the activity is being paused due to a configuration change or a message is currently being built, and then check if a draft of the message can be saved implicitly."
      ],
      [
        "onMessageBuildException(com.fsck.k9.mail.MessagingException)",
        "The goal of this method is to handle the exceptions that occur while building and sending a message in the MessageCompose activity."
      ],
      [
        "onBackPressed()",
        "The goal of the `onBackPressed()` method is to prepare the message compose activity to finish and go back to the previous activity without saving the message."
      ],
      [
        "loadQuotedTextForEdit()",
        "The method loads the quoted text of a message for editing."
      ],
      [
        "onProgressCancel(com.fsck.k9.fragment.AttachmentDownloadDialogFragment)",
        "The method cancels the progress of attachment download and informs the attachment presenter to cancel the progress dialog."
      ],
      [
        "onMessageBuildReturnPendingIntent(android.app.PendingIntent,int)",
        "The method adds a request code mask to the given PendingIntent and starts the intent for result."
      ],
      [
        "onOpenPgpInlineChange(boolean)",
        "The goal of this method is to call the onCryptoPgpInlineChanged method of recipientPresenter with the boolean value of enabled as its parameter."
      ]
    ],
    "com.fsck.k9.activity.MessageInfoHolder": [
      [
        "equals(java.lang.Object)",
        "The goal of the `equals(java.lang.Object)` method in class `com.fsck.k9.activity.MessageInfoHolder` is to compare two `MessageInfoHolder` objects and check if they have the same message."
      ],
      [
        "hashCode()",
        "The `hashCode()` method returns a unique hash code value for the `MessageInfoHolder` object based on its `uid`."
      ]
    ],
    "com.fsck.k9.activity.Search": [
      [
        "onStop()",
        "The goal of this method is to set the active status of the Search activity to false when it is stopped."
      ],
      [
        "onStart()",
        "The goal of the `onStart()` method in class `com.fsck.k9.activity.Search` is to set the search activity as active."
      ],
      [
        "isActive()",
        "The goal of this method is to check whether the search activity is currently active or not."
      ],
      [
        "setActive(boolean)",
        "The goal of the method is to set the active status of the `Search` activity."
      ]
    ],
    "com.fsck.k9.activity.ColorPickerDialog$OnColorChangedListener": [
      [
        "colorChanged(int)",
        "The method `colorChanged(int)` is called after the user selects a color from the color picker dialog and presses the \"OK\" button, passing the ARGB value of the selected color as a parameter."
      ]
    ],
    "com.fsck.k9.activity.K9PreferenceActivity": [
      [
        "onCreate(android.os.Bundle)",
        "The goal of this method is to set the language and theme of the K-9 mail application."
      ]
    ],
    "com.fsck.k9.activity.MessageList$StorageListenerImplementation": [
      [
        "onUnmount(java.lang.String)",
        "The method is called when a storage provider is unmounted, and if the unmounted provider matches the local storage provider, it triggers the onAccountUnavailable method to handle the unavailability of the account."
      ],
      [
        "onMount(java.lang.String)",
        "The `onMount` method does nothing when a storage provider is mounted."
      ]
    ],
    "com.fsck.k9.activity.K9Activity": [
      [
        "dispatchTouchEvent(android.view.MotionEvent)",
        "The `dispatchTouchEvent` method forwards touch events to the base activity's `preDispatchTouchEvent` method and then returns the result of the superclass's `dispatchTouchEvent` method."
      ],
      [
        "onCreate(android.os.Bundle)",
        "The method initializes a base activity object and calls the super class's onCreate method with the saved instance state."
      ]
    ],
    "com.fsck.k9.activity.K9ActivityCommon": [
      [
        "getThemeBackgroundColor()",
        "The method retrieves the background color of the current theme used for the activity."
      ],
      [
        "newInstance(android.app.Activity)",
        "The method creates a new instance of the `K9ActivityCommon` class bound to the specified `Activity`."
      ],
      [
        "setupGestureDetector(com.fsck.k9.activity.misc.SwipeGestureDetector$OnSwipeGestureListener)",
        "The goal of the `setupGestureDetector` method is to initialize and set up a swipe gesture detector that listens for left to right or right to left swipes and notifies the provided listener."
      ],
      [
        "preDispatchTouchEvent(android.view.MotionEvent)",
        "The goal of the `preDispatchTouchEvent` method is to handle touch events using the `GestureDetector` before calling the parent class's `dispatchTouchEvent` method."
      ],
      [
        "setLanguage(android.content.Context,java.lang.String)",
        "The method sets the language of the app to the specified language or the phone's default language."
      ]
    ],
    "com.fsck.k9.activity.AccountList": [
      [
        "onResume()",
        "The goal of the method is to reload the list of accounts when the `AccountList` activity is resumed."
      ],
      [
        "onItemClick(android.widget.AdapterView,android.view.View,int,long)",
        "The method selects a user account from a list of accounts in the K-9 Mail app."
      ],
      [
        "populateListView(java.util.List)",
        "This method creates a new `AccountsAdapter` instance, adds special accounts and real accounts to it, and assigns it to the `ListView` in order to display a list of accounts."
      ],
      [
        "onCreate(android.os.Bundle)",
        "The method initializes the account list activity by setting the content view, configuring the list view and setting the result to canceled."
      ]
    ],
    "com.fsck.k9.activity.LauncherShortcuts": [
      [
        "onCreate(android.os.Bundle)",
        "The goal of this method is to check if the activity was launched with a specific intent and immediately finish it if not."
      ]
    ],
    "com.fsck.k9.activity.Accounts$PasswordPromptDialog": [
      [
        "onTextChanged(java.lang.CharSequence,int,int,int)",
        "This method is not used and has no goal."
      ],
      [
        "afterTextChanged(android.text.Editable)",
        "The method enables or disables the \"OK\" button in the password prompt dialog based on whether the user has entered all necessary passwords."
      ],
      [
        "restore(android.app.Activity)",
        "The goal of this method is to restore the password prompt dialog for a K9 email account."
      ],
      [
        "show(com.fsck.k9.activity.Accounts)",
        "The goal of this method is to show the password prompt dialog in the specified `Accounts` activity with the `false` flag, which indicates whether the dialog is cancellable."
      ],
      [
        "retain()",
        "The `retain()` method stores the entered passwords and checkbox state, dismisses the password prompt dialog, and clears all references to UI objects."
      ],
      [
        "beforeTextChanged(java.lang.CharSequence,int,int,int)",
        "This method does not have any functionality and is not used."
      ]
    ],
    "com.fsck.k9.activity.Accounts$AccountClickListener": [
      [
        "onClick(android.view.View)",
        "The method redirects the user to the search screen with pre-set search parameters."
      ]
    ],
    "com.fsck.k9.activity.ColorPickerDialog": [
      [
        "setColor(int)",
        "The goal of the `setColor(int)` method is to set the color the color picker should highlight as the selected color."
      ]
    ],
    "com.fsck.k9.activity.ChooseFolder": [
      [
        "onOptionsItemSelected(android.view.MenuItem)",
        "This method handles the selection of a menu item and sets the display mode or refreshes the folder list accordingly."
      ],
      [
        "onCreateOptionsMenu(android.view.Menu)",
        "The method inflates the menu for selecting a folder and configures the folder search view."
      ],
      [
        "onCreate(android.os.Bundle)",
        "The goal of the `onCreate()` method is to initialize the UI and the variables needed to display a list of folders to choose from and return the user's selection as the result of an intent."
      ]
    ],
    "com.fsck.k9.activity.EditIdentity": [
      [
        "onCreate(android.os.Bundle)",
        "The `onCreate` method initializes and populates the UI elements with the data of the email identity that the user wants to edit."
      ],
      [
        "onSaveInstanceState(android.os.Bundle)",
        "The goal of the method is to save the current state of the identity being edited in the `EditIdentity` activity in a `Bundle` object."
      ],
      [
        "onBackPressed()",
        "The goal of the method is to save the identity before exiting the activity when the back button is pressed."
      ]
    ],
    "com.fsck.k9.activity.MessageCompose$Action": [
      [
        "getTitleResource()",
        "The method `getTitleResource()` returns the integer resource ID of the title of a MessageCompose action."
      ]
    ],
    "com.fsck.k9.activity.UnreadWidgetConfiguration": [
      [
        "onActivityResult(int,int,android.content.Intent)",
        "This method handles the result of activities launched to choose an email account or folder for the unread widget configuration in the K-9 email client."
      ],
      [
        "getWidgetProperties(android.content.Context,int)",
        "The goal of the method `getWidgetProperties` is to retrieve the properties of an unread message widget based on its context and appWidgetId."
      ],
      [
        "deleteWidgetConfiguration(android.content.Context,int)",
        "The method deletes the configuration for a specified app widget ID from the shared preferences."
      ],
      [
        "onOptionsItemSelected(android.view.MenuItem)",
        "The goal of the method is to handle clicks on the \"done\" menu item in the Unread Widget Configuration activity of the K-9 email client app."
      ],
      [
        "onCreate(android.os.Bundle)",
        "The `onCreate` method sets up the preferences UI for the Unread Widget Configuration and allows the user to select an account and folder for the widget."
      ],
      [
        "onCreateOptionsMenu(android.view.Menu)",
        "This method inflates the options menu for the UnreadWidgetConfiguration activity."
      ]
    ],
    "com.fsck.k9.activity.EmailAddressList": [
      [
        "onItemClick(android.widget.AdapterView,android.view.View,int,long)",
        "The goal of this method is to handle the item click event in the email address list, show a toast message with the selected item, send the selected item as an extra with an intent and finish the activity."
      ],
      [
        "onCreate(android.os.Bundle)",
        "The goal of the `onCreate` method is to initialize the activity layout and display a list of email addresses for a given contact."
      ]
    ],
    "com.fsck.k9.activity.K9PreferenceActivity$PreferenceChangeListener": [
      [
        "onPreferenceChange(android.preference.Preference,java.lang.Object)",
        "The goal of this method is to update the summary field of a preference with its new value."
      ]
    ],
    "com.fsck.k9.activity.Accounts$AccountsAdapter": [
      [
        "getView(int,android.view.View,android.view.ViewGroup)",
        "The goal of the method is to create and return a view displaying information about a given email account."
      ]
    ],
    "com.fsck.k9.activity.AccountList$AccountsAdapter": [
      [
        "getView(int,android.view.View,android.view.ViewGroup)",
        "This method is responsible for setting up and returning the view for a single item in the account list view."
      ]
    ],
    "com.fsck.k9.activity.FolderList$FolderClickListener": [
      [
        "onClick(android.view.View)",
        "The goal of the method is to open the message list activity to display a search for a specific folder."
      ]
    ],
    "com.fsck.k9.activity.Accounts": [
      [
        "onItemLongClick(android.widget.AdapterView,android.view.View,int,long)",
        "The goal of the method is to handle a long press event on an item in an AdapterView and return a boolean indicating if the event was consumed."
      ],
      [
        "onPrepareDialog(int,android.app.Dialog)",
        "This method sets the correct message for each of the dialog boxes that may appear in the Accounts activity."
      ],
      [
        "onExport(boolean,com.fsck.k9.Account)",
        "The method prompts the user to export K-9 email client account settings, and either exports all global settings or specific account settings to a file on Android KitKat and above, or initiates the export for earlier versions of Android."
      ],
      [
        "onCreateDialog(int)",
        "The `onCreateDialog` method creates a dialog for removing, clearing, recreating an account or displaying an error message."
      ],
      [
        "onCreate(android.os.Bundle)",
        "The goal of the method is to set up the Accounts activity view and handle special scenarios such as creating special accounts, importing settings, upgrading databases, and displaying a welcome message."
      ],
      [
        "listAccounts(android.content.Context)",
        "The goal of the method is to launch the `Accounts` activity with specified flags and extra data."
      ],
      [
        "onResume()",
        "The `onResume()` method in the `Accounts` class is responsible for refreshing the page, setting desired listeners and invoking the `onResume()` method of a `MessagingController` instance."
      ],
      [
        "onCreateContextMenu(android.view.ContextMenu,android.view.View,android.view.ContextMenu.ContextMenuInfo)",
        "The method creates a context menu for the accounts in the app and sets the menu options based on the status and location of the account."
      ],
      [
        "onItemClick(android.widget.AdapterView,android.view.View,int,long)",
        "The goal of the method is to handle user clicks on an item in the accounts list and open the selected account."
      ],
      [
        "onCreateOptionsMenu(android.view.Menu)",
        "The method inflates the menu layout for the Accounts activity and assigns the \"check mail\" menu item to a member variable for later access."
      ],
      [
        "onPause()",
        "The goal of this method is to remove listeners for the messaging controller and storage manager and call onPause() on the listener."
      ],
      [
        "importSettings(android.content.Context)",
        "The method imports K-9 Mail settings from a given context and starts the Accounts activity with an action to import settings."
      ],
      [
        "setProgress(boolean)",
        "The goal of the `setProgress(boolean)` method is to set the progress status of the `Accounts` activity."
      ],
      [
        "onContextItemSelected(android.view.MenuItem)",
        "The method handles when a context menu item is selected in the Accounts activity and performs the appropriate action."
      ],
      [
        "onExport(android.content.Intent)",
        "The goal of the `onExport` method is to start exporting the global settings and account UUIDs to the specified document URI."
      ],
      [
        "onRetainNonConfigurationInstance()",
        "The goal of the method is to save the reference to a currently displayed dialog or a running AsyncTask."
      ],
      [
        "createUnreadSearch(android.content.Context,com.fsck.k9.BaseAccount)",
        "The goal of this method is to create a local search object that finds all unread emails for a given account."
      ],
      [
        "onSaveInstanceState(android.os.Bundle)",
        "The `onSaveInstanceState` method is used to save the current state of the Accounts activity, including the selected account, unread message count, account statistics, and export settings, so that it can be restored later if necessary."
      ],
      [
        "onOptionsItemSelected(android.view.MenuItem)",
        "The method `onOptionsItemSelected` handles the selection of options from the menu and performs the appropriate action."
      ]
    ],
    "com.fsck.k9.activity.MessageLoaderHelper": [
      [
        "asyncRestartMessageCryptoProcessing()",
        "The goal of this method is to restart the processing of a message's cryptography asynchronously."
      ],
      [
        "onDestroyChangingConfigurations()",
        "The goal of the `onDestroyChangingConfigurations()` method is to clean up resources and prepare the `MessageLoaderHelper` instance to be resumed in a new instance by cancelling callbacks and detaching the `MessageCryptoHelper` callback."
      ],
      [
        "onDestroy()",
        "The goal of the method `onDestroy()` in class `com.fsck.k9.activity.MessageLoaderHelper` is to cancel all loading processes, prevent future callbacks, and destroy all loading state."
      ],
      [
        "asyncStartOrResumeLoadingMessage(com.fsck.k9.activity.MessageReference,android.os.Parcelable)",
        "The goal of `asyncStartOrResumeLoadingMessage()` is to asynchronously start or resume loading a message with a given reference and optionally a cached decryption result."
      ],
      [
        "asyncReloadMessage()",
        "The goal of this method is to asynchronously start or resume the process of loading a local email message in K-9 Mail's UI thread."
      ],
      [
        "downloadCompleteMessage()",
        "The goal of the method `downloadCompleteMessage()` is to start downloading the complete message body for the current email message on the UI thread."
      ],
      [
        "onActivityResult(int,int,android.content.Intent)",
        "The goal of this method is to handle the result of an activity that was started to retrieve message encryption information."
      ]
    ],
    "com.fsck.k9.activity.ConfirmationDialog": [
      [
        "create(android.app.Activity,int,int,java.lang.String,int,int,java.lang.Runnable)",
        "This method creates a customized confirmation dialog to be displayed in an Android app."
      ],
      [
        "create(android.app.Activity,int,int,java.lang.String,int,int,java.lang.Runnable,java.lang.Runnable)",
        "The goal of the `create` method is to create a customized confirmation dialog with specified message, title, buttons and actions, for a given activity."
      ],
      [
        "create(android.app.Activity,int,int,int,int,int,java.lang.Runnable)",
        "The method creates a customized confirmation dialog with specified texts and actions to be performed on button click."
      ]
    ],
    "com.fsck.k9.activity.AlternateRecipientAdapter$AlternateRecipientListener": [
      [
        "onRecipientChange(com.fsck.k9.view.RecipientSelectView$Recipient,com.fsck.k9.view.RecipientSelectView$Recipient)",
        "The method is called when the alternate recipient is selected or deselected."
      ],
      [
        "onRecipientRemove(com.fsck.k9.view.RecipientSelectView$Recipient)",
        "The method is called when a recipient is removed from the list of alternate recipients."
      ]
    ],
    "com.fsck.k9.activity.FolderList$FolderListHandler": [
      [
        "accountSizeChanged(long,long)",
        "The goal of this method is to display a toast message indicating a change in the size of an email account."
      ],
      [
        "workingAccount(int)",
        "The goal of the method is to display a toast message with the description of the current account."
      ],
      [
        "progress(boolean)",
        "The `progress(boolean)` method sets the visibility of a progress indicator on a menu item."
      ],
      [
        "dataChanged()",
        "The `dataChanged()` method updates the UI when the data of the `FolderListHandler` has changed."
      ],
      [
        "newFolders(java.util.List)",
        "To update and display a new list of folders in a UI handler."
      ],
      [
        "folderLoading(java.lang.String,boolean)",
        "The goal of the `folderLoading` method is to mark a specified folder as either loading or not loading."
      ],
      [
        "refreshTitle()",
        "The method `refreshTitle()` updates the title, subtitle, and unread message count of the folder list activity's action bar."
      ]
    ],
    "com.fsck.k9.activity.K9ListActivity": [
      [
        "setupGestureDetector(com.fsck.k9.activity.misc.SwipeGestureDetector$OnSwipeGestureListener)",
        "The method sets up a swipe gesture detector for the K9ListActivity with the provided listener."
      ],
      [
        "onCreate(android.os.Bundle)",
        "The `onCreate` method initializes the activity and creates a new instance of the `K9ActivityCommon` class as the base of the activity."
      ],
      [
        "onResume()",
        "The `onResume()` method calls the superclass version of it, allowing the activity to resume processing after being paused or stopped."
      ],
      [
        "onKeyUp(int,android.view.KeyEvent)",
        "The method swallows key events for volume up/down to avoid audible notifications and passes other events to the parent class."
      ],
      [
        "onKeyDown(int,android.view.KeyEvent)",
        "The goal of this method is to allow volume keys to navigate the list view, and return true if they are used."
      ],
      [
        "dispatchTouchEvent(android.view.MotionEvent)",
        "The goal of the method is to pre-dispatch touch events to the view hierarchy and then return the results of the super implementation."
      ]
    ],
    "com.fsck.k9.activity.ChooseFolder$ChooseFolderHandler": [
      [
        "handleMessage(android.os.Message)",
        "The method handles two types of messages, one to show or hide a progress bar and the other to set the selected folder in a list view for the choose folder feature in a mail app K-9."
      ],
      [
        "progress(boolean)",
        "The `progress(boolean)` method sends a progress update message to `ChooseFolderHandler` indicating whether progress is being made or not."
      ],
      [
        "setSelectedFolder(int)",
        "The goal of the method is to set the selected folder position and send a message to the handler with the new position."
      ]
    ],
    "com.fsck.k9.activity.ActivityListener": [
      [
        "searchStats(com.fsck.k9.AccountStats)",
        "The method informs the user of the search status of email messages related to a specific account."
      ],
      [
        "synchronizeMailboxFailed(com.fsck.k9.Account,java.lang.String,java.lang.String)",
        "The goal of the method is to inform the user that mailbox synchronization has failed."
      ],
      [
        "synchronizeMailboxStarted(com.fsck.k9.Account,java.lang.String)",
        "The method updates the loading status of the mailbox synchronization process and notifies the user."
      ],
      [
        "sendPendingMessagesCompleted(com.fsck.k9.Account)",
        "The goal of the `sendPendingMessagesCompleted` method is to reset the description of the sending account and inform the user of the status of the operation."
      ],
      [
        "pendingCommandStarted(com.fsck.k9.Account,java.lang.String)",
        "To set the command title and inform the user of the status of the pending command."
      ],
      [
        "sendPendingMessagesFailed(com.fsck.k9.Account)",
        "The method resets the sending account description and informs the user of the status after failed attempts to send pending messages for a specific account."
      ],
      [
        "getFolderTotal()",
        "This method returns the total number of email folders."
      ],
      [
        "pendingCommandCompleted(com.fsck.k9.Account,java.lang.String)",
        "The method resets the processing command title to null and informs the user of the current status."
      ],
      [
        "pendingCommandsProcessing(com.fsck.k9.Account)",
        "The method updates the status of pending commands processing for a given account and informs the user of the updated status."
      ],
      [
        "getFolderCompleted()",
        "The goal of this method is to return the value of the variable \"folderCompleted\" in a thread-safe manner."
      ],
      [
        "synchronizeMailboxHeadersProgress(com.fsck.k9.Account,java.lang.String,int,int)",
        "The method updates the progress of synchronizing mailbox headers for a specific folder and informs the user of the current status."
      ],
      [
        "synchronizeMailboxHeadersFinished(com.fsck.k9.Account,java.lang.String,int,int)",
        "The goal of the `synchronizeMailboxHeadersFinished` method is to reset the loading header information for a specific email mailbox folder and inform the user of the synchronization status."
      ],
      [
        "folderStatusChanged(com.fsck.k9.Account,java.lang.String,int)",
        "The goal of the `folderStatusChanged` method is to inform the user of any changes in the status (e.g. unread message count) of a folder in a specific email account."
      ],
      [
        "synchronizeMailboxFinished(com.fsck.k9.Account,java.lang.String,int,int)",
        "This method is called when mailbox synchronization is finished and clears loading information before informing the user of the status."
      ],
      [
        "synchronizeMailboxHeadersStarted(com.fsck.k9.Account,java.lang.String)",
        "The goal of the method is to set the loadingAccountDescription and loadingHeaderFolderName variables and inform the user of the status of the mailbox header synchronization."
      ],
      [
        "systemStatusChanged()",
        "The method `systemStatusChanged()` informs the user of a change in system status."
      ],
      [
        "onPause(android.content.Context)",
        "The goal of this method is to unregister a tick receiver in the specified context when the activity is paused."
      ],
      [
        "sendPendingMessagesStarted(com.fsck.k9.Account)",
        "To update the UI with the status of sending pending messages for a given `Account`."
      ],
      [
        "informUserOfStatus()",
        "The goal of this method is unclear as it is empty and does not contain any code to achieve a specific task."
      ],
      [
        "synchronizeMailboxProgress(com.fsck.k9.Account,java.lang.String,int,int)",
        "The method updates the progress of synchronizing a mailbox folder and informs the user of the progress."
      ],
      [
        "getOperation(android.content.Context)",
        "The method returns a string representing the current mail operation being performed or the time until the next poll, or sync status information if syncing is disabled."
      ],
      [
        "onResume(android.content.Context)",
        "The method registers the tickReceiver to receive broadcast events related to the system time in the given Android context when the activity is resumed."
      ],
      [
        "pendingCommandsFinished(com.fsck.k9.Account)",
        "The method updates the status of the account and informs the user when all pending commands for the account have finished processing."
      ]
    ],
    "com.fsck.k9.activity.NotificationDeleteConfirmation": [
      [
        "onPrepareDialog(int,android.app.Dialog)",
        "The goal of this method is to prepare and customize the appearance of a dialog box for confirming the deletion of notifications."
      ],
      [
        "onCreateDialog(int)",
        "This method creates a dialog for confirming the deletion of a notification in the K-9 email client."
      ],
      [
        "getIntent(android.content.Context,java.util.List)",
        "The goal of this method is to obtain an Intent that launches the NotificationDeleteConfirmation activity with information about the selected message references and the associated account UUID."
      ],
      [
        "getIntent(android.content.Context,com.fsck.k9.activity.MessageReference)",
        "This method returns an Android `Intent` object for deleting one or more email messages specified by the `MessageReference` object."
      ],
      [
        "onCreate(android.os.Bundle)",
        "The `onCreate` method sets the theme for the notification delete confirmation dialog, extracts any extras from the intent, and shows the delete confirmation dialog."
      ]
    ],
    "com.fsck.k9.activity.ChooseIdentity": [
      [
        "onCreate(android.os.Bundle)",
        "The method sets up the UI for selecting an email identity."
      ],
      [
        "onResume()",
        "The goal of this method is to refresh the view when the activity is resumed."
      ]
    ],
    "com.fsck.k9.activity.UpgradeDatabases": [
      [
        "onCreate(android.os.Bundle)",
        "The onCreate method initializes the activity layout, checks if K9 databases need upgrading, and launches the original activity if they do not."
      ],
      [
        "actionUpgradeDatabases(android.content.Context,android.content.Intent)",
        "The method checks if the account databases need upgrading and starts the `UpgradeDatabases` activity if necessary."
      ],
      [
        "onResume()",
        "The goal of the `onResume()` method in class `com.fsck.k9.activity.UpgradeDatabases` is to check if the databases are up to date, launch the original activity if they are, and start the `DatabaseUpgradeService` if they are not."
      ],
      [
        "onPause()",
        "The method unregisters the broadcast receiver for the database upgrade service when the activity is paused."
      ]
    ],
    "com.fsck.k9.activity.Accounts$ImportSelectionDialog": [
      [
        "restore(android.app.Activity)",
        "The `restore` method shows the import selection dialog in the specified `activity` with the selected items."
      ],
      [
        "show(com.fsck.k9.activity.Accounts)",
        "The goal of this method is to show the import selection dialog with no default account selected in the specified activity."
      ],
      [
        "show(com.fsck.k9.activity.Accounts,android.util.SparseBooleanArray)",
        "The `show()` method creates a dialog box with a list of options for importing email account settings from a previous installation of the app and allows the user to select which settings to import."
      ],
      [
        "retain()",
        "The goal of the `retain()` method is to save the selected state of each list item in the dialog, dismiss the dialog, and return `true` if the dialog is not null, otherwise return `false`."
      ]
    ],
    "com.fsck.k9.activity.AlternateRecipientAdapter": [
      [
        "getItemId(int)",
        "The `getItemId` method returns the ID of the item at the specified position, which in this case is just the position itself."
      ],
      [
        "getCount()",
        "The method returns the total count of recipients in the adapter, including fixed list items."
      ],
      [
        "bindItemView(android.view.View,com.fsck.k9.view.RecipientSelectView$Recipient)",
        "The method binds a recipient's information to a view for display in an alternate recipient list."
      ],
      [
        "setCurrentRecipient(com.fsck.k9.view.RecipientSelectView$Recipient)",
        "The goal of the method is to set the current recipient in the `AlternateRecipientAdapter`."
      ],
      [
        "getItem(int)",
        "This method returns a `Recipient` object from a specified position in either a list of recipients or the current recipient."
      ],
      [
        "bindHeaderView(android.view.View,com.fsck.k9.view.RecipientSelectView$Recipient)",
        "The method binds the header view with the recipient's name, address label and photo for the AlternateRecipientAdapter class."
      ],
      [
        "isEnabled(int)",
        "The method determines if an item at a given position should be enabled or disabled in the adapter, excluding the header view."
      ],
      [
        "setShowAdvancedInfo(boolean)",
        "The method sets a boolean value to determine whether to show advanced information in the AlternateRecipientAdapter."
      ],
      [
        "getView(int,android.view.View,android.view.ViewGroup)",
        "This method creates and returns a view for a specific position in the AlternateRecipientAdapter, populating it with recipient data if necessary."
      ],
      [
        "setAlternateRecipientInfo(java.util.List)",
        "The `setAlternateRecipientInfo` method sets the list of alternate recipients, removes the current recipient from the list, and notifies the adapter that the data has changed."
      ],
      [
        "newView(android.view.ViewGroup)",
        "The method inflates a layout for each item in a recipient list view and returns the resulting view."
      ]
    ],
    "com.fsck.k9.activity.MessageLoaderHelper$MessageLoaderCallbacks": [
      [
        "onDownloadErrorNetworkError()",
        "The method is called when there is a network error while downloading a message."
      ],
      [
        "onMessageDataLoadFinished(com.fsck.k9.mailstore.LocalMessage)",
        "The method is called when the data for a message has finished loading, passing the loaded message as an argument."
      ],
      [
        "onMessageDataLoadFailed()",
        "The goal of the method is to handle cases where loading message data fails in the `MessageLoaderHelper` class."
      ],
      [
        "onMessageViewInfoLoadFailed(com.fsck.k9.mailstore.MessageViewInfo)",
        "The goal of this method is to handle the failure of loading a message view information."
      ],
      [
        "startIntentSenderForMessageLoaderHelper(android.content.IntentSender,int,android.content.Intent,int,int,int)",
        "The method starts an activity with an intent sender for loading email messages."
      ],
      [
        "onDownloadErrorMessageNotFound()",
        "The method is called when there is no message to download."
      ],
      [
        "onMessageViewInfoLoadFinished(com.fsck.k9.mailstore.MessageViewInfo)",
        "The method is called when the loading of a message's view information is completed and the loaded information is passed as an argument to the method."
      ],
      [
        "setLoadingProgress(int,int)",
        "The method sets the progress of loading messages in a mailbox."
      ]
    ],
    "com.fsck.k9.activity.K9ActivityCommon$K9ActivityMagic": [
      [
        "setupGestureDetector(com.fsck.k9.activity.misc.SwipeGestureDetector$OnSwipeGestureListener)",
        "The goal of this method is to set up a gesture detector with the specified listener."
      ]
    ],
    "com.fsck.k9.activity.UpgradeDatabases$UpgradeDatabaseBroadcastReceiver": [
      [
        "onReceive(android.content.Context,android.content.Intent)",
        "The goal of this method is to handle upgrade progress and completion for the K-9 email client databases."
      ]
    ],
    "com.fsck.k9.activity.AlternateRecipientAdapter$RecipientTokenHolder": [
      [
        "setShowAsHeader(boolean)",
        "The method sets the visibility of the header and item layout views based on a boolean value."
      ]
    ],
    "com.fsck.k9.activity.FolderList": [
      [
        "onOptionsItemSelected(android.view.MenuItem)",
        "The method handles menu item selection events for the FolderList activity."
      ],
      [
        "onCreateOptionsMenu(android.view.Menu)",
        "The goal of the method is to create the options menu for the FolderList activity."
      ],
      [
        "onKeyDown(int,android.view.KeyEvent)",
        "The goal of this method is to handle keyboard shortcuts and perform corresponding actions in the folder list activity."
      ],
      [
        "onNewIntent(android.content.Intent)",
        "The goal of this method is to handle a new intent that was received by the `FolderList` activity."
      ],
      [
        "onResume()",
        "The method refreshes the folder list and message status for any open folder to update unread message count and read status when the app is resumed."
      ],
      [
        "onCreateContextMenu(android.view.ContextMenu,android.view.View,android.view.ContextMenu.ContextMenuInfo)",
        "This method creates a context menu for a folder list with options specified in the R.menu.folder_context file and sets the header title to the display name of the selected folder."
      ],
      [
        "onCreate(android.os.Bundle)",
        "The goal of this method is to initialize the activity's layout and UI components, set up click listeners, and potentially show a changelog dialog if it's the app's first run."
      ],
      [
        "onSearchRequested()",
        "The goal of the method is to initiate a search process for messages within a selected account."
      ],
      [
        "actionHandleAccountIntent(android.content.Context,com.fsck.k9.Account,boolean)",
        "The method creates an intent to handle an account related action in the FolderList activity."
      ],
      [
        "onContextItemSelected(android.view.MenuItem)",
        "The method handles the selection of a context menu item in the folder list view and performs a corresponding action."
      ],
      [
        "onRetainNonConfigurationInstance()",
        "The method returns a list of folder objects that will be retained by the system during configuration changes."
      ],
      [
        "actionHandleAccount(android.content.Context,com.fsck.k9.Account)",
        "The goal of the method is to handle an email account in the K-9 email client."
      ],
      [
        "onPause()",
        "This method is removing a listener from the messaging controller and pausing the listener in the adapter."
      ]
    ],
    "com.fsck.k9.activity.Accounts$SimpleDialog": [
      [
        "restore(android.app.Activity)",
        "The goal of this method is to restore the dialog and display it on the specified activity."
      ],
      [
        "retain()",
        "The method dismisses the dialog and sets mDialog to null if it is not null, and returns true if the dialog was dismissed successfully."
      ],
      [
        "show(com.fsck.k9.activity.Accounts)",
        "The goal of the `show` method is to display a dialog with a generated message and an \"okay\" button that dismisses the dialog and performs an action specific to the `Accounts` activity."
      ]
    ],
    "com.fsck.k9.activity.MessageReferenceHelper": [
      [
        "toMessageReferenceList(java.util.List)",
        "The goal of this method is to convert a list of message reference strings into a list of corresponding `MessageReference` objects."
      ],
      [
        "toMessageReferenceStringList(java.util.List)",
        "The goal of the method is to convert a list of `MessageReference` objects into a list of their corresponding identity strings."
      ]
    ],
    "com.fsck.k9.activity.MessageReference": [
      [
        "toIdentityString()",
        "The method `toIdentityString()` returns a string that represents the unique identity of a message reference consisting of its account UUID, folder name, UID and flag if present."
      ],
      [
        "withModifiedUid(java.lang.String)",
        "The method returns a new instance of `MessageReference` with a modified UID field."
      ],
      [
        "equals(java.lang.String,java.lang.String,java.lang.String)",
        "The goal of this method is to check whether the given accountUUID, folderName, and UID values match the corresponding values of a MessageReference object."
      ],
      [
        "equals(java.lang.Object)",
        "The goal of this method is to check if two `MessageReference` objects are equal based on their account UUID, folder name, and UID."
      ],
      [
        "hashCode()",
        "The goal of this method is to generate a hash code for a `MessageReference` object based on its `accountUuid`, `folderName`, and `uid` fields."
      ],
      [
        "withModifiedFlag(com.fsck.k9.mail.Flag)",
        "The goal of this method is to create a new instance of `MessageReference` with a modified flag."
      ],
      [
        "getAccountUuid()",
        "This method returns the account UUID associated with a message reference."
      ],
      [
        "getUid()",
        "This method returns the unique identifier of a message."
      ],
      [
        "parse(java.lang.String)",
        "The goal of this method is to parse a string representation of a message reference and return a corresponding `MessageReference` object."
      ],
      [
        "getFlag()",
        "The method returns the flag associated with a message."
      ],
      [
        "toString()",
        "The goal of this `toString()` method is to return a string representation of a `MessageReference` object, specifically displaying its `accountUuid`, `folderName`, `uid`, and `flag` attributes."
      ],
      [
        "getFolderName()",
        "The method returns the name of the folder associated with the message."
      ]
    ],
    "com.fsck.k9.activity.ManageIdentities": [
      [
        "onContextItemSelected(android.view.MenuItem)",
        "The goal of the method is to handle context menu item selections for managing identities in the K-9 email client."
      ],
      [
        "onResume()",
        "The `onResume()` method refreshes the view of the Manage Identities screen."
      ],
      [
        "onCreateOptionsMenu(android.view.Menu)",
        "The goal of this method is to inflate the menu layout for managing identities in the email application K-9 Mail."
      ],
      [
        "onCreateContextMenu(android.view.ContextMenu,android.view.View,android.view.ContextMenu.ContextMenuInfo)",
        "The goal of this method is to create a context menu for managing identities in the K9 email application."
      ],
      [
        "onOptionsItemSelected(android.view.MenuItem)",
        "The method handles menu item selections for managing email identities and launches the appropriate activity based on the selected item."
      ],
      [
        "onBackPressed()",
        "The method saves the user's identities and allows the activity to be closed when the back button is pressed."
      ]
    ],
    "com.fsck.k9.activity.FolderList$FolderListAdapter$FolderListFilter": [
      [
        "getSearchTerm()",
        "The goal of the method is to return the value of the `mSearchTerm` variable as a `CharSequence`."
      ]
    ],
    "com.fsck.k9.activity.FolderListFilter": [
      [
        "invalidate()",
        "The goal of the `invalidate()` method is to reset the `mOriginalValues` field to `null`."
      ]
    ],
    "com.fsck.k9.activity.MessageList": [
      [
        "shortcutIntent(android.content.Context,java.lang.String)",
        "The goal of this method is to create a shortcut to a specific folder in the email client app K-9 Mail."
      ],
      [
        "startIntentSenderForResult(android.content.IntentSender,int,android.content.Intent,int,int,int)",
        "The goal of the method is to start an intent sender for a result with the specified parameters and add a request code mask."
      ],
      [
        "onOptionsItemSelected(android.view.MenuItem)",
        "The goal of this method is to handle the user's selection of options from the menu, perform the corresponding action, and return a boolean indicating whether the action was successful."
      ],
      [
        "showNextMessageOrReturn()",
        "The goal of the method is to show the next message or return to the message list if there is no next message to show."
      ],
      [
        "onForward(com.fsck.k9.activity.MessageReference)",
        "The `onForward()` method forwards the specified message using the default forwarding options."
      ],
      [
        "onCreate(android.os.Bundle)",
        "The `onCreate` method initializes the message list activity by checking for upgrades, setting the content view based on whether to use split view, initializing the action bar, enabling gesture detection, initializing display and layout, and showing the change log if it's first run."
      ],
      [
        "onCompose(com.fsck.k9.Account)",
        "The goal of the `onCompose` method is to launch the compose message activity for the specified email account."
      ],
      [
        "setMessageListTitle(java.lang.String)",
        "The goal of this method is to set the title of the activity's action bar to the given string."
      ],
      [
        "updateMenu()",
        "The goal of the method is to update the options menu associated with the current activity."
      ],
      [
        "onCustomKeyDown(int,android.view.KeyEvent)",
        "The goal of the `onCustomKeyDown` method is to handle hotkeys for various actions such as navigating, composing, deleting, toggling flags or read status, and displaying help messages in the `MessageList` activity of the K-9 Mail app."
      ],
      [
        "onResume()",
        "The `onResume()` method is responsible for setting up the necessary components for the `MessageList` activity by checking if it's not an instance of the `Search` class, ensuring the account is available, and adding a storage listener."
      ],
      [
        "setUnreadCount(int)",
        "The goal of the method is to set the number of unread messages in the message list and update the action bar accordingly."
      ],
      [
        "onSwitchComplete(int)",
        "The goal of this method is to remove the message view fragment if the displayed child is 0."
      ],
      [
        "onForward(com.fsck.k9.activity.MessageReference,android.os.Parcelable)",
        "The method forwards a message with encryption support."
      ],
      [
        "onKeyUp(int,android.view.KeyEvent)",
        "The goal of this method is to swallow volume key events to avoid audible notification of a volume change when the option \"useVolumeKeysForListNavigation\" is enabled in K9."
      ],
      [
        "onReply(com.fsck.k9.activity.MessageReference,android.os.Parcelable)",
        "The method handles the action of replying to a message by calling the `actionReply` method of the `MessageActions` class."
      ],
      [
        "onRestoreInstanceState(android.os.Bundle)",
        "The method is used to restore the state of the message list and back stack after the activity has been destroyed and recreated."
      ],
      [
        "openMessage(com.fsck.k9.activity.MessageReference)",
        "The method `openMessage` opens a selected message in the message view container, or allows the user to edit the draft if the message is in the drafts folder."
      ],
      [
        "remoteSearchStarted()",
        "The goal of the `remoteSearchStarted()` method is to remove the action button for remote search and configure the menu."
      ],
      [
        "startSearch(com.fsck.k9.Account,java.lang.String)",
        "The goal of this method is to start a search operation on either a single folder or across all folders."
      ],
      [
        "actionDisplaySearch(android.content.Context,com.fsck.k9.search.SearchSpecification,boolean,boolean,boolean)",
        "The method launches an intent to display search results in the message list activity with specified parameters."
      ],
      [
        "onReplyAll(com.fsck.k9.activity.MessageReference,android.os.Parcelable)",
        "The goal of this method is to initiate a \"Reply All\" action for a specific email message."
      ],
      [
        "setProgress(boolean)",
        "The goal of this method is to show or hide an indeterminate progress bar on the screen."
      ],
      [
        "messageHeaderViewAvailable(com.fsck.k9.view.MessageHeader)",
        "The method sets the message header available in the action bar of the MessageList activity."
      ],
      [
        "onPause()",
        "The goal of this method is to remove a storage listener when the activity transitions to the paused state."
      ],
      [
        "onCreateOptionsMenu(android.view.Menu)",
        "The method inflates and displays the options menu for the Message List activity, and sets a reference to the menu for later use."
      ],
      [
        "onSwipeLeftToRight(android.view.MotionEvent,android.view.MotionEvent)",
        "The goal of the method is to forward swipe left-to-right events to the `mMessageListFragment` if it is not `MESSAGE_VIEW` mode."
      ],
      [
        "setActionBarTitle(java.lang.String)",
        "The method is used to set the text of the action bar title to the input string."
      ],
      [
        "onSearchRequested()",
        "The goal of the `onSearchRequested()` method is to call the `onSearchRequested()` method of the `mMessageListFragment` object and return its boolean value."
      ],
      [
        "showMoreFromSameSender(java.lang.String)",
        "The `showMoreFromSameSender` method displays more messages from the same sender in the message list."
      ],
      [
        "onBackStackChanged()",
        "The goal of this method is to update the UI and menu configuration when the backstack changes in the MessageList activity."
      ],
      [
        "onReply(com.fsck.k9.activity.MessageReference)",
        "The method initiates a reply to a given message reference with no quoted text."
      ],
      [
        "onBackPressed()",
        "The goal of this method is to handle the back button press and either show the message list or call the superclass implementation."
      ],
      [
        "onPrepareOptionsMenu(android.view.Menu)",
        "To prepare the options menu for the MessageList activity by configuring the items in the menu."
      ],
      [
        "onResendMessage(com.fsck.k9.activity.MessageReference)",
        "The goal of the method is to open the compose screen with the selected draft message for editing and resending."
      ],
      [
        "setActionBarSubTitle(java.lang.String)",
        "The method sets the subtitle of the action bar in the `MessageList` activity."
      ],
      [
        "actionDisplaySearch(android.content.Context,com.fsck.k9.search.SearchSpecification,boolean,boolean)",
        "The goal of this method is to display a search result in the MessageList activity with the given search specification and threading options."
      ],
      [
        "intentDisplaySearch(android.content.Context,com.fsck.k9.search.SearchSpecification,boolean,boolean,boolean)",
        "The method returns an `Intent` object for displaying a search result in the `MessageList` activity with specified search criteria and display options."
      ],
      [
        "enableActionBarProgress(boolean)",
        "The goal of the `enableActionBarProgress(boolean)` method is to show or hide a progress indicator in the app's action bar based on the value of the `enable` parameter."
      ],
      [
        "actionDisplayMessageIntent(android.content.Context,com.fsck.k9.activity.MessageReference)",
        "The goal of this method is to create an intent to display a message in the MessageList activity."
      ],
      [
        "setMessageListSubTitle(java.lang.String)",
        "The goal of this method is to set the subtitle of the action bar in the message list activity."
      ],
      [
        "showThread(com.fsck.k9.Account,java.lang.String,long)",
        "The `showThread` method displays a thread of messages in a message list fragment."
      ],
      [
        "dispatchKeyEvent(android.view.KeyEvent)",
        "The method dispatches key events to the appropriate handlers and returns a boolean indicating whether the event was handled."
      ],
      [
        "displayMessageSubject(java.lang.String)",
        "The goal of the method is to display the subject of a message in the appropriate location depending on the current display mode of the MessageList activity."
      ],
      [
        "onSaveInstanceState(android.os.Bundle)",
        "The goal of the method is to save the current state of the `MessageList` activity into a `Bundle` before it is paused or destroyed."
      ],
      [
        "setActionBarUnread(int)",
        "The goal of the method `setActionBarUnread(int)` is to set the visibility and text of `mActionBarUnread` based on the number of unread messages."
      ],
      [
        "onReplyAll(com.fsck.k9.activity.MessageReference)",
        "The method initiates a reply-all action for the specified message reference."
      ],
      [
        "onSwipeRightToLeft(android.view.MotionEvent,android.view.MotionEvent)",
        "The goal of this method is to handle swipe right to left gesture on the message list and delegate the event to the `onSwipeRightToLeft` method of the `mMessageListFragment` if it is not in the message view display mode."
      ],
      [
        "goBack()",
        "The `goBack()` method navigates back in the application by displaying the message list, popping a fragment off the stack, finishing the activity, or displaying the account or folder list."
      ],
      [
        "setMessageListProgress(int)",
        "The goal of the method is to set the progress of the message list."
      ],
      [
        "disableDeleteAction()",
        "The goal of the `disableDeleteAction()` method is to disable the delete action in the menu of the `MessageList` activity."
      ],
      [
        "onNewIntent(android.content.Intent)",
        "This method handles the creation of a new intent for the MessageList activity and initializes or resets the necessary fragments and display modes."
      ]
    ],
    "com.fsck.k9.activity.FolderInfoHolder": [
      [
        "compareTo(com.fsck.k9.activity.FolderInfoHolder)",
        "The method compares two `FolderInfoHolder` objects based on their names in a case-insensitive manner."
      ],
      [
        "setMoreMessagesFromFolder(com.fsck.k9.mailstore.LocalFolder)",
        "The method sets the value of a boolean variable based on whether the given email folder has more messages to load."
      ],
      [
        "hashCode()",
        "The method calculates and returns a hash code for the `name` attribute of the `FolderInfoHolder` class."
      ],
      [
        "populate(android.content.Context,com.fsck.k9.mailstore.LocalFolder,com.fsck.k9.Account,int)",
        "The method populates the FolderInfoHolder with information about a given folder and its associated account, as well as sets the unread message count and then closes the folder."
      ],
      [
        "getDisplayName(android.content.Context,com.fsck.k9.Account,java.lang.String)",
        "The `getDisplayName` method returns a localized name for a provided mailbox name if it is a special folder (such as Inbox, Sent, Trash, etc.) or the original mailbox name if it is a non-special folder for a given account."
      ],
      [
        "populate(android.content.Context,com.fsck.k9.mailstore.LocalFolder,com.fsck.k9.Account)",
        "The goal of this method is to populate a `FolderInfoHolder` instance with information about a local email folder and its associated account."
      ],
      [
        "equals(java.lang.Object)",
        "This method checks if an object is an instance of `FolderInfoHolder` and if their `name` properties match."
      ]
    ]
  },
  "com.fsck.k9.activity.compose": {
    "com.fsck.k9.activity.compose.PgpEnabledErrorDialog$OnOpenPgpDisableListener": [
      [
        "onOpenPgpClickDisable()",
        "The goal of the method is to handle the action taken when the user clicks to disable OpenPGP encryption."
      ]
    ],
    "com.fsck.k9.activity.compose.RecipientLoader": [
      [
        "loadInBackground()",
        "The method `loadInBackground()` aims to populate a list of recipients based on various inputs such as email addresses, contact URIs, query strings, or lookup key URIs."
      ],
      [
        "deliverResult(java.util.List)",
        "The method is responsible for delivering the result of finding recipients to the user interface."
      ]
    ],
    "com.fsck.k9.activity.compose.PgpInlineDialog": [
      [
        "newInstance(boolean,int)",
        "The goal of the method is to create a new instance of `PgpInlineDialog` and set its arguments based on the boolean value and the specified view ID."
      ],
      [
        "onCreateDialog(android.os.Bundle)",
        "The goal of this method is to create a dialog box for the user with options to enable or disable OpenPGP encryption for email messages."
      ]
    ],
    "com.fsck.k9.activity.compose.PgpSignOnlyDialog": [
      [
        "newInstance(boolean,int)",
        "The `newInstance` method creates a new instance of the `PgpSignOnlyDialog` class with specified arguments."
      ],
      [
        "onCreateDialog(android.os.Bundle)",
        "The goal of the `onCreateDialog(android.os.Bundle)` method is to create and return a dialog box for the user to interact with, either to enable or disable OpenPGP signing."
      ]
    ],
    "com.fsck.k9.activity.compose.AttachmentPresenter$AttachmentMvpView": [
      [
        "performSaveAfterChecks()",
        "The goal of the `performSaveAfterChecks()` method is to save the attachment after performing necessary checks."
      ],
      [
        "updateAttachmentView(com.fsck.k9.activity.misc.Attachment)",
        "The goal of the method is to update the view with the given attachment."
      ],
      [
        "performSendAfterChecks()",
        "The method is intended to perform checks and send an attachment in an email."
      ],
      [
        "showWaitingForAttachmentDialog(com.fsck.k9.activity.compose.AttachmentPresenter$WaitingAction)",
        "The method displays a waiting dialog for the user while an attachment is being processed."
      ],
      [
        "showPickAttachmentDialog(int)",
        "The goal of the method is to show a dialog for picking an attachment with the specified request code."
      ],
      [
        "dismissWaitingForAttachmentDialog()",
        "The goal of the method is to dismiss a dialog indicating that the application is waiting for an attachment to be added to a composed message."
      ],
      [
        "removeAttachmentView(com.fsck.k9.activity.misc.Attachment)",
        "The goal of the method is to remove the view associated with the given attachment from the UI."
      ],
      [
        "addAttachmentView(com.fsck.k9.activity.misc.Attachment)",
        "The goal of this method is to add the view representation of an attachment to the UI of an email composer."
      ],
      [
        "showMissingAttachmentsPartialMessageWarning()",
        "The goal of this method is to display a warning to the user indicating that some attachments may be missing from their partial message."
      ]
    ],
    "com.fsck.k9.activity.compose.ComposeCryptoStatus": [
      [
        "getSendErrorStateOrNull()",
        "The goal of the `getSendErrorStateOrNull()` method is to check for errors in the status of the email encryption and return the corresponding `SendErrorState`, or `null` if there are no errors."
      ],
      [
        "isPgpInlineModeEnabled()",
        "The method returns whether PGP inline mode is currently enabled or not."
      ],
      [
        "getOpenPgpKeyId()",
        "The method returns the OpenPGP key ID used for encryption in a ComposeCryptoStatus object."
      ],
      [
        "isEncryptionEnabled()",
        "The goal of the `isEncryptionEnabled()` method is to determine whether encryption is enabled for the Compose Crypto Status."
      ],
      [
        "getRecipientAddresses()",
        "The `getRecipientAddresses()` method returns the array of recipient email addresses for a composed message with crypto status."
      ],
      [
        "isProviderStateOk()",
        "The goal of the `isProviderStateOk()` method is to check if the `cryptoProviderState` is in a state of \"OK\" and return a boolean value."
      ],
      [
        "isSigningEnabled()",
        "The method checks whether signing is enabled by checking if the crypto mode is set to sign only or if encryption is also enabled."
      ],
      [
        "shouldUsePgpMessageBuilder()",
        "The goal of the `shouldUsePgpMessageBuilder()` method is to determine whether to use the PGP message builder based on the current state of the crypto provider."
      ],
      [
        "hasRecipients()",
        "The goal of the method is to check if the array `recipientAddresses` has any elements and return a boolean value indicating the result."
      ]
    ],
    "com.fsck.k9.activity.compose.IdentityAdapter": [
      [
        "hasStableIds()",
        "This method returns whether the adapter's item ids are stable across changes to the underlying data."
      ],
      [
        "getItemId(int)",
        "The method returns the ID of the item at the specified position, which in this case is the position itself."
      ],
      [
        "getView(int,android.view.View,android.view.ViewGroup)",
        "This method returns a `View` that represents an item in a list of identities or email accounts to be used for sending a message."
      ],
      [
        "getViewTypeCount()",
        "The goal of this method is to return the number of view types handled by the adapter."
      ],
      [
        "getItem(int)",
        "The `getItem(int)` method returns an object at a specific position in a list."
      ],
      [
        "getCount()",
        "This method returns the size of the list of items in the IdentityAdapter."
      ],
      [
        "isEnabled(int)",
        "The method checks if an item at a given position in a list is of a particular type and returns a boolean value accordingly."
      ],
      [
        "getItemViewType(int)",
        "The `getItemViewType` method returns the type of view that should be displayed for a given position in the IdentityAdapter, based on whether the item at that position is an Account or not."
      ]
    ],
    "com.fsck.k9.activity.compose.RecipientPresenter$RecipientsChangedListener": [
      [
        "onRecipientsChanged()",
        "The method is called when the list of recipients in the Compose screen has changed."
      ]
    ],
    "com.fsck.k9.activity.compose.PgpEncryptDescriptionDialog": [
      [
        "newInstance(int)",
        "The method creates a new instance of `PgpEncryptDescriptionDialog` with an argument specifying the ID of a view to highlight."
      ],
      [
        "onCreateDialog(android.os.Bundle)",
        "The goal of the `onCreateDialog` method in class `PgpEncryptDescriptionDialog` is to create and return a dialog that allows the user to encrypt a message using OpenPGP."
      ]
    ],
    "com.fsck.k9.activity.compose.PgpEnabledErrorDialog": [
      [
        "newInstance(boolean,int)",
        "The method creates a new instance of the `PgpEnabledErrorDialog` class with specified arguments and returns it."
      ],
      [
        "onCreateDialog(android.os.Bundle)",
        "The goal of this method is to create and return an alert dialog that informs the user about a PGP (Pretty Good Privacy) encryption error and provides options to dismiss, go back, or disable PGP encryption."
      ]
    ],
    "com.fsck.k9.activity.compose.RecipientAdapter": [
      [
        "setContactPhotoOrPlaceholder(android.content.Context,android.widget.ImageView,com.fsck.k9.view.RecipientSelectView$Recipient)",
        "The goal of this method is to set the contact photo of a recipient in an ImageView or display a placeholder image if the contact does not have a photo."
      ],
      [
        "getView(int,android.view.View,android.view.ViewGroup)",
        "The method returns a view with recipient information at a specific position in the adapter."
      ],
      [
        "getItem(int)",
        "The method `getItem` returns the recipient at the specified position in the `recipients` list of `RecipientSelectView`."
      ],
      [
        "getFilter()",
        "The `getFilter()` method returns a filter to be used for searching and displaying recipient suggestions."
      ],
      [
        "getCount()",
        "This method returns the number of recipients currently in the recipient adapter."
      ],
      [
        "getItemId(int)",
        "This method returns the unique identifier for the item at the given position in the recipient adapter."
      ],
      [
        "setHighlight(java.lang.String)",
        "The `setHighlight` method sets the highlight string used for highlighting matching characters in the recipient list."
      ],
      [
        "setRecipients(java.util.List)",
        "The method sets a list of recipients and notifies the adapter that the data set has changed."
      ],
      [
        "setShowAdvancedInfo(boolean)",
        "The method sets a boolean value that determines whether advanced information is displayed for recipients in the Compose activity of the K-9 email client."
      ]
    ],
    "com.fsck.k9.activity.compose.PgpSignOnlyDialog$OnOpenPgpSignOnlyChangeListener": [
      [
        "onOpenPgpSignOnlyChange(boolean)",
        "The method is called when the user toggles the \"sign only\" setting in the OpenPGP options of the compose message screen, and it passes the new value of the setting to the listener."
      ]
    ],
    "com.fsck.k9.activity.compose.ComposeCryptoStatus$ComposeCryptoStatusBuilder": [
      [
        "setCryptoMode(com.fsck.k9.activity.compose.RecipientPresenter$CryptoMode)",
        "The goal of the method is to set the `cryptoMode` property of the `ComposeCryptoStatusBuilder` object and return the object itself for method chaining."
      ],
      [
        "build()",
        "The goal of the `build()` method is to create and return a new instance of `ComposeCryptoStatus` with the specified parameters, after verifying that all required fields have been set."
      ],
      [
        "setCryptoProviderState(com.fsck.k9.activity.compose.RecipientPresenter$CryptoProviderState)",
        "The method sets the state of the crypto provider in the builder object for composing an email with crypto status."
      ],
      [
        "setRecipients(java.util.List)",
        "The goal of the `setRecipients` method is to set the recipients of a ComposeCryptoStatus object with the given list of Recipient objects."
      ],
      [
        "setEnablePgpInline(boolean)",
        "The method sets whether or not PGP encryption should be enabled inline in a compose screen."
      ],
      [
        "setOpenPgpKeyId(java.lang.Long)",
        "The goal of the method is to set the OpenPGP key ID for the ComposeCryptoStatusBuilder object and return the updated ComposeCryptoStatusBuilder object."
      ],
      [
        "setPreferEncryptMutual(boolean)",
        "The goal of this method is to set the flag indicating whether the builder should prefer mutual encryption."
      ]
    ],
    "com.fsck.k9.activity.compose.MessageActions": [
      [
        "getActionReplyIntent(android.content.Context,com.fsck.k9.activity.MessageReference)",
        "The goal of the method is to return an intent for composing a reply to a given message."
      ],
      [
        "actionForward(android.content.Context,com.fsck.k9.activity.MessageReference,android.os.Parcelable)",
        "The goal of the `actionForward` method is to launch a new message composition activity in forwarding mode with the given message reference and decryption result as extras."
      ],
      [
        "getActionReplyIntent(android.content.Context,com.fsck.k9.activity.MessageReference,boolean,android.os.Parcelable)",
        "The method returns an intent for composing a new message as a reply to a given message with the option for reply all if specified."
      ],
      [
        "actionCompose(android.content.Context,com.fsck.k9.Account)",
        "The goal of this method is to open up the message compose activity with a specified account or the default account if none is specified."
      ],
      [
        "actionEditDraft(android.content.Context,com.fsck.k9.activity.MessageReference)",
        "The goal of the `actionEditDraft` method is to allow the user to continue the composition of a given message and modify the way the activity handles save and discard actions."
      ],
      [
        "actionReply(android.content.Context,com.fsck.k9.activity.MessageReference,boolean,android.os.Parcelable)",
        "The goal of the method is to compose and start a new reply message with the given message reference and reply type (reply or reply all)."
      ]
    ],
    "com.fsck.k9.activity.compose.PgpInlineDialog$OnOpenPgpInlineChangeListener": [
      [
        "onOpenPgpInlineChange(boolean)",
        "The method is called when the user toggles the OpenPGP inline setting in K-9 Mail and takes a boolean parameter indicating whether the setting is now enabled or disabled."
      ]
    ],
    "com.fsck.k9.activity.compose.RecipientMvpView": [
      [
        "showCryptoSpecialMode(com.fsck.k9.activity.compose.RecipientMvpView$CryptoSpecialModeDisplayType)",
        "The goal of this method is to show or hide a special cryptographic mode indicator based on the given display type."
      ],
      [
        "showNoRecipientsError()",
        "To display an error message when there are no recipients specified in the email."
      ],
      [
        "recipientCcTryPerformCompletion()",
        "The goal of this method is to attempt to perform auto-completion for the CC recipient field."
      ],
      [
        "recipientToTryPerformCompletion()",
        "The goal of the method is to attempt to perform auto-completion for the \"To\" recipient field in the email compose view and return a boolean indicating whether the attempt was successful."
      ],
      [
        "getCcRecipients()",
        "This method returns a list of all the recipients included in the Cc field of the email compose screen."
      ],
      [
        "getToRecipients()",
        "The goal of this method is to retrieve a list of RecipientSelectView recipients who are in the \"To\" field of an email message."
      ],
      [
        "getBccRecipients()",
        "The method returns a list of recipients who are blind carbon copy (BCC) in a compose email view."
      ],
      [
        "recipientBccHasUncompletedText()",
        "The goal of the `recipientBccHasUncompletedText()` method is to check whether the Bcc recipient field has any uncompleted text."
      ],
      [
        "setCryptoProvider(java.lang.String)",
        "The goal of the method is to set the OpenPGP crypto provider for the recipient views in the compose activity."
      ],
      [
        "requestFocusOnCcField()",
        "The method requests focus on the CC field in the recipient view of an email compose screen."
      ],
      [
        "showErrorOpenPgpIncompatible()",
        "The goal of the method is to display a Toast message indicating that the OpenPGP provider is incompatible."
      ],
      [
        "getToAddresses()",
        "The `getToAddresses()` method returns a list of email addresses in the `to` field of a compose email message."
      ],
      [
        "showOpenPgpEncryptExplanationDialog()",
        "The goal of the method is to show a dialog explaining OpenPGP encryption to the user."
      ],
      [
        "launchUserInteractionPendingIntent(android.app.PendingIntent,int)",
        "This method launches a pending intent to allow user interaction."
      ],
      [
        "showToUncompletedError()",
        "The goal of the method is to display an error message when the \"to\" field of a recipient is incomplete."
      ],
      [
        "setBccVisibility(boolean)",
        "The goal of the `setBccVisibility(boolean)` method is to show or hide the BCC field in the compose email view based on the boolean parameter passed."
      ],
      [
        "showErrorIsSignOnly()",
        "The goal of the method is to show an error message indicating that encryption is required to send a message but only digital signature is enabled."
      ],
      [
        "showErrorInlineAttach()",
        "The method displays a toast message indicating an error with inline attachment of encrypted messages in the recipient view of the compose activity."
      ],
      [
        "getCcAddresses()",
        "The `getCcAddresses()` method returns a list of email addresses in the CC field of a compose email view."
      ],
      [
        "recipientToHasUncompletedText()",
        "The goal of the method is to check whether the recipient's \"To\" field has any uncompleted text."
      ],
      [
        "onClick(android.view.View)",
        "The goal of this method is to handle click events on various recipient-related views and invoke relevant presenter methods accordingly."
      ],
      [
        "onFocusChange(android.view.View,boolean)",
        "The method is called when a recipient field gains focus and it notifies the presenter that the corresponding recipient field has been focused."
      ],
      [
        "recipientBccTryPerformCompletion()",
        "The goal of the method is to attempt auto-completion for the BCC recipient field in the compose email view."
      ],
      [
        "isCcVisible()",
        "The method checks if the CC wrapper view is currently visible."
      ],
      [
        "getBccAddresses()",
        "The method returns the list of Bcc email addresses entered by the user in the Bcc field in the compose email view."
      ],
      [
        "setRecipientTokensShowCryptoEnabled(boolean)",
        "The goal of the method is to enable or disable the display of cryptographic information for the recipient fields in the email composition view."
      ],
      [
        "showErrorContactNoAddress()",
        "The goal of the method is to show a toast message indicating that the contact's address is not found."
      ],
      [
        "showErrorNoKeyConfigured()",
        "The method displays an error message to the user indicating that no encryption key has been configured for email communication."
      ],
      [
        "showErrorOpenPgpUserInteractionRequired()",
        "The goal of the method is to show an error message indicating that user interaction is required for OpenPGP encryption."
      ],
      [
        "setLoaderManager(android.app.LoaderManager)",
        "The method sets the loader manager for recipient views in the compose email screen."
      ],
      [
        "requestFocusOnBccField()",
        "The goal of this method is to request focus on the Bcc field in the compose recipient view."
      ],
      [
        "setFontSizes(com.fsck.k9.FontSizes,int)",
        "The method sets the font size for the \"to\", \"cc\", and \"bcc\" recipient views using the given font size and `FontSizes` object."
      ],
      [
        "setRecipientExpanderVisibility(boolean)",
        "The goal of the `setRecipientExpanderVisibility(boolean)` method is to show or hide the BCC field expander in the recipient view of a compose email activity depending on the passed boolean value."
      ],
      [
        "showContactPicker(int)",
        "The method shows a contact picker to the user, with a specified request code."
      ],
      [
        "showErrorOpenPgpConnection()",
        "The goal of the method is to show an error message related to connecting to the OpenPGP provider."
      ],
      [
        "addTextChangedListener(android.text.TextWatcher)",
        "The goal of the method is to add a `TextWatcher` to the `toView`, `ccView`, and `bccView` text fields."
      ],
      [
        "recipientCcHasUncompletedText()",
        "The goal of this method is to determine if there is uncompleted text in the CC recipient field of an email being composed."
      ],
      [
        "showOpenPgpInlineDialog(boolean)",
        "The goal of this method is to show an inline OpenPGP dialog for composing messages with encryption and signature options."
      ],
      [
        "showCcUncompletedError()",
        "The goal of the `showCcUncompletedError()` method is to display an error message when the Cc field is incomplete in the Compose Message screen."
      ],
      [
        "addRecipients(com.fsck.k9.mail.Message.RecipientType,com.fsck.k9.view.RecipientSelectView$Recipient[])",
        "This method adds recipients to the appropriate view based on the type of recipient."
      ],
      [
        "showErrorOpenPgpRetrieveStatus()",
        "The goal of the method is to display an error message indicating that the OpenPGP status could not be retrieved for a recipient."
      ],
      [
        "requestFocusOnToField()",
        "The goal of this method is to set the focus on the \"TO\" field of the email compose view."
      ],
      [
        "showBccUncompletedError()",
        "The goal of the method is to show an error message on the BCC field when the recipient is incomplete."
      ],
      [
        "showCryptoStatus(com.fsck.k9.activity.compose.RecipientMvpView$CryptoStatusDisplayType)",
        "The method is responsible for showing the crypto status of a recipient, animating the display of the status icons if necessary."
      ],
      [
        "showOpenPgpSignOnlyDialog(boolean)",
        "The goal of the method is to show a dialog box for OpenPGP sign-only options in the email message recipient view, based on a boolean value indicating if it is the first time opening the dialog box."
      ],
      [
        "isBccVisible()",
        "The method is checking whether the BCC (blind carbon copy) field is currently visible in the recipient view."
      ],
      [
        "setPresenter(com.fsck.k9.activity.compose.RecipientPresenter)",
        "The `setPresenter` method is setting the presenter for the RecipientMvpView and attaching listeners for the token addition, removal, and change for each recipient type."
      ],
      [
        "showOpenPgpEnabledErrorDialog(boolean)",
        "To show a dialog indicating that OpenPGP encryption is enabled but the recipient does not support it."
      ],
      [
        "setCcVisibility(boolean)",
        "The method sets the visibility of the CC field and its divider based on a boolean input."
      ]
    ],
    "com.fsck.k9.activity.compose.RecipientPresenter": [
      [
        "onPrepareOptionsMenu(android.view.Menu)",
        "This method prepares the options menu for the recipient selection screen of the email composition screen, setting the visible options based on the current cached crypto status and the availability of a contact picker."
      ],
      [
        "initFromSendOrViewIntent(android.content.Intent)",
        "The goal of the `initFromSendOrViewIntent` method is to extract email addresses from an intent and add them to the recipient fields of a compose email screen."
      ],
      [
        "onSwitchAccount(com.fsck.k9.Account)",
        "The method sets the current account for composing a message and adjusts the visibility of CC/BCC fields based on the account's settings, while also setting up the crypto provider."
      ],
      [
        "builderSetProperties(com.fsck.k9.message.PgpMessageBuilder,com.fsck.k9.activity.compose.ComposeCryptoStatus)",
        "The method sets various properties of a PgpMessageBuilder object with recipient addresses and encryption status."
      ],
      [
        "onMenuSetPgpInline(boolean)",
        "The goal of the method is to handle the user's selection to enable or disable inline PGP encryption in the recipient presenter, and optionally show a dialog if PGP inline has not been used before."
      ],
      [
        "getCcAddresses()",
        "The method returns a list of carbon copy email addresses entered by the user in the compose email screen."
      ],
      [
        "getCurrentCachedCryptoStatus()",
        "The goal of the method is to return the current cached cryptographic status for the compose activity's recipient presenter."
      ],
      [
        "addBccAddresses(com.fsck.k9.mail.Address[])",
        "The method adds BCC addresses to the recipient list, updates the visibility of the BCC field, and updates the visibility of the recipient expander."
      ],
      [
        "onCryptoModeChanged(com.fsck.k9.activity.compose.RecipientPresenter$CryptoMode)",
        "The method updates the current crypto mode and triggers an asynchronous update of the crypto status."
      ],
      [
        "initFromTrustIdAction(java.lang.String)",
        "The goal of the method is to add a parsed address from a trust ID string to the list of addresses and enable the choice of crypto mode."
      ],
      [
        "onNonRecipientFieldFocused()",
        "The goal of the method is to hide empty extended recipient fields if the account is not set to always show cc/bcc."
      ],
      [
        "shouldSaveRemotely()",
        "The goal of the method is to determine whether the recipient email address should be saved remotely based on the cached encryption status."
      ],
      [
        "builderSetProperties(com.fsck.k9.message.MessageBuilder)",
        "The method sets the recipient properties (To, Cc, and Bcc) for a given message builder."
      ],
      [
        "initFromReplyToMessage(com.fsck.k9.mail.Message,boolean)",
        "The `initFromReplyToMessage` method initializes the recipient list, whether to reply all or only to the sender, whether to use PGP encryption, and what the current crypto mode is based on the given message."
      ],
      [
        "checkRecipientsOkForSending()",
        "The method is used to check if the recipients for an email are valid before sending."
      ],
      [
        "onCryptoPgpClickDisable()",
        "The goal of the method is to set the crypto mode to \"no choice\" when the \"disable PGP\" button is clicked."
      ],
      [
        "onRestoreInstanceState(android.os.Bundle)",
        "The method restores the state of recipient fields and visibility settings after a configuration change."
      ],
      [
        "onMenuAddFromContacts()",
        "The goal of this method is to show the contact picker when the \"Add from Contacts\" menu is clicked."
      ],
      [
        "showPgpSendError(com.fsck.k9.activity.compose.ComposeCryptoStatus$SendErrorState)",
        "The goal of this method is to show a specific error message depending on the send error state related to PGP encryption."
      ],
      [
        "onCryptoPgpInlineChanged(boolean)",
        "The goal of the method is to update the value of `cryptoEnablePgpInline` variable and asynchronously update the status of encryption."
      ],
      [
        "onSaveInstanceState(android.os.Bundle)",
        "The goal of this method is to save the state of certain recipient-related variables and views in order to restore them later."
      ],
      [
        "initFromMailto(com.fsck.k9.helper.MailTo)",
        "The goal of the method is to initialize the recipient addresses with the values extracted from the given email address in mailto format."
      ],
      [
        "initFromDraftMessage(com.fsck.k9.mail.Message)",
        "The method initializes recipient and PGP inline settings from the given draft message."
      ],
      [
        "onPgpPermissionCheckResult(android.content.Intent)",
        "The `onPgpPermissionCheckResult` method handles the result of a permission check for OpenPGP encryption and sets the appropriate state of the crypto provider."
      ],
      [
        "onActivityDestroy()",
        "The goal of this method is to unbind from the OpenPGP service connection if it is currently bound and set the connection to null."
      ],
      [
        "onSwitchIdentity(com.fsck.k9.Identity)",
        "The goal of the method is currently unknown and needs to be defined as the code is commented out and contains a TODO statement."
      ],
      [
        "onMenuSetEnableEncryption(boolean)",
        "The goal of the method `onMenuSetEnableEncryption(boolean)` is to enable or disable email encryption based on the `enableEncryption` parameter and the status of the cached crypto."
      ],
      [
        "asyncUpdateCryptoStatus()",
        "The goal of the `asyncUpdateCryptoStatus()` method is to update the cached crypto status for the recipient of an email in the background and redraw the icon for the cached status."
      ],
      [
        "onActivityResult(int,int,android.content.Intent)",
        "The goal of this method is to handle the results of various activities launched from the compose screen, such as selecting contacts or interacting with encryption providers."
      ],
      [
        "onMenuSetSignOnly(boolean)",
        "The goal of the method `onMenuSetSignOnly(boolean)` is to enable or disable the \"Sign Only\" mode for composing emails, and show a dialog if necessary."
      ],
      [
        "getToAddresses()",
        "The method returns a list of email addresses in the \"To\" field of an email message being composed."
      ],
      [
        "onCryptoPgpSignOnlyDisabled()",
        "The method disables PGP sign-only mode and updates the crypto mode to none."
      ],
      [
        "isForceTextMessageFormat()",
        "The goal of the method is to return whether PGP inline encryption is enabled for the message being composed."
      ]
    ],
    "com.fsck.k9.activity.compose.AttachmentPresenter": [
      [
        "addAttachment(android.net.Uri,java.lang.String)",
        "The goal of this method is to add an attachment with a given URI and content type to the AttachmentPresenter and start loading it."
      ],
      [
        "checkOkForSendingOrDraftSaving()",
        "The method determines if it is okay to proceed with sending an email or saving a draft, by checking if any attachments are still loading and displaying a dialog if necessary."
      ],
      [
        "processMessageToForward(com.fsck.k9.mailstore.MessageViewInfo)",
        "The goal of the method is to process a message to be forwarded and show a warning if there are missing attachments."
      ],
      [
        "loadNonInlineAttachments(com.fsck.k9.mailstore.MessageViewInfo)",
        "The `loadNonInlineAttachments` method aims to load non-inline attachments associated with a given `MessageViewInfo` object, and return a boolean indicating if all the attachments' contents are available."
      ],
      [
        "onClickRemoveAttachment(android.net.Uri)",
        "The method aims to remove a previously added attachment from the email being composed."
      ],
      [
        "onRestoreInstanceState(android.os.Bundle)",
        "The goal of this method is to restore the saved state of the AttachmentPresenter's waiting action, next loader ID, and attachments."
      ],
      [
        "onClickAddAttachment(com.fsck.k9.activity.compose.RecipientPresenter)",
        "The method handles the action of clicking on the add attachment button in the compose email screen, checking for encryption status and errors, and then showing the attachment dialog if appropriate."
      ],
      [
        "onActivityResult(int,int,android.content.Intent)",
        "The `onActivityResult` method handles the results from attaching files to a compose email and adds the attachments to the email."
      ],
      [
        "createAttachmentList()",
        "The goal of the method is to create and return a list of attachments from the existing attachments stored in the `attachments` field."
      ],
      [
        "onSaveInstanceState(android.os.Bundle)",
        "The goal of the method is to save the state of the AttachmentPresenter, including waiting attachments, attachment list, and the next loader ID, to a Bundle."
      ],
      [
        "attachmentProgressDialogCancelled()",
        "The goal of the method is to reset the `actionToPerformAfterWaiting` variable to `WaitingAction.NONE` when the user cancels the attachment progress dialog."
      ]
    ],
    "com.fsck.k9.activity.compose.AttachmentPresenter$AttachmentsChangedListener": [
      [
        "onAttachmentAdded()",
        "The goal of the method `onAttachmentAdded()` is to notify that an attachment has been added to the compose screen."
      ],
      [
        "onAttachmentRemoved()",
        "The goal of the method is to notify the listener that an attachment has been removed from the message being composed."
      ]
    ]
  },
  "com.fsck.k9.activity.loader": {
    "com.fsck.k9.activity.loader.AttachmentContentLoader": [
      [
        "loadInBackground()",
        "The `loadInBackground()` method saves an attachment to a temporary file and returns it as an `Attachment` object."
      ]
    ],
    "com.fsck.k9.activity.loader.AttachmentInfoLoader": [
      [
        "loadInBackground()",
        "The `loadInBackground()` method loads metadata of an attachment from a given URI and returns an `Attachment` object with the metadata loaded."
      ]
    ]
  },
  "com.fsck.k9.activity.misc": {
    "com.fsck.k9.activity.misc.ContactPictureLoader$FallbackGlideModelLoader": [
      [
        "getResourceFetcher(com.fsck.k9.activity.misc.ContactPictureLoader$FallbackGlideParams,int,int)",
        "The goal of this method is to return a DataFetcher that fetches a fallback contact picture using a given set of parameters."
      ]
    ],
    "com.fsck.k9.activity.misc.ContactPictureLoader$FallbackGlideBitmapDecoder": [
      [
        "decode(com.fsck.k9.activity.misc.ContactPictureLoader$FallbackGlideParams,int,int)",
        "The goal of the `decode` method is to decode an image represented by a set of parameters into a bitmap, with the addition of drawing specified text and background color on the image."
      ],
      [
        "getId()",
        "The goal of the method is to return a unique identifier for the fallback photo used by the ContactPictureLoader class."
      ]
    ],
    "com.fsck.k9.activity.misc.ContactPictureLoader": [
      [
        "loadContactPicture(com.fsck.k9.view.RecipientSelectView$Recipient,android.widget.ImageView)",
        "The goal of the method is to load a contact picture into an ImageView based on the recipient's photo thumbnail URI and address."
      ],
      [
        "loadContactPicture(com.fsck.k9.mail.Address,android.widget.ImageView)",
        "The method aims to load the contact picture of an email address into an ImageView widget."
      ]
    ],
    "com.fsck.k9.activity.misc.ContactPictureLoader$FallbackGlideParams": [
      [
        "getId()",
        "The goal of this method is to generate a unique identifier for a contact's picture based on their email address and personal name."
      ]
    ],
    "com.fsck.k9.activity.misc.SwipeGestureDetector$OnSwipeGestureListener": [
      [
        "onSwipeRightToLeft(android.view.MotionEvent,android.view.MotionEvent)",
        "The goal of the method is to handle a swipe gesture from right to left."
      ],
      [
        "onSwipeLeftToRight(android.view.MotionEvent,android.view.MotionEvent)",
        "The goal of this method is to be called when a left to right swipe gesture is detected by the `MyGestureDetector`."
      ]
    ],
    "com.fsck.k9.activity.misc.Attachment": [
      [
        "createAttachment(android.net.Uri,int,java.lang.String)",
        "The goal of this method is to create a new instance of the `Attachment` class with the specified Uri, loaderId, and contentType."
      ],
      [
        "deriveWithLoadComplete(java.lang.String)",
        "The goal of the `deriveWithLoadComplete` method is to create a new attachment object with the loading state set to `COMPLETE` and the absolute path of the attachment file."
      ],
      [
        "writeToParcel(android.os.Parcel,int)",
        "The goal of this method is to write the object's data to a Parcel object for sending it to another part of the application."
      ],
      [
        "describeContents()",
        "The `describeContents()` method is used to describe any special objects contained in the parcel."
      ],
      [
        "deriveWithLoadCancelled()",
        "The goal of this method is to create a new attachment object with the same properties as the original, but with the loading state set to \"CANCELLED\"."
      ],
      [
        "deriveWithMetadataLoaded(java.lang.String,java.lang.String,long)",
        "The goal of this method is to return a new `Attachment` object with metadata loaded from the original `uri`."
      ]
    ],
    "com.fsck.k9.activity.misc.ExtendedAsyncTask": [
      [
        "restore(android.app.Activity)",
        "The goal of the method is to bind a new activity instance to the AsyncTask and create a new progress dialog that is bound to the new activity."
      ],
      [
        "retain()",
        "The goal of the `retain()` method is to detach an `AsyncTask` from the `Activity` it was bound to and to destroy the progress dialog associated with it, while determining if the instance should be retained or not."
      ]
    ],
    "com.fsck.k9.activity.misc.SwipeGestureDetector": [
      [
        "onFling(android.view.MotionEvent,android.view.MotionEvent,float,float)",
        "The goal of this method is to detect swipe gestures by calculating the distance and velocity between two `MotionEvent` objects and invoking the corresponding listener method based on the direction of the swipe."
      ],
      [
        "onDown(android.view.MotionEvent)",
        "The goal of the `onDown` method is to store the `MotionEvent` and return a boolean indicating if the gesture detection should continue."
      ]
    ],
    "com.fsck.k9.activity.misc.NonConfigurationInstance": [
      [
        "restore(android.app.Activity)",
        "The goal of the method is to connect the retained `NonConfigurationInstance` to a new instance of `Activity`."
      ],
      [
        "retain()",
        "The goal of the `retain()` method is to determine whether to retain the current `NonConfigurationInstance` and clean up resources if necessary, while ensuring that references to the current activity are cleared to avoid memory leaks."
      ]
    ]
  },
  "com.fsck.k9.activity.setup": {
    "com.fsck.k9.activity.setup.OpenPgpAppSelectDialog": [
      [
        "onDismissApgDialog()",
        "The goal of the method is to display a dialog fragment for selecting the OpenPGP app after dismissing the previously displayed dialog."
      ],
      [
        "onCreate(android.os.Bundle)",
        "The goal of the `onCreate` method is to set the appropriate theme and show the OpenPGP app select dialog fragment if there is no saved instance state."
      ],
      [
        "onSelectProvider(java.lang.String)",
        "The method selects the OpenPGP provider package to be used and finishes the dialog."
      ]
    ],
    "com.fsck.k9.activity.setup.OpenPgpAppSelectDialog$ApgDeprecationDialogFragment": [
      [
        "onCreateDialog(android.os.Bundle)",
        "The goal of the method is to create and return a new instance of `com.fsck.k9.ui.dialog.ApgDeprecationWarningDialog`."
      ],
      [
        "onDismiss(android.content.DialogInterface)",
        "The method is called when the dialog is dismissed and it calls the `onDismissApgDialog()` method of the `OpenPgpAppSelectDialog` class."
      ]
    ],
    "com.fsck.k9.activity.setup.AccountSetupOptions": [
      [
        "onCreate(android.os.Bundle)",
        "The method sets up the account options activity UI and populates it with data from account preferences."
      ],
      [
        "actionOptions(android.content.Context,com.fsck.k9.Account,boolean)",
        "The goal of this method is to start the activity `AccountSetupOptions` with specified account and default settings."
      ],
      [
        "onClick(android.view.View)",
        "The goal of this method is to call the `onDone()` method when the \"next\" button is clicked."
      ]
    ],
    "com.fsck.k9.activity.setup.AuthTypeAdapter": [
      [
        "getAuthPosition(com.fsck.k9.mail.AuthType)",
        "The goal of the method is to return the position of the given authentication type in the adapter."
      ],
      [
        "useInsecureText(boolean)",
        "The method changes the text label for the \"AuthType.PLAIN\" option presented to users depending on whether the password is transmitted securely or insecurely."
      ],
      [
        "get(android.content.Context)",
        "This method returns an adapter for a spinner that displays available email authentication types."
      ]
    ],
    "com.fsck.k9.activity.setup.OpenPgpAppSelectDialog$OpenPgpProviderEntry": [
      [
        "toString()",
        "The goal of this method is to return the simple name of an OpenPgp provider as a string representation of the object."
      ]
    ],
    "com.fsck.k9.activity.setup.AccountSetupAccountType": [
      [
        "actionSelectAccountType(android.content.Context,com.fsck.k9.Account,boolean)",
        "The method is intended to start an activity to select the type of email account and pass some relevant data."
      ],
      [
        "onClick(android.view.View)",
        "The goal of this method is to call specific setup methods based on the ID of the button clicked and then start the incoming settings activity and finish the current activity."
      ],
      [
        "onCreate(android.os.Bundle)",
        "The `onCreate` method sets up the UI and initializes variables for selecting the type of email account to be set up."
      ]
    ],
    "com.fsck.k9.activity.setup.AccountSetupOutgoing": [
      [
        "onCheckedChanged(android.widget.CompoundButton,boolean)",
        "The goal of the method is to toggle the visibility of a view based on the checked state of a checkbox and validate input fields."
      ],
      [
        "onSaveInstanceState(android.os.Bundle)",
        "The goal of the `onSaveInstanceState(android.os.Bundle)` method in class `com.fsck.k9.activity.setup.AccountSetupOutgoing` is to save the state of the current outgoing email account setup and its security and authentication type positions."
      ],
      [
        "onActivityResult(int,int,android.content.Intent)",
        "This method handles the result of an activity launched for setting up an outgoing email account and either saves the account information or launches additional options."
      ],
      [
        "actionOutgoingSettings(android.content.Context,com.fsck.k9.Account,boolean)",
        "The `actionOutgoingSettings` method starts the `AccountSetupOutgoing` activity with the specified account UUID and boolean makeDefault values as extras."
      ],
      [
        "actionEditOutgoingSettings(android.content.Context,com.fsck.k9.Account)",
        "The goal of this method is to start the activity for editing outgoing email settings for a given K9 email account."
      ],
      [
        "onCreate(android.os.Bundle)",
        "The goal of the method is to set up the user interface for adding or editing an outgoing email account, and to retrieve and display the existing settings for that account if it already exists."
      ],
      [
        "intentActionEditOutgoingSettings(android.content.Context,com.fsck.k9.Account)",
        "The goal of this method is to create an intent for editing outgoing email settings for a specific K9 account."
      ],
      [
        "onClick(android.view.View)",
        "The goal of this method is to handle a button click event and call the `onNext` method if the clicked button is the \"Next\" button."
      ]
    ],
    "com.fsck.k9.activity.setup.AccountSettings": [
      [
        "onCreateDialog(int)",
        "The goal of this method is to create a `ColorPickerDialog` for selecting colors for the account and LED notification settings."
      ],
      [
        "onPrepareDialog(int,android.app.Dialog)",
        "The method prepares the color picker dialog by setting the color based on the account and the notification settings."
      ],
      [
        "actionSettings(android.content.Context,com.fsck.k9.Account)",
        "The method is used to launch the account settings activity for a given K-9 mail account."
      ],
      [
        "onChooseLedColor()",
        "The method opens a dialog box to allow the user to pick a LED color for their email notifications."
      ],
      [
        "onChooseChipColor()",
        "The goal of this method is to show a color picker dialog for choosing a color associated with an email account."
      ],
      [
        "onActivityResult(int,int,android.content.Intent)",
        "The method handles the results from child activities, specifically setting the summary of the auto-expand folder if the request code matches."
      ],
      [
        "onChooseAutoExpandFolder()",
        "The goal of the `onChooseAutoExpandFolder()` method is to launch an activity to allow the user to choose which folder to automatically expand in the email client for a specific account."
      ]
    ],
    "com.fsck.k9.activity.setup.SpinnerOption": [
      [
        "toString()",
        "The goal of the method is to return the label value as a string representation of the `SpinnerOption` object."
      ],
      [
        "setSpinnerOptionValue(android.widget.Spinner,java.lang.Object)",
        "The method sets the value of a Spinner to the specified object by iterating through its options and selecting the option with a matching value."
      ]
    ],
    "com.fsck.k9.activity.setup.FolderSettings": [
      [
        "onPause()",
        "The goal of the `onPause()` method in class `com.fsck.k9.activity.setup.FolderSettings` is to save folder settings when the activity is being paused and handle any exceptions that occur during the process."
      ],
      [
        "actionSettings(android.content.Context,com.fsck.k9.Account,java.lang.String)",
        "The goal of this method is to start the `FolderSettings` activity with the given folder name and account."
      ],
      [
        "onCreate(android.os.Bundle)",
        "The `onCreate` method initializes the interface and UI elements for editing folder preferences."
      ]
    ],
    "com.fsck.k9.activity.setup.AccountSetupCheckSettings": [
      [
        "onDestroy()",
        "The goal of the method is to set the variables `mDestroyed` and `mCanceled` to `true` when the activity is destroyed."
      ],
      [
        "actionCheckSettings(android.app.Activity,com.fsck.k9.Account,com.fsck.k9.activity.setup.AccountSetupCheckSettings$CheckDirection)",
        "The method launches an activity to check the settings of an email account."
      ],
      [
        "onClick(android.view.View)",
        "The goal of this method is to perform an action (here, calling the `onCancel()` method) when the \"cancel\" button is clicked."
      ],
      [
        "doPositiveClick(int)",
        "The goal of this method is to finish the current activity if the dialog with ID `R.id.dialog_account_setup_error` has a positive button click."
      ],
      [
        "onCreate(android.os.Bundle)",
        "The method sets up the UI elements and launches a task to check the settings of a specific email account."
      ],
      [
        "dialogCancelled(int)",
        "The method is called when a dialog is cancelled and it does not have any functionality."
      ],
      [
        "onActivityResult(int,int,android.content.Intent)",
        "The method sets the result code for the activity and finishes the activity."
      ],
      [
        "doNegativeClick(int)",
        "The goal of the `doNegativeClick(int)` method is to handle negative click events for a specific dialog and set a result for the account setup check settings activity."
      ]
    ],
    "com.fsck.k9.activity.setup.AccountSetupComposition": [
      [
        "onBackPressed()",
        "The goal of the method is to save the settings and call the superclass implementation of `onBackPressed()`."
      ],
      [
        "onCreate(android.os.Bundle)",
        "The goal of this method is to initialize and display the layout for setting up the properties of a specific email account."
      ],
      [
        "onActivityResult(int,int,android.content.Intent)",
        "The goal of this method is to save the current account settings and finish the composition setup activity."
      ],
      [
        "onSaveInstanceState(android.os.Bundle)",
        "The goal of this method is to save the account UUID in the bundle for the activity's state in case the activity needs to be recreated later."
      ],
      [
        "actionEditCompositionSettings(android.app.Activity,com.fsck.k9.Account)",
        "The goal of the `actionEditCompositionSettings` method is to start an activity for editing the composition settings of a K9 email account."
      ]
    ],
    "com.fsck.k9.activity.setup.ConnectionSecurityAdapter": [
      [
        "get(android.content.Context,com.fsck.k9.mail.ConnectionSecurity[])",
        "This method creates a new `ConnectionSecurityAdapter` object for a specified context and array of `ConnectionSecurity` items."
      ],
      [
        "getConnectionSecurityPosition(com.fsck.k9.mail.ConnectionSecurity)",
        "This method returns the position of a given `ConnectionSecurity` value in the list of available connection security options."
      ],
      [
        "get(android.content.Context)",
        "The method returns an instance of ConnectionSecurityAdapter class with default ConnectionSecurity values."
      ]
    ],
    "com.fsck.k9.activity.setup.WelcomeMessage": [
      [
        "onCreate(android.os.Bundle)",
        "The goal of this method is to initialize the UI elements and set the welcome message for the setup process of the K-9 email client app."
      ],
      [
        "onClick(android.view.View)",
        "The goal of this method is to handle clicks on the \"Next\" and \"Import Settings\" buttons in order to start a new account setup or import settings and then finish the current activity."
      ],
      [
        "showWelcomeMessage(android.content.Context)",
        "The goal of the method is to display the welcome message activity in the given context."
      ]
    ],
    "com.fsck.k9.activity.setup.AccountSetupIncoming": [
      [
        "actionIncomingSettings(android.app.Activity,com.fsck.k9.Account,boolean)",
        "The method launches the `com.fsck.k9.activity.setup.AccountSetupIncoming` activity to set up incoming server settings for the specified email account."
      ],
      [
        "onSaveInstanceState(android.os.Bundle)",
        "The goal of the method is to save the current state of the incoming email account setup in a bundle."
      ],
      [
        "intentActionEditIncomingSettings(android.content.Context,com.fsck.k9.Account)",
        "The `intentActionEditIncomingSettings` method creates an intent to edit the incoming settings for a given email account in the K-9 mail client application."
      ],
      [
        "onClick(android.view.View)",
        "The goal of this method is to handle clicks on the \"next\" button and call the onNext() method."
      ],
      [
        "actionEditIncomingSettings(android.app.Activity,com.fsck.k9.Account)",
        "The goal of this method is to start the activity for editing the incoming server settings of a K-9 email account."
      ],
      [
        "onActivityResult(int,int,android.content.Intent)",
        "The `onActivityResult` method saves or sets up the user's email account settings for incoming and outgoing mail."
      ],
      [
        "onCreate(android.os.Bundle)",
        "The goal of the `onCreate` method in class `com.fsck.k9.activity.setup.AccountSetupIncoming` is to initialize the UI elements and set their values based on the selected account type and settings."
      ]
    ],
    "com.fsck.k9.activity.setup.FontSizeSettings": [
      [
        "actionEditSettings(android.content.Context)",
        "The goal of the method is to start the FontSizeSettings activity in the K-9 email client application."
      ],
      [
        "onCreate(android.os.Bundle)",
        "The goal of this method is to initialize the various font size preferences and their values for different parts of the email user interface."
      ],
      [
        "onBackPressed()",
        "The goal of the method is to save the settings and then call the superclass implementation of the `onBackPressed()` method."
      ]
    ],
    "com.fsck.k9.activity.setup.AccountSetupNames": [
      [
        "onClick(android.view.View)",
        "The goal of the method is to check if the \"done\" button is clicked and call the `onNext` method if it is."
      ],
      [
        "onCreate(android.os.Bundle)",
        "The goal of the `onCreate` method in this class is to set up the UI components and listeners, retrieve and display saved account name, and enable/disable the done button based on the validity of the entered account name."
      ],
      [
        "actionSetNames(android.content.Context,com.fsck.k9.Account)",
        "The method starts an activity to set the name of a specified email account in the K-9 email client."
      ]
    ],
    "com.fsck.k9.activity.setup.SliderPreference": [
      [
        "setValue(float)",
        "The method sets the value of the SliderPreference and saves the value to preferences if it should be persisted."
      ],
      [
        "getValue()",
        "The goal of this method is to return the current value of the SliderPreference."
      ],
      [
        "getSummary()",
        "The goal of the `getSummary()` method is to return a summary text based on the current value of a slider preference."
      ],
      [
        "setSummary(int)",
        "The goal of the `setSummary(int)` method is to set the summary text of the SliderPreference using a string array resource ID."
      ],
      [
        "setSummary(java.lang.CharSequence)",
        "The method sets the summary text for the preference and reset the summaries array."
      ],
      [
        "setSummary(java.lang.CharSequence[])",
        "The method sets the summaries to be displayed in the preference slider."
      ]
    ],
    "com.fsck.k9.activity.setup.ConnectionSecurityHolder": [
      [
        "toString()",
        "The method returns a string representation of the connection security for display purposes."
      ]
    ],
    "com.fsck.k9.activity.setup.Prefs": [
      [
        "actionPrefs(android.content.Context)",
        "The goal of the `actionPrefs` method is to launch the preferences activity for the K-9 mail application."
      ]
    ],
    "com.fsck.k9.activity.setup.OpenPgpAppSelectDialog$OpenPgpAppSelectFragment": [
      [
        "onDismiss(android.content.DialogInterface)",
        "The method is called when the dialog is dismissed, and it calls the `onSelectProvider` method in the parent activity, passing the selected package as an argument."
      ],
      [
        "onCreateDialog(android.os.Bundle)",
        "The goal of the `onCreateDialog` method is to create a dialog displaying a list of available OpenPGP providers and allow the user to select one of them."
      ],
      [
        "onCreate(android.os.Bundle)",
        "The goal of this method is to set the selectedPackage variable to the currently selected OpenPGP provider in K9 email client."
      ]
    ],
    "com.fsck.k9.activity.setup.AuthTypeHolder": [
      [
        "toString()",
        "The `toString()` method returns a string representation of the authentication type, either from its name or from a resource ID."
      ],
      [
        "setInsecure(boolean)",
        "The method sets the value of a boolean variable called \"insecure\" in the AuthTypeHolder class."
      ]
    ],
    "com.fsck.k9.activity.setup.AccountSetupBasics": [
      [
        "onSaveInstanceState(android.os.Bundle)",
        "The goal of this method is to save the state of the `AccountSetupBasics` activity in a `Bundle`."
      ],
      [
        "afterTextChanged(android.text.Editable)",
        "The method `afterTextChanged` is used to invoke the `validateFields` method after the text has been changed in the input field."
      ],
      [
        "onActivityResult(int,int,android.content.Intent)",
        "The method handles the result received from another activity initiated by the current activity and checks if the incoming and outgoing mail settings for the email account have been successfully checked, and if positive, proceeds to save the account information and enable services."
      ],
      [
        "beforeTextChanged(java.lang.CharSequence,int,int,int)",
        "The method is called before the text is changed in an editable text field and does not have a specific goal as it is an empty method."
      ],
      [
        "onClick(android.view.View)",
        "The goal of this method is to handle clicks on the \"Next\" and \"Manual Setup\" buttons, calling the appropriate methods accordingly."
      ],
      [
        "onCreate(android.os.Bundle)",
        "The `onCreate` method initializes the UI elements and sets click listeners for the \"next\" and \"manual setup\" buttons in the account setup basics screen of the K-9 Mail app."
      ],
      [
        "onCreateDialog(int)",
        "The goal of this method is to create a dialog box with a message and options to finish or cancel the setup of an email account."
      ],
      [
        "onTextChanged(java.lang.CharSequence,int,int,int)",
        "The method responds to text changes in an input field by updating relevant UI components."
      ],
      [
        "actionNewAccount(android.content.Context)",
        "The method starts the `AccountSetupBasics` activity to create a new email account."
      ],
      [
        "onClientCertificateChanged(java.lang.String)",
        "The goal of this method is to validate the fields when the client certificate is changed."
      ],
      [
        "onCheckedChanged(android.widget.CompoundButton,boolean)",
        "The method updates the view visibility, validates the fields, and enables the user to select or confirm the client certificate when the checkbox is checked."
      ]
    ]
  },
  "com.fsck.k9.autocrypt": {
    "com.fsck.k9.autocrypt.AutocryptHeaderParser": [
      [
        "getInstance()",
        "This method returns an instance of the AutocryptHeaderParser class."
      ]
    ],
    "com.fsck.k9.autocrypt.AutocryptOperations": [
      [
        "addAutocryptPeerUpdateToIntentIfPresent(com.fsck.k9.mail.Message,android.content.Intent)",
        "The goal of the method is to add an AutocryptPeerUpdate data and messageFromAddress to an intent if a valid AutocryptHeader is present in the message and the messageFromAddress matches the address in the header."
      ],
      [
        "getInstance()",
        "To instantiate a new instance of `AutocryptOperations` with a new instance of `AutocryptHeaderParser`."
      ],
      [
        "addAutocryptHeaderToMessage(com.fsck.k9.mail.Message,byte[],java.lang.String,boolean)",
        "The goal of the `addAutocryptHeaderToMessage` method is to add an Autocrypt header to a given email message with the provided key data, Autocrypt address, and encryption preference."
      ],
      [
        "hasAutocryptHeader(com.fsck.k9.mail.Message)",
        "The method checks whether a given email message has an Autocrypt header."
      ]
    ],
    "com.fsck.k9.autocrypt.AutocryptOpenPgpApiInteractor": [
      [
        "getInstance()",
        "The `getInstance()` method creates and returns a new instance of the `AutocryptOpenPgpApiInteractor` class."
      ],
      [
        "getKeyMaterialFromApi(org.openintents.openpgp.util.OpenPgpApi,long,java.lang.String)",
        "The goal of the `getKeyMaterialFromApi` method is to retrieve key material from the OpenPGP API and return it as a byte array."
      ]
    ],
    "com.fsck.k9.autocrypt.AutocryptHeader": [
      [
        "hashCode()",
        "The `hashCode()` method computes and returns the hash code value of an Autocrypt header object based on its key data, email address, parameters, and whether mutual encryption is preferred."
      ],
      [
        "equals(java.lang.Object)",
        "The `equals` method is used to determine whether an object of `AutocryptHeader` is equal to another object of the same class by comparing the values of their instance variables."
      ]
    ]
  },
  "com.fsck.k9.cache": {
    "com.fsck.k9.cache.TemporaryAttachmentStore": [
      [
        "getFileForWriting(android.content.Context,java.lang.String)",
        "The method returns a File object representing the location where an attachment file can be written to temporarily for caching purposes."
      ],
      [
        "getFile(android.content.Context,java.lang.String)",
        "The goal of the method is to get the temporary attachment file with the given name in the specified context."
      ]
    ],
    "com.fsck.k9.cache.EmailProviderCacheCursor": [
      [
        "getPosition()",
        "The method returns the current position of the cursor, taking into account any hidden rows."
      ],
      [
        "moveToNext()",
        "The goal of the `moveToNext()` method is to move the cursor to the next position in the cache."
      ],
      [
        "moveToPosition(int)",
        "The method `moveToPosition(int)` is used to move the cursor to a specific position taking into account any hidden rows."
      ],
      [
        "moveToLast()",
        "The `moveToLast()` method aims to move the cursor to the last position and return a Boolean value indicating the success of the operation."
      ],
      [
        "isLast()",
        "This method checks if the current position is the last row in the cursor, ignoring any hidden rows."
      ],
      [
        "getInt(int)",
        "The method retrieves an integer value for a given column index by first trying to fetch the value from the cache for either a message or thread root, and falling back to the parent method if no value is found."
      ],
      [
        "moveToFirst()",
        "The goal of this method is to move the cursor to the first position in the cache and return a boolean indicating whether the action was successful."
      ],
      [
        "move(int)",
        "The `move(int)` method moves the cursor to the specified position relative to its current position and returns `true` if the new position is valid."
      ],
      [
        "moveToPrevious()",
        "The method moves the cursor to the previous row."
      ],
      [
        "getCount()",
        "This method returns the number of rows in a cursor excluding the hidden rows."
      ]
    ],
    "com.fsck.k9.cache.EmailProviderCache": [
      [
        "getCache(java.lang.String,android.content.Context)",
        "The goal of the method is to return an instance of the `EmailProviderCache` for a given account UUID and context."
      ],
      [
        "setValueForThreads(java.util.List,java.lang.String,java.lang.String)",
        "The `setValueForThreads` method sets the value of a specified column for a list of email threads in the cache."
      ],
      [
        "removeValueForThreads(java.util.List,java.lang.String)",
        "The goal of the method is to remove a specified value from the cache for a list of thread root IDs."
      ],
      [
        "hideMessages(java.util.List)",
        "The goal of the `hideMessages` method is to add the given list of messages to the cache of hidden messages and notify listeners of the change."
      ],
      [
        "removeValueForMessages(java.util.List,java.lang.String)",
        "The `removeValueForMessages` method removes a specific column value from the cache for a list of email message IDs."
      ],
      [
        "setValueForMessages(java.util.List,java.lang.String,java.lang.String)",
        "The method sets a specified value for a list of email messages in a particular column of the email cache, and notifies any listening objects of the change."
      ],
      [
        "getValueForThread(java.lang.Long,java.lang.String)",
        "This method retrieves a value for a specific thread and column name from an email provider cache."
      ],
      [
        "getValueForMessage(java.lang.Long,java.lang.String)",
        "The goal of this method is to retrieve a specific value for a given email message ID and column name from the email provider cache."
      ],
      [
        "unhideMessages(java.util.List)",
        "The goal of the `unhideMessages` method is to remove any messages from the cache of hidden messages that are no longer hidden."
      ],
      [
        "isMessageHidden(java.lang.Long,long)",
        "The method checks whether a given message is hidden in a certain folder or not."
      ]
    ]
  },
  "com.fsck.k9.controller": {
    "com.fsck.k9.controller.ProgressBodyFactory$ProgressListener": [
      [
        "updateProgress(int)",
        "The method updates the progress status of the ongoing body factory operation."
      ]
    ],
    "com.fsck.k9.controller.MessagingControllerPushReceiver": [
      [
        "pushError(java.lang.String,java.lang.Exception)",
        "The method logs and notifies the user of an error occurred during email message push."
      ],
      [
        "messagesArrived(com.fsck.k9.mail.Folder,java.util.List)",
        "The method notifies the messaging controller that new messages have arrived in a folder."
      ],
      [
        "messagesRemoved(com.fsck.k9.mail.Folder,java.util.List)",
        "The goal of this method is to notify the controller that a list of messages have been removed from a specific folder of an email account."
      ],
      [
        "sleep(com.fsck.k9.mail.power.TracingPowerManager.TracingWakeLock,long)",
        "The method sleeps for a specified amount of time while holding a wake lock to prevent the device from sleeping in order to receive push notifications."
      ],
      [
        "getPushState(java.lang.String)",
        "This method retrieves the push state of a particular folder from a LocalStore object."
      ],
      [
        "syncFolder(com.fsck.k9.mail.Folder)",
        "The goal of the `syncFolder` method is to synchronize the given email folder for a specific account and await the completion of the synchronization process before proceeding."
      ],
      [
        "authenticationFailed()",
        "The method handles authentication failure for a messaging push receiver by notifying the controller."
      ],
      [
        "getContext()",
        "The method returns the context of the calling object."
      ],
      [
        "messagesFlagsChanged(com.fsck.k9.mail.Folder,java.util.List)",
        "The goal of this method is to notify the messaging controller that the flags of certain messages in a folder have been updated or changed."
      ],
      [
        "setPushActive(java.lang.String,boolean)",
        "The method sets whether push notifications should be active for a specific folder in an email account."
      ]
    ],
    "com.fsck.k9.controller.MemorizingMessagingListener": [
      [
        "setPushActive(com.fsck.k9.Account,java.lang.String,boolean)",
        "The goal of this method is to set the pushing state (either started or finished) for a specified email account and folder."
      ],
      [
        "pendingCommandsFinished(com.fsck.k9.Account)",
        "The goal of the method is to update the processing state of a memorizing messaging listener's memory for a given account to \"FINISHED\" when all pending commands have finished execution."
      ],
      [
        "synchronizeMailboxFinished(com.fsck.k9.Account,java.lang.String,int,int)",
        "The goal of the method `synchronizeMailboxFinished` is to update the memory of the account and folder synchronization state with the total number of messages in the mailbox and the number of new messages."
      ],
      [
        "synchronizeMailboxStarted(com.fsck.k9.Account,java.lang.String)",
        "The goal of the method is to update the syncing state and memory of a mailbox when the synchronization process starts."
      ],
      [
        "pendingCommandStarted(com.fsck.k9.Account,java.lang.String)",
        "The method sets the commandTitle currently being processed by an account in the memory."
      ],
      [
        "synchronizeMailboxFailed(com.fsck.k9.Account,java.lang.String,java.lang.String)",
        "The goal of this method is to record and store the failure of mailbox synchronization for a specific account and folder."
      ],
      [
        "sendPendingMessagesStarted(com.fsck.k9.Account)",
        "The goal of this method is to set the sending state and reset the folder completion information of the account's memory."
      ],
      [
        "pendingCommandsProcessing(com.fsck.k9.Account)",
        "The goal of the method is to update the processing state and memory for a specific email account."
      ],
      [
        "synchronizeMailboxProgress(com.fsck.k9.Account,java.lang.String,int,int)",
        "The method updates the progress of mailbox synchronization."
      ],
      [
        "sendPendingMessagesCompleted(com.fsck.k9.Account)",
        "The goal of method `sendPendingMessagesCompleted` is to update the sending state of the account's memory to \"FINISHED\"."
      ],
      [
        "pendingCommandCompleted(com.fsck.k9.Account,java.lang.String)",
        "The goal of the method is to reset the processing command title in the memory for a given email account after a pending command has completed."
      ],
      [
        "sendPendingMessagesFailed(com.fsck.k9.Account)",
        "The goal of the method is to set the sending state of the specified account's pending messages to \"FAILED\" in the memory of the messaging listener."
      ]
    ],
    "com.fsck.k9.controller.SimpleMessagingListener": [
      [
        "setPushActive(com.fsck.k9.Account,java.lang.String,boolean)",
        "The `setPushActive` method sets whether push notifications should be enabled for a specified account folder in the K-9 mail client."
      ],
      [
        "messageUidChanged(com.fsck.k9.Account,java.lang.String,java.lang.String,java.lang.String)",
        "The method is called when the UID of a message in a folder is changed and its goal is not specified in the method body."
      ],
      [
        "sendPendingMessagesFailed(com.fsck.k9.Account)",
        "The goal of the method is to handle the failure to send pending messages of a given email account in the K9 email client."
      ],
      [
        "pendingCommandsProcessing(com.fsck.k9.Account)",
        "The method handles the processing of pending commands for a specific email account."
      ],
      [
        "sendPendingMessagesCompleted(com.fsck.k9.Account)",
        "To handle the completion of sending pending messages for the specified `com.fsck.k9.Account`."
      ],
      [
        "listFoldersFailed(com.fsck.k9.Account,java.lang.String)",
        "The goal of the method is to handle a failure in listing email folders for a specific account."
      ],
      [
        "remoteSearchServerQueryComplete(java.lang.String,int,int)",
        "The goal of the method is to handle the completion of a remote search server query and provide relevant information such as the folder name, the number of results, and the maximum number of results."
      ],
      [
        "checkMailStarted(android.content.Context,com.fsck.k9.Account)",
        "The method is called when mail checking has started for a specific email account in the K-9 Mail app."
      ],
      [
        "pendingCommandStarted(com.fsck.k9.Account,java.lang.String)",
        "The method is called when a messaging command is started but has not yet been processed by the application."
      ],
      [
        "loadAttachmentFailed(com.fsck.k9.Account,com.fsck.k9.mail.Message,com.fsck.k9.mail.Part,java.lang.String)",
        "The goal of the method is to handle an event where loading an email attachment has failed."
      ],
      [
        "checkMailFinished(android.content.Context,com.fsck.k9.Account)",
        "The method is triggered when checking for mail has finished and performs an action with the context and account object."
      ],
      [
        "remoteSearchFinished(java.lang.String,int,int,java.util.List)",
        "The goal of the method is to handle the completion of a remote search operation on a given email folder with the provided results and extra results."
      ],
      [
        "remoteSearchFailed(java.lang.String,java.lang.String)",
        "The method is called when a remote search fails in order to handle the error."
      ],
      [
        "synchronizeMailboxStarted(com.fsck.k9.Account,java.lang.String)",
        "The method `synchronizeMailboxStarted` is called when mailbox synchronization has started, with the account and folder as parameters."
      ],
      [
        "synchronizeMailboxNewMessage(com.fsck.k9.Account,java.lang.String,com.fsck.k9.mail.Message)",
        "The goal of the method is to handle the arrival of a new message in a mailbox and synchronize it with the corresponding account."
      ],
      [
        "accountSizeChanged(com.fsck.k9.Account,long,long)",
        "The goal of the method `accountSizeChanged()` is to notify listeners when the size of an email account changes."
      ],
      [
        "synchronizeMailboxHeadersFinished(com.fsck.k9.Account,java.lang.String,int,int)",
        "The method is called when mailbox header synchronization is finished and provides information about the total number of messages in the mailbox and the number of new messages."
      ],
      [
        "sendPendingMessagesStarted(com.fsck.k9.Account)",
        "The method is called when sending pending messages has started for a specific email account in the K-9 email client."
      ],
      [
        "synchronizeMailboxFailed(com.fsck.k9.Account,java.lang.String,java.lang.String)",
        "The method is called when synchronizing mailbox fails for a certain account and folder, and takes necessary actions."
      ],
      [
        "enableProgressIndicator(boolean)",
        "The method is used to enable or disable the display of a progress indicator."
      ],
      [
        "synchronizeMailboxProgress(com.fsck.k9.Account,java.lang.String,int,int)",
        "The goal of this method is to track the progress of synchronizing emails in a mailbox for a specific account."
      ],
      [
        "synchronizeMailboxFinished(com.fsck.k9.Account,java.lang.String,int,int)",
        "This method is called when the mailbox synchronization has finished."
      ],
      [
        "accountStatusChanged(com.fsck.k9.BaseAccount,com.fsck.k9.AccountStats)",
        "The method is called when there is a change in the status of an email account in K-9 Mail and it updates the account statistics accordingly."
      ],
      [
        "messageDeleted(com.fsck.k9.Account,java.lang.String,com.fsck.k9.mail.Message)",
        "The goal of the `messageDeleted` method is to receive a notification when a message is deleted from a folder."
      ],
      [
        "pendingCommandsFinished(com.fsck.k9.Account)",
        "The method is called when all pending commands for a specific email account have finished."
      ],
      [
        "listFoldersStarted(com.fsck.k9.Account)",
        "The method is called when the process of fetching the list of folders for a given email account has started."
      ],
      [
        "folderStatusChanged(com.fsck.k9.Account,java.lang.String,int)",
        "The method is called when the status of a folder (specified by name) belonging to a particular email account changes, and it provides the new unread message count."
      ],
      [
        "emptyTrashCompleted(com.fsck.k9.Account)",
        "The method is called when the trash folder of a given email account has been emptied."
      ],
      [
        "loadMessageRemoteFailed(com.fsck.k9.Account,java.lang.String,java.lang.String,java.lang.Throwable)",
        "This method is called when loading a message from a remote server fails, taking in the failed account, folder, UID, and exception as parameters."
      ],
      [
        "synchronizeMailboxHeadersProgress(com.fsck.k9.Account,java.lang.String,int,int)",
        "The method updates the progress of synchronizing mailbox headers for a specific folder of a given account in K-9 mail client."
      ],
      [
        "synchronizeMailboxHeadersStarted(com.fsck.k9.Account,java.lang.String)",
        "The method is called when synchronizing mailbox headers has started for a specific account and folder."
      ],
      [
        "listFolders(com.fsck.k9.Account,java.util.List)",
        "The goal of the method is to list all the folders in a given email account."
      ],
      [
        "listFoldersFinished(com.fsck.k9.Account)",
        "To handle the event when the IMAP server has finished listing all available email folders in the given `com.fsck.k9.Account`."
      ],
      [
        "loadAttachmentFinished(com.fsck.k9.Account,com.fsck.k9.mail.Message,com.fsck.k9.mail.Part)",
        "The method is called when loading an attachment for a message has finished, and it is used to handle any necessary actions or updates related to the attachment."
      ],
      [
        "systemStatusChanged()",
        "The goal of the method is to handle changes in the system status related to messaging."
      ],
      [
        "synchronizeMailboxRemovedMessage(com.fsck.k9.Account,java.lang.String,com.fsck.k9.mail.Message)",
        "The goal of the method is to handle the removal of a message from a mailbox during synchronization."
      ],
      [
        "loadMessageRemoteFinished(com.fsck.k9.Account,java.lang.String,java.lang.String)",
        "The goal of the method is to handle the completion of the process for loading a remote message for a given account, folder, and UID."
      ],
      [
        "remoteSearchStarted(java.lang.String)",
        "The goal of the method is to notify the listener that a remote search has started for the specified folder."
      ],
      [
        "updateProgress(int)",
        "The method is intended to update the progress of a task being performed by the messaging listener."
      ],
      [
        "pendingCommandCompleted(com.fsck.k9.Account,java.lang.String)",
        "The method is called when a pending command has been completed for a specific email account."
      ],
      [
        "listLocalMessagesAddMessages(com.fsck.k9.Account,java.lang.String,java.util.List)",
        "The method adds local messages to a list of messages for a given account and folder in an email client application."
      ],
      [
        "searchStats(com.fsck.k9.AccountStats)",
        "The goal of the method is to handle search statistics for a messaging account."
      ]
    ],
    "com.fsck.k9.controller.PendingCommandSerializer": [
      [
        "unserialize(long,java.lang.String,java.lang.String)",
        "The goal of this method is to deserialize data and return a `PendingCommand` object with a database ID."
      ],
      [
        "serialize(com.fsck.k9.controller.MessagingControllerCommands$PendingCommand)",
        "The `serialize` method serializes a `PendingCommand` object to JSON format using a corresponding `JsonAdapter`."
      ],
      [
        "getInstance()",
        "The method returns an instance of the `PendingCommandSerializer` class."
      ]
    ],
    "com.fsck.k9.controller.MessagingControllerCommands$PendingMoveOrCopy": [
      [
        "create(java.lang.String,java.lang.String,boolean,java.util.Map)",
        "The method creates a PendingMoveOrCopy object with specified source folder, destination folder, whether to copy or move, and UID map."
      ],
      [
        "create(java.lang.String,java.lang.String,boolean,java.util.List)",
        "The goal of this method is to create a new instance of `PendingMoveOrCopy` with the provided source folder, destination folder, boolean flag, and list of uids."
      ],
      [
        "getCommandName()",
        "The method returns the name of the command for move or copy in messaging controller."
      ],
      [
        "execute(com.fsck.k9.controller.MessagingController,com.fsck.k9.Account)",
        "The goal of this method is to execute a pending move or copy operation on messages using the given messaging controller and account."
      ]
    ],
    "com.fsck.k9.controller.MessagingControllerCommands$PendingEmptyTrash": [
      [
        "create()",
        "The goal of this method is to create and return a new instance of the `PendingEmptyTrash` class from the `MessagingControllerCommands` package."
      ],
      [
        "execute(com.fsck.k9.controller.MessagingController,com.fsck.k9.Account)",
        "The goal of the method is to execute the `processPendingEmptyTrash` method of the `MessagingController` instance passed as a parameter with the given `Account` instance, and handle any `MessagingException` that may occur."
      ],
      [
        "getCommandName()",
        "The method `getCommandName()` returns the name of the command to empty the trash folder in an email messaging application."
      ]
    ],
    "com.fsck.k9.controller.MessagingControllerCommands$PendingMarkAllAsRead": [
      [
        "create(java.lang.String)",
        "The method creates a new instance of PendingMarkAllAsRead with the given folder name."
      ],
      [
        "execute(com.fsck.k9.controller.MessagingController,com.fsck.k9.Account)",
        "The method executes a pending mark all as read command for a given MessagingController and Account."
      ],
      [
        "getCommandName()",
        "This method returns the command name for marking all messages as read in an email client."
      ]
    ],
    "com.fsck.k9.controller.MessagingControllerCommands$PendingCommand": [
      [
        "getCommandName()",
        "The method returns the name of the pending command."
      ],
      [
        "execute(com.fsck.k9.controller.MessagingController,com.fsck.k9.Account)",
        "The method is used to execute a messaging command with a specific messaging controller and account."
      ]
    ],
    "com.fsck.k9.controller.MessagingListener": [
      [
        "synchronizeMailboxNewMessage(com.fsck.k9.Account,java.lang.String,com.fsck.k9.mail.Message)",
        "The goal of this method is to synchronize a new message in a specific folder for a given email account."
      ],
      [
        "pendingCommandsProcessing(com.fsck.k9.Account)",
        "The goal of the method is to notify that pending account commands are being processed."
      ],
      [
        "setPushActive(com.fsck.k9.Account,java.lang.String,boolean)",
        "The goal of this method is to enable or disable push notifications for a specific folder of a given email account."
      ],
      [
        "pendingCommandsFinished(com.fsck.k9.Account)",
        "The method notifies the listener when all pending commands for a specific account have been completed."
      ],
      [
        "listFoldersFailed(com.fsck.k9.Account,java.lang.String)",
        "The goal of this method is to notify the listener that the attempt to list folders for the specified account has failed, along with an error message."
      ],
      [
        "loadMessageRemoteFinished(com.fsck.k9.Account,java.lang.String,java.lang.String)",
        "The method is called when a remote message in a specific folder has finished loading for a particular account."
      ],
      [
        "loadAttachmentFailed(com.fsck.k9.Account,com.fsck.k9.mail.Message,com.fsck.k9.mail.Part,java.lang.String)",
        "The goal of this method is to notify the listener that loading of an attachment has failed."
      ],
      [
        "synchronizeMailboxHeadersFinished(com.fsck.k9.Account,java.lang.String,int,int)",
        "The method is called when the mailbox header synchronization is completed and returns the total number of messages in the mailbox and the number of new messages."
      ],
      [
        "checkMailStarted(android.content.Context,com.fsck.k9.Account)",
        "The method notifies that the process of checking mail has started for a given account."
      ],
      [
        "loadMessageRemoteFailed(com.fsck.k9.Account,java.lang.String,java.lang.String,java.lang.Throwable)",
        "The goal of this method is to notify the listener that loading a message from a remote source has failed."
      ],
      [
        "messageUidChanged(com.fsck.k9.Account,java.lang.String,java.lang.String,java.lang.String)",
        "The method aims to notify the messaging listener that the UID of a message in a given folder of a specified account has been changed."
      ],
      [
        "remoteSearchServerQueryComplete(java.lang.String,int,int)",
        "The method is called when a remote search server query has completed, providing the number of results and the maximum number of results."
      ],
      [
        "folderStatusChanged(com.fsck.k9.Account,java.lang.String,int)",
        "The method notifies the listener when the status of a folder (unread message count) has changed for a given account."
      ],
      [
        "listFoldersStarted(com.fsck.k9.Account)",
        "This method is called when listing folders for an email account has started."
      ],
      [
        "enableProgressIndicator(boolean)",
        "The goal of this method is to enable or disable the progress indicator for the messaging listener."
      ],
      [
        "synchronizeMailboxRemovedMessage(com.fsck.k9.Account,java.lang.String,com.fsck.k9.mail.Message)",
        "The goal of this method is to synchronize the removal of a message from a mailbox."
      ],
      [
        "synchronizeMailboxHeadersProgress(com.fsck.k9.Account,java.lang.String,int,int)",
        "The method reports the progress of synchronizing mailbox headers for a given account and folder."
      ],
      [
        "emptyTrashCompleted(com.fsck.k9.Account)",
        "The method is called when the operation of emptying the trash folder of an email account has been completed."
      ],
      [
        "systemStatusChanged()",
        "The goal of the method `systemStatusChanged()` is to notify the implementation that the system status has changed."
      ],
      [
        "loadAttachmentFinished(com.fsck.k9.Account,com.fsck.k9.mail.Message,com.fsck.k9.mail.Part)",
        "The goal of the method is to inform the listener that an attachment has finished loading for a specific message."
      ],
      [
        "synchronizeMailboxProgress(com.fsck.k9.Account,java.lang.String,int,int)",
        "The method reports the progress of synchronizing a mailbox for a specific account and folder."
      ],
      [
        "sendPendingMessagesCompleted(com.fsck.k9.Account)",
        "The method signals the completion of sending pending messages for a given account."
      ],
      [
        "synchronizeMailboxHeadersStarted(com.fsck.k9.Account,java.lang.String)",
        "The goal of the method is to indicate that the process of synchronizing mailbox headers for a specific folder has started."
      ],
      [
        "remoteSearchFinished(java.lang.String,int,int,java.util.List)",
        "The method is called when a remote search has finished, and it returns the number of results found along with a list of extra results."
      ],
      [
        "synchronizeMailboxStarted(com.fsck.k9.Account,java.lang.String)",
        "The method notifies that synchronization for a specific mailbox folder has started."
      ],
      [
        "searchStats(com.fsck.k9.AccountStats)",
        "The goal of the `searchStats` method is to retrieve and process statistics related to the search functionality of a specific email account."
      ],
      [
        "pendingCommandCompleted(com.fsck.k9.Account,java.lang.String)",
        "The method is called when a pending email message command is completed for a specific account."
      ],
      [
        "messageDeleted(com.fsck.k9.Account,java.lang.String,com.fsck.k9.mail.Message)",
        "To notify when a message has been deleted from a specific account and folder."
      ],
      [
        "checkMailFinished(android.content.Context,com.fsck.k9.Account)",
        "The method is called when checking for new email messages on an account has finished."
      ],
      [
        "remoteSearchStarted(java.lang.String)",
        "The method is called when a remote search for messages in a specific folder has started."
      ],
      [
        "updateProgress(int)",
        "The method updates the progress of a message being sent or downloaded."
      ],
      [
        "listFolders(com.fsck.k9.Account,java.util.List)",
        "The goal of this method is to list all the local folders for a given email account."
      ],
      [
        "remoteSearchFailed(java.lang.String,java.lang.String)",
        "The method is called when a remote search failed for a given folder with a specified error message."
      ],
      [
        "listFoldersFinished(com.fsck.k9.Account)",
        "The method is called when the listing of all available folders for a given email account is completed."
      ],
      [
        "sendPendingMessagesStarted(com.fsck.k9.Account)",
        "The method is called when sending pending messages for an account is started."
      ],
      [
        "accountSizeChanged(com.fsck.k9.Account,long,long)",
        "The goal of the method is to notify the listener that the size of an email account has changed."
      ],
      [
        "synchronizeMailboxFailed(com.fsck.k9.Account,java.lang.String,java.lang.String)",
        "The method is called when mailbox synchronization fails for a specific folder of an email account, with a specified error message."
      ],
      [
        "sendPendingMessagesFailed(com.fsck.k9.Account)",
        "The goal of the method is to notify that sending pending messages for the given account has failed."
      ],
      [
        "synchronizeMailboxFinished(com.fsck.k9.Account,java.lang.String,int,int)",
        "The method notifies when the synchronization of a mailbox for an account is finished and provides information about the number of messages in the mailbox and the number of new messages that were downloaded."
      ],
      [
        "accountStatusChanged(com.fsck.k9.BaseAccount,com.fsck.k9.AccountStats)",
        "The goal of this method is to notify listeners when the status of a messaging account has changed."
      ],
      [
        "listLocalMessagesAddMessages(com.fsck.k9.Account,java.lang.String,java.util.List)",
        "The goal of this method is to add a list of locally stored messages to the given email account and folder."
      ],
      [
        "pendingCommandStarted(com.fsck.k9.Account,java.lang.String)",
        "The method is called when a pending command has started for a given email account and with a given title."
      ]
    ],
    "com.fsck.k9.controller.MessagingController$MessageActor": [
      [
        "act(com.fsck.k9.Account,com.fsck.k9.mailstore.LocalFolder,java.util.List)",
        "The method performs an action on a list of email messages in a specific folder of a given email account."
      ]
    ],
    "com.fsck.k9.controller.MessagingControllerCommands$PendingAppend": [
      [
        "getCommandName()",
        "The method returns the name of the \"Append\" command for messaging."
      ],
      [
        "create(java.lang.String,java.lang.String)",
        "The goal of this method is to create a new `PendingAppend` object with the specified `folderName` and `uid` parameters."
      ],
      [
        "execute(com.fsck.k9.controller.MessagingController,com.fsck.k9.Account)",
        "The goal of this method is to execute the pending append of a message in an email account using the MessagingController of the K-9 mail client."
      ]
    ],
    "com.fsck.k9.controller.MessagingController$Command": [
      [
        "compareTo(com.fsck.k9.controller.MessagingController$Command)",
        "The method compares the priority of two `MessagingController.Command` objects based on whether they are foreground or background commands, and if neither is foreground then it compares their sequence number."
      ]
    ],
    "com.fsck.k9.controller.UidReverseComparator": [
      [
        "compare(com.fsck.k9.mail.Message,com.fsck.k9.mail.Message)",
        "The method compares two email messages based on their UIDs, in reverse order."
      ]
    ],
    "com.fsck.k9.controller.MessagingController": [
      [
        "getAccountStats(android.content.Context,com.fsck.k9.Account,com.fsck.k9.controller.MessagingListener)",
        "The goal of this method is to asynchronously retrieve account statistics (such as the number of unread emails) and notify the provided listener of the updated account status."
      ],
      [
        "copyMessage(com.fsck.k9.Account,java.lang.String,com.fsck.k9.activity.MessageReference,java.lang.String)",
        "The `copyMessage` method copies a single message from a specified source folder to a specified destination folder for a given email account."
      ],
      [
        "listFoldersSynchronous(com.fsck.k9.Account,boolean,com.fsck.k9.controller.MessagingListener)",
        "The method lists local and remote folders for a given email account and notifies the listener of the results."
      ],
      [
        "getPushers()",
        "The goal of the method is to return a collection of all the pushers associated with the messaging controller."
      ],
      [
        "getId(com.fsck.k9.mail.Message)",
        "This method returns the ID of a given message, or an invalid ID if the message is not a LocalMessage."
      ],
      [
        "isCopyCapable(com.fsck.k9.activity.MessageReference)",
        "The method checks whether the given email message can be copied."
      ],
      [
        "moveMessage(com.fsck.k9.Account,java.lang.String,com.fsck.k9.activity.MessageReference,java.lang.String)",
        "The method moves a single message from one folder to another in a given email account."
      ],
      [
        "copyMessagesInThread(com.fsck.k9.Account,java.lang.String,java.util.List,java.lang.String)",
        "The `copyMessagesInThread` method copies a group of messages within a thread from a source folder to a destination folder for a given email account."
      ],
      [
        "isCopyCapable(com.fsck.k9.Account)",
        "The goal of this method is to determine whether both the local and remote mail stores for a given account are capable of message copying."
      ],
      [
        "recreate(com.fsck.k9.Account,com.fsck.k9.controller.MessagingListener)",
        "The goal of this method is to recreate a mail account's local store and update the account's statistics and status."
      ],
      [
        "checkMail(android.content.Context,com.fsck.k9.Account,boolean,boolean,com.fsck.k9.controller.MessagingListener)",
        "The method checks emails for one or multiple accounts and notifies the specified listener(s) when the operation begins and ends."
      ],
      [
        "debugClearMessagesLocally(java.util.List)",
        "This method clears local message data for a list of messages for debugging purposes only."
      ],
      [
        "expunge(com.fsck.k9.Account,java.lang.String)",
        "The method schedules an expunge operation on a specified folder of a given email account in the background."
      ],
      [
        "markAllMessagesRead(com.fsck.k9.Account,java.lang.String)",
        "The method marks all messages in the specified folder of the given account as read."
      ],
      [
        "setupPushing(com.fsck.k9.Account)",
        "The goal of the method `setupPushing` is to set up and start a pusher for the given account if there are any folders configured for pushing."
      ],
      [
        "getSearchAccountStatsSynchronous(com.fsck.k9.search.SearchAccount,com.fsck.k9.controller.MessagingListener)",
        "The method collects the unread and flagged message count for each account related to a specified search and returns an `AccountStats` instance."
      ],
      [
        "deleteMessage(com.fsck.k9.activity.MessageReference,com.fsck.k9.controller.MessagingListener)",
        "The goal of this method is to delete a single message referenced by `MessageReference` and notify the `MessagingListener` about the deletion."
      ],
      [
        "getCheckMailListener()",
        "The goal of the method is to return an instance of the `MessagingListener` interface (`checkMailListener`) to be used for checking email."
      ],
      [
        "setFlagForThreads(com.fsck.k9.Account,java.util.List,com.fsck.k9.mail.Flag,boolean)",
        "The method sets a flag for a list of email threads in the local cache and asynchronously updates the flag for these threads on the server."
      ],
      [
        "loadSearchResults(com.fsck.k9.Account,java.lang.String,java.util.List,com.fsck.k9.controller.MessagingListener)",
        "The method loads search results for a specific folder in an email account, and notifies a listener of the progress."
      ],
      [
        "saveDraft(com.fsck.k9.Account,com.fsck.k9.mail.Message,long,boolean)",
        "The goal of the `saveDraft` method is to save a draft message to the local store and optionally to a remote server."
      ],
      [
        "isMoveCapable(com.fsck.k9.activity.MessageReference)",
        "The goal of the method is to determine if the given message reference is capable of being moved by checking if it has a UID that does not start with the `K9.LOCAL_UID_PREFIX`."
      ],
      [
        "sendAlternate(android.content.Context,com.fsck.k9.Account,com.fsck.k9.mailstore.LocalMessage)",
        "The goal of this method is to create an Android intent for sharing the contents of a given email message using alternate means, such as email or messaging apps."
      ],
      [
        "getListeners(com.fsck.k9.controller.MessagingListener)",
        "This method returns a set of messaging listeners, including the provided listener if not null."
      ],
      [
        "deleteMessages(java.util.List,com.fsck.k9.controller.MessagingListener)",
        "The goal of the `deleteMessages` method is to delete a list of specified messages from the user's email account in a background thread while suppressing the message indication and notifying the provided `MessagingListener`."
      ],
      [
        "isMoveCapable(com.fsck.k9.Account)",
        "The goal of this method is to determine whether the given `Account` is capable of moving messages between its local and remote stores."
      ],
      [
        "systemStatusChanged()",
        "The method notifies all registered `MessagingListener` objects of a change in system status."
      ],
      [
        "searchLocalMessages(com.fsck.k9.search.LocalSearch,com.fsck.k9.controller.MessagingListener)",
        "The goal of the method is to search all messages in any local account that match a given query and notify the provided listener of the results."
      ],
      [
        "cancelNotificationForMessage(com.fsck.k9.Account,com.fsck.k9.activity.MessageReference)",
        "The goal of this method is to cancel the notification for a specific message in a specific account."
      ],
      [
        "setCheckMailListener(com.fsck.k9.controller.MessagingListener)",
        "The goal of the `setCheckMailListener` method is to set a listener to be notified when new mail messages need to be checked."
      ],
      [
        "listFolders(com.fsck.k9.Account,boolean,com.fsck.k9.controller.MessagingListener)",
        "The method lists folders that are available locally and remotely for a specified email account, and informs a listener asynchronously when the folders have been listed."
      ],
      [
        "removeListener(com.fsck.k9.controller.MessagingListener)",
        "The method removes a messaging listener from the list of listeners."
      ],
      [
        "sendPendingMessages(com.fsck.k9.Account,com.fsck.k9.controller.MessagingListener)",
        "The goal of `sendPendingMessages` method is to attempt to send any unsent messages in the outbox of a given email account."
      ],
      [
        "compact(com.fsck.k9.Account,com.fsck.k9.controller.MessagingListener)",
        "The goal of the `compact` method is to reduce the size of the email account's local store by removing any unused space."
      ],
      [
        "messagesArrived(com.fsck.k9.Account,com.fsck.k9.mail.Folder,java.util.List,boolean)",
        "The `messagesArrived` method handles new email messages that have arrived in a remote folder and downloads them to a local folder for a specific account."
      ],
      [
        "deleteAccount(com.fsck.k9.Account)",
        "The `deleteAccount` method removes an email account from the app, and clears any associated new mail notifications and removes the account from the memorizing messaging listener."
      ],
      [
        "loadMessageRemote(com.fsck.k9.Account,java.lang.String,java.lang.String,com.fsck.k9.controller.MessagingListener)",
        "The goal of this method is to load a message from a remote email server for a specified account and folder, identified by a UID, and notify a listener when the loading is complete."
      ],
      [
        "clearFolder(com.fsck.k9.Account,java.lang.String,com.fsck.k9.activity.ActivityListener)",
        "The method clears the contents of a specified folder for a given email account in a background thread."
      ],
      [
        "getFolderUnreadMessageCount(com.fsck.k9.Account,java.lang.String,com.fsck.k9.controller.MessagingListener)",
        "The goal of this method is to retrieve the number of unread messages in a given folder for a specific email account and notify the provided listener with the updated folder status."
      ],
      [
        "addListener(com.fsck.k9.controller.MessagingListener)",
        "The method adds a new messaging listener to the list of existing listeners and updates it to the current state of messaging controller."
      ],
      [
        "loadMessage(com.fsck.k9.Account,java.lang.String,java.lang.String)",
        "The `loadMessage` method loads a specific email message from the local storage and marks it as read while also removing a new mail notification for the account."
      ],
      [
        "setFlag(com.fsck.k9.Account,java.util.List,com.fsck.k9.mail.Flag,boolean)",
        "The goal of the `setFlag` method is to set a flag (such as read/unread or starred/unstarred) for a list of messages in an email account."
      ],
      [
        "refreshListener(com.fsck.k9.controller.MessagingListener)",
        "The method refreshes the given messaging listener by invoking the `refreshOther` method of `memorizingMessagingListener`."
      ],
      [
        "deleteDraft(com.fsck.k9.Account,long)",
        "The `deleteDraft` method aims to delete a draft message from the local folder of a given account."
      ],
      [
        "loadMoreMessages(com.fsck.k9.Account,java.lang.String,com.fsck.k9.controller.MessagingListener)",
        "The goal of the `loadMoreMessages` method is to load more messages from the given folder of the given account and synchronize them with the provided listener."
      ],
      [
        "moveMessagesInThread(com.fsck.k9.Account,java.lang.String,java.util.List,java.lang.String)",
        "The goal of this method is to move a list of messages in the same conversation/thread to a different folder."
      ],
      [
        "searchRemoteMessages(java.lang.String,java.lang.String,java.lang.String,java.util.Set,java.util.Set,com.fsck.k9.controller.MessagingListener)",
        "The goal of the `searchRemoteMessages` method is to search for remote messages matching certain criteria in the specified account and folder, and notify the specified listener asynchronously."
      ],
      [
        "emptyTrash(com.fsck.k9.Account,com.fsck.k9.controller.MessagingListener)",
        "The `emptyTrash` method deletes all messages in the trash folder of a specified email account, either locally or on the server."
      ],
      [
        "sendMessage(com.fsck.k9.Account,com.fsck.k9.mail.Message,com.fsck.k9.controller.MessagingListener)",
        "The goal of this method is to store a given message in the Outbox and start a command to attempt to send the message."
      ],
      [
        "notifyUserIfCertificateProblem(com.fsck.k9.Account,java.lang.Exception,boolean)",
        "The goal of this method is to notify the user if there is a certificate problem with a mail account, only if the exception requires the attention of the user."
      ],
      [
        "loadMessageRemotePartial(com.fsck.k9.Account,java.lang.String,java.lang.String,com.fsck.k9.controller.MessagingListener)",
        "The `loadMessageRemotePartial()` method is used to load a message partially from a remote server for a specified `Account`, `folder` and `uid` using a `MessagingListener`."
      ],
      [
        "loadAttachment(com.fsck.k9.Account,com.fsck.k9.mailstore.LocalMessage,com.fsck.k9.mail.Part,com.fsck.k9.controller.MessagingListener)",
        "The method's goal is to load an email attachment for a given account and message, and notify the user and listener(s) when finished or if there is an error."
      ],
      [
        "clearAllPending(com.fsck.k9.Account)",
        "The goal of the method is to clear all pending commands for a given email account."
      ],
      [
        "synchronizeMailbox(com.fsck.k9.Account,java.lang.String,com.fsck.k9.controller.MessagingListener,com.fsck.k9.mail.Folder)",
        "The goal of this method is to start synchronizing the specified folder in the background for a given email account using a provided messaging listener and remote folder."
      ],
      [
        "moveMessages(com.fsck.k9.Account,java.lang.String,java.util.List,java.lang.String)",
        "The `moveMessages` method moves a list of messages from a source folder to a destination folder for a given email account."
      ],
      [
        "stopAllPushing()",
        "The goal of the method is to stop all configured mail pushers and remove them from the pushers map."
      ],
      [
        "copyMessages(com.fsck.k9.Account,java.lang.String,java.util.List,java.lang.String)",
        "The goal of the `copyMessages` method is to copy a list of messages from a source folder to a destination folder for a specified email account."
      ],
      [
        "getInstance(android.content.Context)",
        "This method returns an instance of the `MessagingController` class and ensures that only one instance is created."
      ],
      [
        "setFlag(com.fsck.k9.Account,java.lang.String,java.lang.String,com.fsck.k9.mail.Flag,boolean)",
        "The goal of the method is to set or remove a flag for a message in a given folder and account."
      ],
      [
        "setFlag(com.fsck.k9.Account,java.lang.String,java.util.List,com.fsck.k9.mail.Flag,boolean)",
        "The `setFlag` method sets or removes a flag for a set of messages in a specific folder and updates the message objects to reflect the new flag state."
      ],
      [
        "cancelNotificationsForAccount(com.fsck.k9.Account)",
        "The method cancels any new mail notifications for a specific email account."
      ],
      [
        "deleteThreads(java.util.List)",
        "Deletes threads (groups of related email messages) passed in a list by marking them as suppressed and then deleting them asynchronously."
      ],
      [
        "sendPendingMessages(com.fsck.k9.controller.MessagingListener)",
        "The `sendPendingMessages` method sends all pending messages of all available accounts and notifies the provided `MessagingListener` of the progress."
      ],
      [
        "clear(com.fsck.k9.Account,com.fsck.k9.controller.MessagingListener)",
        "The `clear` method deletes all messages and resets message limits for a specified email account."
      ],
      [
        "getListeners()",
        "The method returns a set of listeners registered to listen for messaging events."
      ],
      [
        "clearCertificateErrorNotifications(com.fsck.k9.Account,com.fsck.k9.activity.setup.AccountSetupCheckSettings$CheckDirection)",
        "The method clears certificate error notifications for a given email account and direction (incoming or outgoing)."
      ],
      [
        "getSearchAccountStats(com.fsck.k9.search.SearchAccount,com.fsck.k9.controller.MessagingListener)",
        "The goal of the method is to asynchronously retrieve the search statistics for a given search account and notify a listener when the data is ready."
      ]
    ],
    "com.fsck.k9.controller.MessagingControllerCommands$PendingExpunge": [
      [
        "getCommandName()",
        "The goal of this method is to return the name of the expunge command as a string."
      ],
      [
        "create(java.lang.String)",
        "The method creates a new instance of the `PendingExpunge` class with the specified folder name."
      ],
      [
        "execute(com.fsck.k9.controller.MessagingController,com.fsck.k9.Account)",
        "This method executes a pending mailbox expunge operation through the MessagingController."
      ]
    ],
    "com.fsck.k9.controller.MessagingControllerCommands$PendingSetFlag": [
      [
        "create(java.lang.String,boolean,com.fsck.k9.mail.Flag,java.util.List)",
        "The goal of this method is to create a new instance of `PendingSetFlag` with the given parameters."
      ],
      [
        "getCommandName()",
        "The method returns the command name for the PendingSetFlag object."
      ],
      [
        "execute(com.fsck.k9.controller.MessagingController,com.fsck.k9.Account)",
        "This method executes a pending message flag change on a messaging controller."
      ]
    ]
  },
  "com.fsck.k9.crypto": {
    "com.fsck.k9.crypto.MessageCryptoStructureDetector": [
      [
        "findPrimaryEncryptedOrSignedPart(com.fsck.k9.mail.Part,java.util.List)",
        "The goal of the `findPrimaryEncryptedOrSignedPart()` method is to identify the primary encrypted or signed part of an email message given a starting email part, and to return it along with any extra parts that were identified during the search process."
      ],
      [
        "getSignatureData(com.fsck.k9.mail.Part)",
        "The goal of the `getSignatureData` method is to extract the signature data from a multipart signed email message."
      ],
      [
        "isMultipartSignedOpenPgpProtocol(com.fsck.k9.mail.Part)",
        "The goal of the method `isMultipartSignedOpenPgpProtocol` is to determine if a given email part is a PGP-signed email using multipart/signed protocol."
      ],
      [
        "isPartPgpInlineEncrypted(com.fsck.k9.mail.Part)",
        "The `isPartPgpInlineEncrypted` method determines whether a given email `Part` contains PGP inline encrypted text."
      ],
      [
        "findMultipartEncryptedParts(com.fsck.k9.mail.Part)",
        "This method finds all parts of a multipart message that are encrypted."
      ],
      [
        "isMultipartEncryptedOpenPgpProtocol(com.fsck.k9.mail.Part)",
        "The method checks if a given email message part is multipart-encrypted using the OpenPGP protocol."
      ],
      [
        "isPartMultipartEncrypted(com.fsck.k9.mail.Part)",
        "The method checks whether a given email message part is a multipart encrypted email or not."
      ],
      [
        "findMultipartSignedParts(com.fsck.k9.mail.Part,com.fsck.k9.ui.crypto.MessageCryptoAnnotations)",
        "The goal of the `findMultipartSignedParts` method is to locate all multipart signed parts within a given email message."
      ],
      [
        "findPgpInlineParts(com.fsck.k9.mail.Part)",
        "The goal of the method is to find all parts of an email message that contain PGP inline encryption or signature."
      ]
    ],
    "com.fsck.k9.crypto.OpenPgpApiHelper": [
      [
        "buildUserId(com.fsck.k9.Identity)",
        "This method constructs a string in the format required by the OpenPgp API's EXTRA_ACCOUNT_NAME from an Identity object."
      ]
    ]
  },
  "com.fsck.k9.fragment": {
    "com.fsck.k9.fragment.MessageListFragment": [
      [
        "dialogCancelled(int)",
        "The method handles the cancellation of a dialog by calling a method to process the negative action."
      ],
      [
        "onCreateView(android.view.LayoutInflater,android.view.ViewGroup,android.os.Bundle)",
        "The `onCreateView` method initializes the layout, initializes the pull-to-refresh functionality, disables the vertical fading edge of the list view, and returns the inflated view for display."
      ],
      [
        "onSwipeRightToLeft(android.view.MotionEvent,android.view.MotionEvent)",
        "The goal of the method is to handle a right-to-left swipe gesture by un-selecting a message in the message list."
      ],
      [
        "onContextItemSelected(android.view.MenuItem)",
        "This method handles context menu item selections in the message list fragment."
      ],
      [
        "isFirst(com.fsck.k9.activity.MessageReference)",
        "The method checks if the given message reference is the first item in the list or if the list is empty."
      ],
      [
        "isOutbox()",
        "The method determines if the current message list belongs to the outbox folder of the associated email account."
      ],
      [
        "onMoveUp()",
        "The goal of the method is to move the selection of the list view up by one position."
      ],
      [
        "onCreate(android.os.Bundle)",
        "The `onCreate` method initializes various variables and settings for the `MessageListFragment` class."
      ],
      [
        "onAttach(android.app.Activity)",
        "To set up the context and listener for the MessageListFragment to communicate with the activity it is attached to."
      ],
      [
        "onCycleSort()",
        "The goal of this method is to cycle through different sorting methods for messages in the message list."
      ],
      [
        "isLoadFinished()",
        "The method checks if all cursors for messages in the message list have finished loading."
      ],
      [
        "isCheckMailSupported()",
        "This method returns a boolean value indicating whether checking mail is supported in the current context."
      ],
      [
        "isMarkAllAsReadSupported()",
        "The goal of the method is to check if marking all messages as read is supported for the current single account and single folder mode."
      ],
      [
        "openPrevious(com.fsck.k9.activity.MessageReference)",
        "The method is used to open the previous message in the message list."
      ],
      [
        "selectAll()",
        "The goal of the method is to select all messages in the message list."
      ],
      [
        "onActivityCreated(android.os.Bundle)",
        "The method initializes various components of `MessageListFragment` including cursor loaders and message sorting settings."
      ],
      [
        "confirmMarkAllAsRead()",
        "The goal of this method is to either show a confirmation dialog or directly mark all messages in the list as read based on user preference."
      ],
      [
        "onItemClick(android.widget.AdapterView,android.view.View,int,long)",
        "The goal of this method is to handle item clicks within the message list, including loading more messages, selecting or opening messages, and displaying thread contents."
      ],
      [
        "onActivityResult(int,int,android.content.Intent)",
        "The method handles the result of choosing a folder to move or copy messages to in the MessageListFragment."
      ],
      [
        "isManualSearch()",
        "The method `isManualSearch()` returns a boolean indicating whether the current search in `MessageListFragment` is a manual search or not."
      ],
      [
        "onDestroyView()",
        "The goal of this method is to save the state of the `listView` before the fragment view is destroyed."
      ],
      [
        "onSearchRequested()",
        "The goal of the method is to start a search for messages in the current folder of the account specified by the fragment listener."
      ],
      [
        "newInstance(com.fsck.k9.search.LocalSearch,boolean,boolean)",
        "The method creates a new instance of `MessageListFragment` and sets arguments for search, displaying threads, and using a threaded list."
      ],
      [
        "onLoaderReset(android.content.Loader)",
        "The method clears the selected items list and sets the adapter cursor to null when the loader is reset."
      ],
      [
        "isSingleAccountMode()",
        "The goal of the method is to return a boolean value indicating whether the message list is in single-account mode or not."
      ],
      [
        "onLoadFinished(android.content.Loader,android.database.Cursor)",
        "The goal of this method is to handle the loading of a cursor of messages for display in a message list."
      ],
      [
        "onCompose()",
        "The goal of the `onCompose()` method is to initiate the composition of a new message either for a specific account or with a default action if no account is selected."
      ],
      [
        "openNext(com.fsck.k9.activity.MessageReference)",
        "The method opens the next message in the message list relative to the given message reference."
      ],
      [
        "checkMail()",
        "The goal of the `checkMail()` method is to synchronize and check the mailboxes of selected accounts and folders, and send any pending messages."
      ],
      [
        "doPositiveClick(int)",
        "This method performs an action based on the user's positive click on a specific dialog box."
      ],
      [
        "onOptionsItemSelected(android.view.MenuItem)",
        "This method handles the user selection of various options in the message list fragment, such as changing the sorting order, selecting all messages, and performing actions like sending pending messages or expunging messages."
      ],
      [
        "onRemoteSearch()",
        "The goal of the method is to check for network connectivity and initiate a remote search if available, or display a message indicating that remote search is unavailable without network connectivity."
      ],
      [
        "isLast(com.fsck.k9.activity.MessageReference)",
        "The goal of the method is to determine if a given message is the last one in the list."
      ],
      [
        "onCreateLoader(int,android.os.Bundle)",
        "The goal of the `onCreateLoader(int,android.os.Bundle)` method in the `com.fsck.k9.fragment.MessageListFragment` class is to create a cursor loader that loads email messages based on the specified search conditions and sort order."
      ],
      [
        "onPause()",
        "The method unregisters a broadcast receiver, pauses the activity listener, and removes the messaging controller listener when the fragment is paused."
      ],
      [
        "isRemoteSearch()",
        "The method returns a boolean value indicating whether a remote search has been performed in the fragment."
      ],
      [
        "onSwipeLeftToRight(android.view.MotionEvent,android.view.MotionEvent)",
        "The goal of the method is to handle a left-to-right swipe gesture and select an item in the message list."
      ],
      [
        "setActiveMessage(com.fsck.k9.activity.MessageReference)",
        "The goal of this method is to mark a message as 'active' and reload the message list to always include the active message."
      ],
      [
        "onReverseSort()",
        "The goal of the method `onReverseSort()` is to change the sort order of the messages list."
      ],
      [
        "onResume()",
        "The goal of `onResume()` in `MessageListFragment` is to refresh messages for the open folder and update unread message count and read status."
      ],
      [
        "isAccountExpungeCapable()",
        "The method determines if the email account associated with the fragment is capable of expunging messages."
      ],
      [
        "isRemoteSearchAllowed()",
        "The method checks if remote search is allowed for the current search configuration and account settings."
      ],
      [
        "onToggleFlagged()",
        "The goal of the method `onToggleFlagged()` is to toggle the flagged status of a selected message in the message list."
      ],
      [
        "toggleMessageSelect()",
        "The method selects or deselects the currently selected message in the list view."
      ],
      [
        "isSingleFolderMode()",
        "The method returns a boolean indicating whether the fragment is in single folder mode or not."
      ],
      [
        "onSendPendingMessages()",
        "The goal of the method `onSendPendingMessages()` is to send any pending messages in the messaging controller for the specified account."
      ],
      [
        "onCopy()",
        "The goal of the `onCopy()` method is to copy the selected message to the clipboard."
      ],
      [
        "doNegativeClick(int)",
        "The method removes the reference to activeMessages when the user clicks \"cancel\" on a confirmation dialog for deleting or marking a message as spam."
      ],
      [
        "isRemoteFolder()",
        "The method determines whether the current folder is a remote folder or not, taking into account account type and user preferences."
      ],
      [
        "onCreateContextMenu(android.view.ContextMenu,android.view.View,android.view.ContextMenu.ContextMenuInfo)",
        "This method creates a context menu with various options based on the parameters passed."
      ],
      [
        "changeSort(com.fsck.k9.Account$SortType)",
        "The goal of this method is to change the sorting method and order of messages displayed in the Message List Fragment based on the user's selection."
      ],
      [
        "onMoveDown()",
        "The goal of this method is to move the selected item in the message list down by one position."
      ],
      [
        "updateTitle()",
        "The `updateTitle()` method sets the window title and progress based on whether a manual search is being performed or not."
      ],
      [
        "updateFooter(java.lang.String)",
        "The method updates the text displayed in the footer view of the message list fragment."
      ],
      [
        "onMove()",
        "The goal of this method is to move the selected message to another folder."
      ],
      [
        "onStop()",
        "The goal of `onStop()` in class `com.fsck.k9.fragment.MessageListFragment` is to perform special clean up for a remote search result screen and cancel any message fetches in progress before exiting."
      ],
      [
        "onToggleRead()",
        "The goal of the `onToggleRead()` method is to toggle the \"read\" flag of a message in the message list."
      ],
      [
        "onSaveInstanceState(android.os.Bundle)",
        "The `onSaveInstanceState` method saves the state of the `MessageListFragment` including selected messages, list state, and information about any remote searches performed."
      ],
      [
        "isInitialized()",
        "The method `isInitialized()` returns a boolean indicating whether the MessageListFragment instance has been initialized or not."
      ],
      [
        "onArchive()",
        "The `onArchive()` method archives the selected message in the message list."
      ],
      [
        "onExpunge()",
        "The goal of the `onExpunge()` method is to call `onExpunge()` with the current `account` and `currentFolder.name` if `currentFolder` is not null."
      ],
      [
        "onDelete()",
        "The goal of the `onDelete()` method is to delete the selected message in the message list fragment."
      ]
    ],
    "com.fsck.k9.fragment.MessageListFragmentComparators$SenderComparator": [
      [
        "compare(android.database.Cursor,android.database.Cursor)",
        "The goal of this method is to compare the sender address of two email messages, returning an integer indicating their order for sorting purposes."
      ]
    ],
    "com.fsck.k9.fragment.ProgressDialogFragment": [
      [
        "onCancel(android.content.DialogInterface)",
        "The method cancels the progress dialog and notifies the listener, if any, that the progress has been canceled."
      ],
      [
        "onCreateDialog(android.os.Bundle)",
        "The goal of this method is to create and return a new `ProgressDialog` instance with the specified title and message."
      ],
      [
        "newInstance(java.lang.String,java.lang.String)",
        "The `newInstance` method creates a new instance of `ProgressDialogFragment` with a specified title and message and returns it."
      ]
    ],
    "com.fsck.k9.fragment.AttachmentDownloadDialogFragment": [
      [
        "onDestroyView()",
        "The goal of this method is to remove the messaging listener and call the superclass method `onDestroyView()`."
      ],
      [
        "onCreateDialog(android.os.Bundle)",
        "The method creates a dialog to display the progress of an attachment download and updates the dialog with the download progress."
      ],
      [
        "onCancel(android.content.DialogInterface)",
        "The method cancels the current attachment download progress and notifies the listener if it exists."
      ],
      [
        "newInstance(int,java.lang.String)",
        "The method creates a new instance of the AttachmentDownloadDialogFragment class with specified size and message arguments."
      ]
    ],
    "com.fsck.k9.fragment.MessageListFragmentComparators$ArrivalComparator": [
      [
        "compare(android.database.Cursor,android.database.Cursor)",
        "This method compares the arrival time of two messages represented by cursors and returns an integer indicating their order."
      ]
    ],
    "com.fsck.k9.fragment.ProgressDialogFragment$CancelListener": [
      [
        "onProgressCancel(com.fsck.k9.fragment.ProgressDialogFragment)",
        "This method is called when the progress dialog is canceled by the user."
      ]
    ],
    "com.fsck.k9.fragment.MessageListFragment$MessageListActivityListener": [
      [
        "synchronizeMailboxFailed(com.fsck.k9.Account,java.lang.String,java.lang.String)",
        "The goal of the method is to handle the failure to synchronize a mailbox for a specific account and folder, and update the UI accordingly."
      ],
      [
        "synchronizeMailboxFinished(com.fsck.k9.Account,java.lang.String,int,int)",
        "The goal of the method is to handle the completion of synchronizing a mailbox for a specific account and folder in the K-9 email client app."
      ],
      [
        "folderStatusChanged(com.fsck.k9.Account,java.lang.String,int)",
        "The method updates the unread message count for a specific folder in the message list."
      ],
      [
        "remoteSearchFailed(java.lang.String,java.lang.String)",
        "The goal of the `remoteSearchFailed` method is to display a toast message with an error message when a remote search operation fails."
      ],
      [
        "remoteSearchStarted(java.lang.String)",
        "The method updates the UI to indicate that a remote search has started."
      ],
      [
        "remoteSearchFinished(java.lang.String,int,int,java.util.List)",
        "The goal of the method is to handle the results of a remote search for messages and update the UI accordingly."
      ],
      [
        "synchronizeMailboxStarted(com.fsck.k9.Account,java.lang.String)",
        "The goal of the method is to update the UI when mailbox synchronization has started for a specific account and folder."
      ],
      [
        "enableProgressIndicator(boolean)",
        "The goal of the method is to enable or disable a progress indicator."
      ],
      [
        "remoteSearchServerQueryComplete(java.lang.String,int,int)",
        "The method updates the UI with search results for a remote server query."
      ],
      [
        "informUserOfStatus()",
        "The goal of the `informUserOfStatus()` method is to refresh the title of the message list activity."
      ]
    ],
    "com.fsck.k9.fragment.MessageListAdapter": [
      [
        "newView(android.content.Context,android.database.Cursor,android.view.ViewGroup)",
        "The method creates a new View for a single item in the list of messages being displayed, and sets up the various UI elements and their properties."
      ],
      [
        "bindView(android.view.View,android.content.Context,android.database.Cursor)",
        "The goal of the `bindView` method in `MessageListAdapter` class is to populate and format the UI elements of a view for displaying an email message, based on the data from a cursor."
      ]
    ],
    "com.fsck.k9.fragment.MessageListFragmentComparators$FlaggedComparator": [
      [
        "compare(android.database.Cursor,android.database.Cursor)",
        "The `compare` method compares two database cursors based on whether they are flagged or not."
      ]
    ],
    "com.fsck.k9.fragment.MessageListFragmentComparators$SubjectComparator": [
      [
        "compare(android.database.Cursor,android.database.Cursor)",
        "The goal of this method is to compare two database cursors based on the subject column and return an integer indicating their relative order."
      ]
    ],
    "com.fsck.k9.fragment.MessageListFragmentComparators$AttachmentComparator": [
      [
        "compare(android.database.Cursor,android.database.Cursor)",
        "The method compares two database cursors based on whether they have attachments or not."
      ]
    ],
    "com.fsck.k9.fragment.MessageListFragmentComparators$UnreadComparator": [
      [
        "compare(android.database.Cursor,android.database.Cursor)",
        "The method compares the \"read\" status of two email messages (represented as cursors) and returns an integer indicating their relative order of unread-ness."
      ]
    ],
    "com.fsck.k9.fragment.MessageListHandler": [
      [
        "folderLoading(java.lang.String,boolean)",
        "The `folderLoading` method sends a message indicating whether a folder is currently loading or not."
      ],
      [
        "updateFooter(java.lang.String)",
        "The method updates the footer message in the MessageListFragment."
      ],
      [
        "remoteSearchFinished()",
        "The method sends a message to indicate that a remote search operation has finished."
      ],
      [
        "goBack()",
        "The goal of the `goBack()` method is to send a message to the `MessageListHandler` with the action of going back."
      ],
      [
        "refreshTitle()",
        "The `refreshTitle()` method sends a message to the `MessageListHandler` to refresh the title of a message list."
      ],
      [
        "restoreListPosition()",
        "The method restores the previous list position in a message list fragment."
      ],
      [
        "openMessage(com.fsck.k9.activity.MessageReference)",
        "The goal of the `openMessage` method is to send a message to open a particular email message referenced by `messageReference`."
      ],
      [
        "handleMessage(android.os.Message)",
        "The `handleMessage` method is responsible for handling messages and calling appropriate methods to update the UI in the `MessageListFragment`."
      ],
      [
        "progress(boolean)",
        "The method `progress(boolean)` updates the progress indicator based on the boolean value passed as a parameter."
      ]
    ],
    "com.fsck.k9.fragment.AttachmentDownloadDialogFragment$AttachmentDownloadCancelListener": [
      [
        "onProgressCancel(com.fsck.k9.fragment.AttachmentDownloadDialogFragment)",
        "The goal of the method is to perform some action(s) when the user cancels an attachment download progress."
      ]
    ],
    "com.fsck.k9.fragment.ConfirmationDialogFragment": [
      [
        "onClick(android.content.DialogInterface,int)",
        "The goal of this method is to handle button clicks for a confirmation dialog and call the appropriate listener method based on which button was clicked."
      ],
      [
        "newInstance(int,java.lang.String,java.lang.String,java.lang.String,java.lang.String)",
        "The method creates and returns a new instance of `ConfirmationDialogFragment` with the specified arguments."
      ],
      [
        "onAttach(android.app.Activity)",
        "The goal of the `onAttach(android.app.Activity)` method is to set the `mListener` variable to the `activity` parameter if the `activity` implements the `ConfirmationDialogFragmentListener` interface, otherwise log a message indicating that the `activity` does not implement the interface."
      ],
      [
        "newInstance(int,java.lang.String,java.lang.String,java.lang.String)",
        "The method creates a new instance of `ConfirmationDialogFragment` with specified dialog ID, title, message, and cancel button text."
      ],
      [
        "onCreateDialog(android.os.Bundle)",
        "The `onCreateDialog` method creates a dialog box with the specified title, message, buttons, and listener, and returns it to be displayed to the user."
      ],
      [
        "onCancel(android.content.DialogInterface)",
        "The method is called when the dialog is cancelled, and it notifies the listener that the dialog has been cancelled with the dialog's ID."
      ]
    ],
    "com.fsck.k9.fragment.MessageViewHolder": [
      [
        "onClick(android.view.View)",
        "The method handles user clicks on message view items such as selecting or flagging a message."
      ]
    ],
    "com.fsck.k9.fragment.MessageListFragmentComparators$ComparatorChain": [
      [
        "compare(java.lang.Object,java.lang.Object)",
        "The `compare` method is used to compare two objects of type `T` using a chain of comparators provided by the `ComparatorChain` class, where the first non-zero result returned by any of the comparators is returned as the final result."
      ]
    ],
    "com.fsck.k9.fragment.ConfirmationDialogFragment$ConfirmationDialogFragmentListener": [
      [
        "doNegativeClick(int)",
        "The method is called when the negative button of a confirmation dialog is clicked, with the goal of taking action based on the dialog ID."
      ],
      [
        "dialogCancelled(int)",
        "The method is called when the user cancels the dialog with the specified dialog ID."
      ],
      [
        "doPositiveClick(int)",
        "The method is called when the user clicks the positive button on a confirmation dialog and takes an integer identifier for the dialog as a parameter."
      ]
    ],
    "com.fsck.k9.fragment.MessageListFragmentComparators$DateComparator": [
      [
        "compare(android.database.Cursor,android.database.Cursor)",
        "The method compares two cursors based on their date values and returns an integer indicating their relative order."
      ]
    ],
    "com.fsck.k9.fragment.MessageListFragmentComparators$ReverseIdComparator": [
      [
        "compare(android.database.Cursor,android.database.Cursor)",
        "The goal of this method is to compare two `Cursor` objects based on the value of their `_id` column in reverse order."
      ]
    ],
    "com.fsck.k9.fragment.MessageListFragment$MessageListFragmentListener": [
      [
        "updateMenu()",
        "The method updates the menu options displayed in the Message List Fragment."
      ],
      [
        "setUnreadCount(int)",
        "To set the number of unread messages in the message list."
      ],
      [
        "setMessageListTitle(java.lang.String)",
        "The method sets the title of the message list."
      ],
      [
        "onForward(com.fsck.k9.activity.MessageReference)",
        "The goal of the method is to forward a specific message to another recipient."
      ],
      [
        "startSearch(com.fsck.k9.Account,java.lang.String)",
        "The method starts a search for messages in a specified folder for a given account."
      ],
      [
        "onReplyAll(com.fsck.k9.activity.MessageReference)",
        "The method is called when the user selects to reply to all recipients of a message in the message list fragment."
      ],
      [
        "showThread(com.fsck.k9.Account,java.lang.String,long)",
        "The goal of the method is to display the email thread for a specific account, folder, and root message ID."
      ],
      [
        "showMoreFromSameSender(java.lang.String)",
        "The goal of this method is to display more messages from the sender with the given email address."
      ],
      [
        "enableActionBarProgress(boolean)",
        "To enable or disable the progress indicator in the action bar."
      ],
      [
        "setMessageListProgress(int)",
        "The goal of this method is to update the progress level of the message list."
      ],
      [
        "goBack()",
        "The goal of the `goBack()` method is to navigate the user back to the previous screen."
      ],
      [
        "remoteSearchStarted()",
        "The goal of the `remoteSearchStarted()` method is to notify the listener that a remote search has been started."
      ],
      [
        "setMessageListSubTitle(java.lang.String)",
        "The method sets the subtitle of the message list in a message list fragment."
      ],
      [
        "onResendMessage(com.fsck.k9.activity.MessageReference)",
        "The method is called when a message needs to be resent."
      ],
      [
        "openMessage(com.fsck.k9.activity.MessageReference)",
        "The goal of the method is to open the message corresponding to the given message reference."
      ],
      [
        "onCompose(com.fsck.k9.Account)",
        "The goal of the method is to handle the action of composing a new email message for a given email account."
      ],
      [
        "onReply(com.fsck.k9.activity.MessageReference)",
        "The goal of the method is to handle a reply action on a specific email message."
      ]
    ],
    "com.fsck.k9.fragment.MessageListFragment$ActionModeCallback": [
      [
        "showMarkAsRead(boolean)",
        "To show or hide the \"mark as read\" and \"mark as unread\" options in the toolbar action mode."
      ],
      [
        "onCreateActionMode(android.view.ActionMode,android.view.Menu)",
        "The method creates a context action bar menu for the MessageListFragment and sets the appropriate capabilities based on the account."
      ],
      [
        "showFlag(boolean)",
        "The goal of this method is to show/hide the flag and unflag options in the action mode."
      ],
      [
        "showSelectAll(boolean)",
        "The goal of the `showSelectAll(boolean)` method is to toggle the visibility of the \"Select All\" option in the action mode menu."
      ],
      [
        "onDestroyActionMode(android.view.ActionMode)",
        "The method is called when an action mode is destroyed and its goal is to reset the state of select-all, mark as read, mark as unread, flag, unflag and selection to null."
      ],
      [
        "onPrepareActionMode(android.view.ActionMode,android.view.Menu)",
        "The method sets up the available menu options and their visibility in the contextual action mode based on the selected messages and the current account."
      ],
      [
        "onActionItemClicked(android.view.ActionMode,android.view.MenuItem)",
        "The `onActionItemClicked` method handles the selected action item and performs the appropriate operation on the checked messages in the message list."
      ]
    ],
    "com.fsck.k9.fragment.MessageListFragmentComparators$ReverseComparator": [
      [
        "compare(java.lang.Object,java.lang.Object)",
        "The goal of the method is to compare two objects in reverse order using the comparator passed to the constructor."
      ]
    ]
  },
  "com.fsck.k9.helper": {
    "com.fsck.k9.helper.MergeCursor": [
      [
        "getColumnName(int)",
        "This method returns the name of the column at the specified index from the active cursor."
      ],
      [
        "getDouble(int)",
        "This method returns a double value for the given column index from the active cursor."
      ],
      [
        "getWantsAllOnMoveCalls()",
        "The goal of the method is to return whether or not the underlying cursor wants all `onMove()` calls."
      ],
      [
        "getCount()",
        "The goal of the method `getCount()` is to return the total number of items in all the cursors combined and cache the result for efficiency."
      ],
      [
        "isBeforeFirst()",
        "The goal of the method is to check if the current position of the cursor is before the first row."
      ],
      [
        "getColumnIndexOrThrow(java.lang.String)",
        "The method returns the index of a specified column name or throws an IllegalArgumentException if the column name does not exist."
      ],
      [
        "moveToPosition(int)",
        "The method moves the cursor to the specified position if possible, and returns a boolean indicating whether the move was successful."
      ],
      [
        "moveToPrevious()",
        "The `moveToPrevious()` method is used to move the cursor to the previous row in the merged result set while taking into account the order of the underlying cursors."
      ],
      [
        "moveToFirst()",
        "The method `moveToFirst()` moves the cursor to the first row."
      ],
      [
        "isFirst()",
        "The method checks whether the cursor is positioned on the first row of the merged result set."
      ],
      [
        "isClosed()",
        "The `isClosed()` method checks if the active cursor is closed and returns a boolean value indicating whether or not it is closed."
      ],
      [
        "getPosition()",
        "This method returns the current position of the cursor."
      ],
      [
        "move(int)",
        "The method `move(int)` moves the cursor by a specified offset and returns true if the new cursor position is valid."
      ],
      [
        "setNotificationUri(android.content.ContentResolver,android.net.Uri)",
        "The goal of this method is to set the notification URI on all cursors contained within the MergeCursor instance."
      ],
      [
        "isNull(int)",
        "The method checks if the specified column of the current cursor position contains a null value."
      ],
      [
        "registerContentObserver(android.database.ContentObserver)",
        "The method registers a given content observer to all cursors stored in the MergeCursor."
      ],
      [
        "getFloat(int)",
        "The goal of the `getFloat(int)` method in class `com.fsck.k9.helper.MergeCursor` is to retrieve a float value from the active cursor at the specified column index."
      ],
      [
        "respond(android.os.Bundle)",
        "This method throws a runtime exception as it is not implemented yet."
      ],
      [
        "registerDataSetObserver(android.database.DataSetObserver)",
        "The method registers a DataSetObserver to each of the Cursors contained in the MergeCursor object."
      ],
      [
        "unregisterContentObserver(android.database.ContentObserver)",
        "The method unregisters a specified ContentObserver from all cursors within the MergeCursor."
      ],
      [
        "getColumnIndex(java.lang.String)",
        "This method returns the index of the specified column name in the active cursor of a MergeCursor object."
      ],
      [
        "setExtras(android.os.Bundle)",
        "The method sets the extras on the active cursor."
      ],
      [
        "getType(int)",
        "This method returns the data type of the value in the specified column index of the active cursor used in the MergeCursor."
      ],
      [
        "getShort(int)",
        "The method returns a short value from the active cursor for the specified column index."
      ],
      [
        "copyStringToBuffer(int,android.database.CharArrayBuffer)",
        "This method copies a string value from a specific column in the active cursor to a character buffer."
      ],
      [
        "getBlob(int)",
        "This method returns the blob value of the specified column from the active cursor."
      ],
      [
        "unregisterDataSetObserver(android.database.DataSetObserver)",
        "The method unregisters a given observer from all cursors within the MergeCursor."
      ],
      [
        "requery()",
        "The method requery() is used to re-execute the query associated with the cursors and return whether the operation was successful or not."
      ],
      [
        "moveToNext()",
        "The goal of the `moveToNext()` method in class `com.fsck.k9.helper.MergeCursor` is to move the cursor to the next row in the result set, which consists of merging multiple cursors based on a given sorting order."
      ],
      [
        "close()",
        "The method closes all open cursors in the MergeCursor object."
      ],
      [
        "getNotificationUri()",
        "This method returns the notification URI for the merged cursor."
      ],
      [
        "getString(int)",
        "This method retrieves a String value from the active cursor at the specified column index."
      ],
      [
        "getColumnNames()",
        "This method returns an array of column names from the active cursor of a MergeCursor object."
      ],
      [
        "getExtras()",
        "This method throws a runtime exception and is not implemented in the class."
      ],
      [
        "getInt(int)",
        "This method returns an integer value for the specified column index from the active cursor."
      ],
      [
        "isAfterLast()",
        "The method checks whether the current position of the cursor is after the last row of the merged cursor."
      ],
      [
        "isLast()",
        "This method is intended to determine whether the current position of the cursor represents the last row in the result set."
      ],
      [
        "deactivate()",
        "The goal of the `deactivate()` method is to deactivate all the cursors associated with the `MergeCursor` instance."
      ],
      [
        "moveToLast()",
        "The goal of the `moveToLast()` method is to move the cursor to the last position of the merged cursor and return a boolean indicating whether or not the move was successful."
      ],
      [
        "getLong(int)",
        "This method returns the value of the requested column as a long data type from the active cursor of the MergeCursor object."
      ],
      [
        "getColumnCount()",
        "The `getColumnCount()` method returns the number of columns in the active cursor of a MergeCursor object instance."
      ]
    ],
    "com.fsck.k9.helper.EmailHelper": [
      [
        "getDomainFromEmailAddress(java.lang.String)",
        "The method returns the domain name portion of an email address."
      ]
    ],
    "com.fsck.k9.helper.IdentityHelper": [
      [
        "getRecipientIdentityFromMessage(com.fsck.k9.Account,com.fsck.k9.mail.Message)",
        "The method retrieves the recipient identity of a message based on its recipients, or the default identity of the account if it cannot be determined."
      ]
    ],
    "com.fsck.k9.helper.MergeCursorWithUniqueId": [
      [
        "getColumnCount()",
        "The method `getColumnCount()` returns the number of columns in the MergeCursorWithUniqueId's result set, plus one to account for the unique ID column."
      ],
      [
        "getColumnIndex(java.lang.String)",
        "The `getColumnIndex` method returns the index of a given column name, but returns the index of the unique id column if the given column name is \"_id\"."
      ],
      [
        "getColumnIndexOrThrow(java.lang.String)",
        "The method returns the index of the specified column, or throws an exception if the column doesn't exist. If the specified column is \"_id\", it returns the index of the unique ID column instead."
      ]
    ],
    "com.fsck.k9.helper.UrlEncodingHelper": [
      [
        "encodeUtf8(java.lang.String)",
        "The goal of this method is to encode a given string as UTF-8 format using URL encoding."
      ],
      [
        "decodeUtf8(java.lang.String)",
        "The method decodes a URL-encoded UTF-8 encoded string into a plain Unicode string."
      ]
    ],
    "com.fsck.k9.helper.MessageHelper": [
      [
        "getDisplayName(com.fsck.k9.Account,com.fsck.k9.mail.Address[],com.fsck.k9.mail.Address[])",
        "This method returns a user-friendly display name for a given email message based on sender and recipient information."
      ],
      [
        "toFriendly(com.fsck.k9.mail.Address,com.fsck.k9.helper.Contacts)",
        "The method returns a \"friendly\" name for an email address by looking up the contact name from the device's contacts, and falling back to the personal portion of the address or the full email address if no contact is found."
      ],
      [
        "populate(com.fsck.k9.activity.MessageInfoHolder,com.fsck.k9.mailstore.LocalMessage,com.fsck.k9.activity.FolderInfoHolder,com.fsck.k9.Account)",
        "This method populates the fields of a `MessageInfoHolder` object with information about a given `LocalMessage`."
      ],
      [
        "toMe(com.fsck.k9.Account,com.fsck.k9.mail.Address[])",
        "This method checks if any of the provided email addresses are associated with the given email account identity."
      ],
      [
        "toFriendly(com.fsck.k9.mail.Address[],com.fsck.k9.helper.Contacts)",
        "The goal of the `toFriendly` method is to convert an array of email addresses to a more user-friendly representation."
      ],
      [
        "getInstance(android.content.Context)",
        "The goal of this method is to return the instance of MessageHelper and create one if it does not exist, passing in the Context provided as a parameter."
      ]
    ],
    "com.fsck.k9.helper.FileHelper": [
      [
        "move(java.io.File,java.io.File)",
        "The `move` method is designed to move a file from a source location to a target location while handling various potential exceptions."
      ],
      [
        "createUniqueFile(java.io.File,java.lang.String)",
        "The goal of this method is to create a unique file in the given directory by appending a hyphen and a number to the given filename."
      ],
      [
        "sanitizeFilename(java.lang.String)",
        "The goal of the method is to replace characters that are not allowed in file names with a replacement character in order to sanitize the file name."
      ],
      [
        "moveRecursive(java.io.File,java.io.File)",
        "The `moveRecursive` method recursively moves a directory and its contents to a new location while logging any errors encountered."
      ],
      [
        "touchFile(java.io.File,java.lang.String)",
        "The `touchFile` method creates or updates the last modified time of the file located in the specified directory."
      ],
      [
        "renameOrMoveByCopying(java.io.File,java.io.File)",
        "The goal of the method is to either rename or move a file by first attempting to rename it and falling back to copying and deleting the original file if the rename fails."
      ]
    ],
    "com.fsck.k9.helper.K9AlarmManager": [
      [
        "cancel(android.app.PendingIntent)",
        "The method cancels an alarm (specified by a `PendingIntent`) set by `K9AlarmManager`."
      ],
      [
        "getAlarmManager(android.content.Context)",
        "This method returns an instance of `K9AlarmManager` that manages system alarms and checks for device idle state."
      ],
      [
        "set(int,long,android.app.PendingIntent)",
        "The method sets an alarm and if the device is in idle mode and the app is whitelisted, it allows the alarm to trigger even in idle mode."
      ]
    ],
    "com.fsck.k9.helper.UnreadWidgetProperties": [
      [
        "getClickIntent(android.content.Context)",
        "This method returns an Intent that corresponds to the type of click performed on a widget displaying unread email information."
      ],
      [
        "getAppWidgetId()",
        "This method returns the ID of the app widget."
      ],
      [
        "getFolderName()",
        "This method returns the name of the folder."
      ],
      [
        "getTitle(android.content.Context)",
        "This method returns the title for an unread widget in the K-9 email client based on the account and folder being displayed."
      ],
      [
        "getUnreadCount(android.content.Context)",
        "The method returns the number of unread messages based on the context of the account, type and folder."
      ],
      [
        "getAccountUuid()",
        "The goal of this method is to return the account UUID."
      ]
    ],
    "com.fsck.k9.helper.SizeFormatter": [
      [
        "formatSize(android.content.Context,long)",
        "The method formats a given size in bytes to a human-readable string representation with a single digit precision using kB, MB, GB or bytes."
      ]
    ],
    "com.fsck.k9.helper.FileBrowserHelper": [
      [
        "showFileBrowserActivity(android.app.Fragment,java.io.File,int,com.fsck.k9.helper.FileBrowserHelper$FileBrowserFailOverCallback)",
        "The goal of this method is to show a file browser activity and allow the user to pick a directory, or if no file browser is installed, show a fallback text dialog."
      ],
      [
        "getInstance()",
        "The method returns a singleton instance of the `FileBrowserHelper` class and ensures that only one instance of the class is created."
      ],
      [
        "showFileBrowserActivity(android.app.Activity,java.io.File,int,com.fsck.k9.helper.FileBrowserHelper$FileBrowserFailOverCallback)",
        "The method attempts to open a file browser and if no file browser is found, it displays a fallback text dialog."
      ]
    ],
    "com.fsck.k9.helper.ParcelableUtil": [
      [
        "marshall(android.os.Parcelable)",
        "The `marshall` method of `ParcelableUtil` takes an `android.os.Parcelable` object, writes it to a parcel, marshalls the parcel into a byte array, and returns the byte array."
      ],
      [
        "unmarshall(byte[],android.os.Parcelable$Creator)",
        "This method unmarshalls a byte array into a Parcelable object using a given creator."
      ]
    ],
    "com.fsck.k9.helper.RetainFragment": [
      [
        "setData(java.lang.Object)",
        "The method sets the data field of the RetainFragment object to the input parameter value."
      ],
      [
        "onCreate(android.os.Bundle)",
        "The goal of the method is to set the retain instance to true for the `RetainFragment` class."
      ],
      [
        "findOrCreate(android.app.FragmentManager,java.lang.String)",
        "The `findOrCreate` method creates a `RetainFragment` instance if one does not exist with the given tag, or returns an existing one with the given tag."
      ],
      [
        "findOrNull(android.app.FragmentManager,java.lang.String)",
        "The goal of this method is to find and return a RetainFragment of a specific type in a given FragmentManager, or return null if not found."
      ],
      [
        "getData()",
        "The method returns the stored data of type T."
      ],
      [
        "hasData()",
        "The goal of the `hasData()` method is to check if the `data` variable in the `RetainFragment` class is not null and return a boolean value accordingly."
      ],
      [
        "clearAndRemove(android.app.FragmentManager)",
        "This method clears the data and removes the current `RetainFragment` instance from the `FragmentManager`."
      ]
    ],
    "com.fsck.k9.helper.FileBrowserHelper$FileBrowserFailOverCallback": [
      [
        "onPathEntered(java.lang.String)",
        "The goal of the method is to handle the inputted path by the user in the file browser."
      ],
      [
        "onCancel()",
        "The goal of the `onCancel()` method is to handle the event when the user cancels an input text dialog."
      ]
    ],
    "com.fsck.k9.helper.MailTo": [
      [
        "getCc()",
        "The method `getCc()` returns an array of email addresses that were included in the CC field of an email message."
      ],
      [
        "getBody()",
        "The goal of the `getBody()` method is to return the body of an email."
      ],
      [
        "getSubject()",
        "The `getSubject()` method returns the subject of an email as a string."
      ],
      [
        "getBcc()",
        "The goal of this method is to return an array of blind carbon copy email addresses."
      ],
      [
        "getTo()",
        "The goal of the method is to return an array of email addresses used as the recipients in the email."
      ],
      [
        "parse(android.net.Uri)",
        "The goal of the `parse(android.net.Uri)` method of class `com.fsck.k9.helper.MailTo` is to parse a mailto URI and extract the recipient's email address, as well as any other specified email parameters such as CC and BCC addresses, subject, and body."
      ],
      [
        "isMailTo(android.net.Uri)",
        "The method checks if the given URI has the \"mailto\" scheme."
      ]
    ],
    "com.fsck.k9.helper.Contacts": [
      [
        "isInContacts(java.lang.String)",
        "The goal of the `isInContacts` method is to check if a provided email address belongs to a contact and return `true` if it does, and `false` otherwise."
      ],
      [
        "isAnyInContacts(com.fsck.k9.mail.Address[])",
        "The method checks if at least one address provided in an array belongs to a contact."
      ],
      [
        "getInstance(android.content.Context)",
        "The goal of this method is to return an appropriate instance of the `Contacts` class for the device, based on the provided `Context`."
      ],
      [
        "getPhotoUri(java.lang.String)",
        "The method retrieves the URI of the picture of a contact with a particular email address from the contact database."
      ],
      [
        "contactPickerIntent()",
        "The goal of the method is to create the intent required to open a contact picker."
      ],
      [
        "getNameForAddress(java.lang.String)",
        "The goal of the `getNameForAddress` method is to retrieve the name associated with an email address if it exists in the address book."
      ],
      [
        "createContact(com.fsck.k9.mail.Address)",
        "The goal of the method is to start an activity to add a new contact or update an existing contact with an email address and optionally the display name of the entity."
      ],
      [
        "markAsContacted(com.fsck.k9.mail.Address[])",
        "The method marks contacts with the provided email addresses as contacted."
      ],
      [
        "addPhoneContact(java.lang.String)",
        "The goal of the `addPhoneContact` method is to start the activity that enables the user to add a phone number to an existing contact or create a new contact in the Android contacts app."
      ]
    ],
    "com.fsck.k9.helper.SimpleTextWatcher": [
      [
        "afterTextChanged(android.text.Editable)",
        "This method is called after the text has been changed and its purpose is not defined in the given code snippet."
      ],
      [
        "onTextChanged(java.lang.CharSequence,int,int,int)",
        "This method is called when the text is changed in an EditText field and its goal is to handle the text changes."
      ],
      [
        "beforeTextChanged(java.lang.CharSequence,int,int,int)",
        "This method is called to notify that some text is about to be replaced with some other text."
      ]
    ],
    "com.fsck.k9.helper.ContactPicture": [
      [
        "getContactPictureLoader(android.content.Context)",
        "This method returns a loader for contact pictures given a context, which incorporates a default background color if the app has missing contact pictures."
      ]
    ],
    "com.fsck.k9.helper.ClipboardManager": [
      [
        "setText(java.lang.String,java.lang.String)",
        "The goal of the `setText` method is to copy a given text string with a label to the system clipboard."
      ],
      [
        "getInstance(android.content.Context)",
        "The method returns a new instance of `ClipboardManager` initialized with the application context."
      ]
    ],
    "com.fsck.k9.helper.MailTo$CaseInsensitiveParamWrapper": [
      [
        "getQueryParameters(java.lang.String)",
        "The method returns a list of query parameters from a given key while ignoring case sensitivity."
      ]
    ],
    "com.fsck.k9.helper.ReplyToParser": [
      [
        "getRecipientsToReplyTo(com.fsck.k9.mail.Message,com.fsck.k9.Account)",
        "This method returns the recipient addresses to reply to when replying to an email message."
      ],
      [
        "getRecipientsToReplyAllTo(com.fsck.k9.mail.Message,com.fsck.k9.Account)",
        "The `getRecipientsToReplyAllTo` method aims to return a list of email addresses to which to reply to when replying to an email \"all\" from the given `Message` and `Account`."
      ]
    ],
    "com.fsck.k9.helper.ExceptionHelper": [
      [
        "getRootCauseMessage(java.lang.Throwable)",
        "The goal of the `getRootCauseMessage` method is to extract the root cause of a given throwable object and return a string representation of the error message that can be used in notifications."
      ]
    ],
    "com.fsck.k9.helper.Utility": [
      [
        "hasConnectivity(android.content.Context)",
        "The goal of the method is to check if the device has network connectivity."
      ],
      [
        "domainFieldValid(android.widget.EditText)",
        "The goal of the method `domainFieldValid` is to validate if the input in an `android.widget.EditText` field is a valid email domain or IP address."
      ],
      [
        "arrayContainsAny(java.lang.Object[],java.lang.Object[])",
        "The goal of the method is to check if any element in one array is present in another array."
      ],
      [
        "closeQuietly(android.database.Cursor)",
        "The `closeQuietly` method unconditionally closes a given `Cursor` object in a try-finally block, if it is not null."
      ],
      [
        "stripNewLines(java.lang.String)",
        "The method removes all new line characters from a given multi-line string."
      ],
      [
        "wrap(java.lang.String,int)",
        "The `wrap` method aims to wrap a given string with a specified line length and return the resulting string."
      ],
      [
        "wrap(java.lang.String,int,java.lang.String,boolean)",
        "The `wrap` method takes a String input and returns a wrapped String output, based on a specified wrap length, with the option to wrap long words and insert a custom new line separator."
      ],
      [
        "setContactForBadge(com.fsck.k9.ui.ContactBadge,com.fsck.k9.mail.Address)",
        "The goal of the `setContactForBadge` method is to assign a contact to the given badge, and if the contact does not exist, auto-populate the name using the provided address."
      ],
      [
        "setCompoundDrawablesAlpha(android.widget.TextView,int)",
        "This method sets the alpha (transparency) level of the compound drawables (icons) of a given TextView."
      ],
      [
        "hasExternalImages(java.lang.String)",
        "This method determines whether a given message contains external images and returns true or false accordingly."
      ],
      [
        "combine(java.lang.Object[],char)",
        "The `combine` method takes an array of objects and a separator character, and returns a new String that combines the `toString()` representation of each object with the separator character in between."
      ],
      [
        "requiredFieldValid(android.widget.TextView)",
        "The goal of this method is to check if a required field, represented by an android.widget.TextView, has a non-null and non-empty value."
      ],
      [
        "getMainThreadHandler()",
        "The goal of the `getMainThreadHandler()` method is to return a Handler object that is tied to the main thread."
      ],
      [
        "extractMessageId(java.lang.String)",
        "The goal of this method is to extract the message ID from a given string of text."
      ],
      [
        "isAnyMimeType(java.lang.String,java.lang.String[])",
        "The goal of the method `isAnyMimeType` is to check if a given `String` matches any of the MIME types specified in an array of `String`s."
      ],
      [
        "combine(java.lang.Iterable,char)",
        "The method combines a collection of objects into a single string with a separator character."
      ],
      [
        "extractMessageIds(java.lang.String)",
        "The goal of the `extractMessageIds` method is to extract a list of message IDs from a provided text string using regular expressions."
      ],
      [
        "stripSubject(java.lang.String)",
        "The `stripSubject` method of `com.fsck.k9.helper.Utility` class extracts the original subject value while ignoring leading response/forward markers and '[XX]' formatted tags."
      ],
      [
        "requiredFieldValid(android.text.Editable)",
        "The method checks if a required field is valid by ensuring that the field is not null and has a length greater than zero."
      ],
      [
        "arrayContains(java.lang.Object[],java.lang.Object)",
        "The method checks if a given object is present in an array of objects."
      ]
    ],
    "com.fsck.k9.helper.Preconditions": [
      [
        "checkNotNull(java.lang.Object)",
        "The method checks if a reference is null and throws a NullPointerException if it is, otherwise it returns the reference."
      ]
    ]
  },
  "com.fsck.k9.helper.jsoup": {
    "com.fsck.k9.helper.jsoup.NodeFilter": [
      [
        "head(org.jsoup.nodes.Node,int)",
        "The `head(org.jsoup.nodes.Node,int)` method is a callback function used to filter and make a decision on what to do with a node being visited in a HTML document parser."
      ],
      [
        "tail(org.jsoup.nodes.Node,int)",
        "The method `tail()` is called when a node is last visited and it returns a decision on whether to continue filtering its descendants or not."
      ]
    ],
    "com.fsck.k9.helper.jsoup.AdvancedNodeTraversor": [
      [
        "filter(org.jsoup.nodes.Node)",
        "The goal of the method is to perform a depth-first filtering of the root node and all its descendants based on custom filter implementations."
      ]
    ]
  },
  "com.fsck.k9.mailstore": {
    "com.fsck.k9.mailstore.StorageManager$SamsungGalaxySStorageProvider": [
      [
        "getName(android.content.Context)",
        "This method returns the name of the Samsung Galaxy S storage provider."
      ],
      [
        "getId()",
        "The method `getId()` returns the ID of the Samsung Galaxy S as a string."
      ]
    ],
    "com.fsck.k9.mailstore.StorageManager$ExternalStorageProvider": [
      [
        "getAttachmentDirectory(android.content.Context,java.lang.String)",
        "The goal of this method is to return a file object that represents the attachment directory for a given context and ID."
      ],
      [
        "init(android.content.Context)",
        "The method initializes the variables \"mRoot\" and \"mApplicationDirectory\" to the external storage directory and the application's files directory within it, respectively."
      ],
      [
        "getDatabase(android.content.Context,java.lang.String)",
        "The method returns a file handle to the database file with the given ID located in the application directory."
      ],
      [
        "isSupported(android.content.Context)",
        "This method returns a boolean value indicating whether external storage is supported or not in the given Android context."
      ],
      [
        "getName(android.content.Context)",
        "The method returns the name of the external storage provider as a localized string."
      ],
      [
        "getId()",
        "The `getId()` method returns the ID of the external storage provider for the email app."
      ],
      [
        "isReady(android.content.Context)",
        "The method checks if the external storage is currently mounted and ready for use."
      ]
    ],
    "com.fsck.k9.mailstore.LocalStore": [
      [
        "isCopyCapable()",
        "The goal of the method is to return a boolean indicating whether the local store is capable of performing a message copy operation."
      ],
      [
        "getFolder(java.lang.String)",
        "This method returns a new instance of `com.fsck.k9.mailstore.LocalFolder` with a specified name for the given `com.fsck.k9.mailstore.LocalStore` instance."
      ],
      [
        "isMoveCapable()",
        "The goal of the method is to return a boolean value indicating whether the LocalStore is capable of moving messages."
      ],
      [
        "getAttachmentDataSource(java.lang.String)",
        "The goal of the method is to return an OpenPgpDataSource for a specified attachment part ID, which can be used to write the attachment data to an output stream."
      ],
      [
        "createFolders(java.util.List,int)",
        "The goal of the `createFolders` method is to create new local folders and add them to the database with specific preferences for synchronization, integration, and display."
      ],
      [
        "getFoldersAndUids(java.util.List,boolean)",
        "The goal of the `getFoldersAndUids` method in the `com.fsck.k9.mailstore.LocalStore` class is to retrieve the folder name and UID for a given list of messages, grouped by folder name."
      ],
      [
        "setFlagForThreads(java.util.List,com.fsck.k9.mail.Flag,boolean)",
        "The goal of the `setFlagForThreads` method is to change the state of a flag for a list of threads as efficiently as possible using SQL UPDATE statements."
      ],
      [
        "getAttachmentInfo(java.lang.String)",
        "The method retrieves information about an email attachment from the local SQLite database."
      ],
      [
        "compact()",
        "The `compact()` method is used to reduce the size of the database by performing a VACUUM operation on it."
      ],
      [
        "getColumnNameForFlag(com.fsck.k9.mail.Flag)",
        "The method returns the corresponding database column name for a given email flag."
      ],
      [
        "setFlag(java.util.List,com.fsck.k9.mail.Flag,boolean)",
        "The goal of this method is to change the state of a flag for a list of messages by updating their corresponding rows in the database with a new flag value."
      ],
      [
        "delete()",
        "The `delete()` method deletes the data stored in the local mail store database."
      ],
      [
        "removePendingCommand(com.fsck.k9.controller.MessagingControllerCommands$PendingCommand)",
        "The goal of the `removePendingCommand` method is to delete a specific pending command from the LocalStore's database."
      ],
      [
        "getInstance(com.fsck.k9.Account,android.content.Context)",
        "The method returns an instance of a local mail store for a specific email account and context, creating or upgrading the database if necessary, and throws an exception if the storage provider is unavailable."
      ],
      [
        "checkSettings()",
        "The goal of this method is to check the email settings of the local email store for correctness and validity."
      ],
      [
        "removeAccount(com.fsck.k9.Account)",
        "The method removes the specified email account and resets its associated local store."
      ],
      [
        "switchLocalStorage(java.lang.String)",
        "The goal of this method is to switch the local storage provider for the K-9 Mail application."
      ],
      [
        "getPersonalNamespaces(boolean)",
        "The `getPersonalNamespaces` method retrieves a list of all personal folders associated with the LocalStore instance."
      ],
      [
        "addPendingCommand(com.fsck.k9.controller.MessagingControllerCommands$PendingCommand)",
        "The `addPendingCommand` method adds a command to be executed later to the database."
      ],
      [
        "getSize()",
        "The goal of the method is to retrieve the total size (in bytes) of the attachments and the database associated with the LocalStore instance."
      ],
      [
        "recreate()",
        "The `recreate()` method recreates the local email database."
      ],
      [
        "resetVisibleLimits(int)",
        "The method sets the visible message limit and unknown state of 'more messages' attribute of a folder to provided integer value."
      ],
      [
        "getDatabase()",
        "The method returns the `LockableDatabase` object of the `LocalStore` instance."
      ],
      [
        "getMessageFulltextCreator()",
        "The goal of this method is to return the `MessageFulltextCreator` object associated with a `LocalStore` instance."
      ],
      [
        "searchForMessages(com.fsck.k9.mail.MessageRetrievalListener,com.fsck.k9.search.LocalSearch)",
        "The method searches for messages in the local store that match a given search query, retrieves them and returns them as a list of `LocalMessage` objects."
      ],
      [
        "clear()",
        "The method `clear()` aims to delete all local email message data including threads, messages, and search data, and then compact the database."
      ],
      [
        "removePendingCommands()",
        "The `removePendingCommands()` method removes all pending commands from the local database."
      ],
      [
        "getMessagesInThread(long)",
        "The method `getMessagesInThread(long)` retrieves a list of all local messages that belong in a specific thread."
      ]
    ],
    "com.fsck.k9.mailstore.LockableDatabase$StorageListener": [
      [
        "onMount(java.lang.String)",
        "The `onMount` method opens or creates a data space for the lockable database on a storage provider when the provider is mounted."
      ],
      [
        "onUnmount(java.lang.String)",
        "The goal of this method is to close the database if the storage provider is unmounted."
      ]
    ],
    "com.fsck.k9.mailstore.LockableDatabase$DbCallback": [
      [
        "doDbWork(android.database.sqlite.SQLiteDatabase)",
        "The method performs a specific database operation within a locked database and returns any relevant data."
      ]
    ],
    "com.fsck.k9.mailstore.CryptoResultAnnotation": [
      [
        "getEncapsulatedResult()",
        "The goal of this method is to return the encapsulated result of a cryptographic operation."
      ],
      [
        "getOpenPgpSigningKeyIntentIfAny()",
        "This method returns a PendingIntent for OpenPGP signing key if available."
      ],
      [
        "createErrorAnnotation(com.fsck.k9.mailstore.CryptoResultAnnotation$CryptoError,com.fsck.k9.mail.internet.MimeBodyPart)",
        "The goal of the method is to create a new CryptoResultAnnotation object containing the specified CryptoError and MimeBodyPart parameters and return it."
      ],
      [
        "createOpenPgpCanceledAnnotation()",
        "The goal of the method is to create a new `CryptoResultAnnotation` object indicating that the OpenPGP operation was canceled by the user."
      ],
      [
        "withEncapsulatedResult(com.fsck.k9.mailstore.CryptoResultAnnotation)",
        "The method returns a new `CryptoResultAnnotation` object with an encapsulated `CryptoResultAnnotation` object."
      ],
      [
        "getOpenPgpSignatureResult()",
        "This method returns an OpenPgpSignatureResult object or null."
      ],
      [
        "createOpenPgpSignatureErrorAnnotation(org.openintents.openpgp.OpenPgpError,com.fsck.k9.mail.internet.MimeBodyPart)",
        "The goal of the method is to create an annotation object for an OpenPGP signature error with the specified OpenPgpError and replacement data."
      ],
      [
        "getOpenPgpInsecureWarningPendingIntent()",
        "The goal of this method is to return a pending intent for an insecure OpenPGP warning."
      ],
      [
        "getOpenPgpDecryptionResult()",
        "The `getOpenPgpDecryptionResult()` method returns an optional `OpenPgpDecryptionResult` object associated with a message's cryptographic result annotation."
      ],
      [
        "hasSignatureResult()",
        "The goal of the `hasSignatureResult()` method is to check if there is an OpenPGP signature result and if it is not `RESULT_NO_SIGNATURE`."
      ],
      [
        "getReplacementData()",
        "The method retrieves the replacement data for a MIME body part in an email message if it has been encrypted or signed."
      ],
      [
        "hasReplacementData()",
        "The goal of the method is to check if replacementData is not null."
      ],
      [
        "isOpenPgpResult()",
        "The method checks whether both an OpenPGP decryption and signature result are present."
      ],
      [
        "hasOpenPgpInsecureWarningPendingIntent()",
        "The goal of the method is to check if there is an insecure warning `PendingIntent` related to OpenPGP encryption."
      ],
      [
        "isOverrideSecurityWarning()",
        "The method checks whether the security warning for a cryptographic process has been overridden or not."
      ],
      [
        "getErrorType()",
        "This method returns the type of error that occurred during cryptographic operations."
      ],
      [
        "getOpenPgpError()",
        "The goal of this method is to return an OpenPgp error if there is one, or else return null."
      ],
      [
        "createOpenPgpEncryptionErrorAnnotation(org.openintents.openpgp.OpenPgpError)",
        "The goal of this method is to create a `CryptoResultAnnotation` object with an `OPENPGP_ENCRYPTED_API_ERROR` error based on the `OpenPgpError` provided."
      ],
      [
        "createOpenPgpResultAnnotation(org.openintents.openpgp.OpenPgpDecryptionResult,org.openintents.openpgp.OpenPgpSignatureResult,android.app.PendingIntent,android.app.PendingIntent,com.fsck.k9.mail.internet.MimeBodyPart,boolean)",
        "The method creates a result annotation for OpenPGP decryption and signature verification with various pending intents and options."
      ],
      [
        "hasEncapsulatedResult()",
        "The method checks if there is an encapsulated result available and returns true if it is present."
      ],
      [
        "getOpenPgpPendingIntent()",
        "The method returns the PendingIntent associated with the OpenPGP encryption."
      ]
    ],
    "com.fsck.k9.mailstore.AttachmentViewInfo": [
      [
        "setContentAvailable()",
        "The method sets the content availability flag of an attachment view info to true."
      ],
      [
        "isContentAvailable()",
        "The method returns a boolean value that indicates whether the content of the attachment is available or not."
      ]
    ],
    "com.fsck.k9.mailstore.DatabasePreviewType": [
      [
        "fromPreviewType(com.fsck.k9.message.extractors.PreviewResult$PreviewType)",
        "The method maps a PreviewType enum value from an external library to its corresponding DatabasePreviewType enum value."
      ],
      [
        "getDatabaseValue()",
        "The goal of the `getDatabaseValue()` method is to return the value of the `databaseValue` property of the `DatabasePreviewType` enum."
      ],
      [
        "fromDatabaseValue(java.lang.String)",
        "The goal of the method is to return the `DatabasePreviewType` enum value corresponding to the given `databaseValue` string."
      ],
      [
        "getPreviewType()",
        "The goal of the method is to return the preview type of a database entry."
      ]
    ],
    "com.fsck.k9.mailstore.LocalFolder$MoreMessages": [
      [
        "fromDatabaseName(java.lang.String)",
        "The method maps a database name to a corresponding enum value of `MoreMessages` in the `LocalFolder` class."
      ],
      [
        "getDatabaseName()",
        "The method returns the name of the database for the local folder's more messages."
      ]
    ],
    "com.fsck.k9.mailstore.LocalMimeMessage": [
      [
        "getPartId()",
        "This method returns the ID of the message part."
      ],
      [
        "getMessage()",
        "The goal of this method is to return a LocalMessage object."
      ],
      [
        "getAccountUuid()",
        "The method returns the UUID of the account associated with the local MIME message."
      ]
    ],
    "com.fsck.k9.mailstore.StorageManager$HtcIncredibleStorageProvider": [
      [
        "getName(android.content.Context)",
        "The goal of the method is to return a string containing the name of the local storage provider specific to the HTC Incredible device."
      ],
      [
        "getId()",
        "The goal of the method is to return the ID associated with the HTC Incredible storage provider."
      ]
    ],
    "com.fsck.k9.mailstore.MessageHelper": [
      [
        "isCompletePartAvailable(com.fsck.k9.mail.Part)",
        "The goal of the method `isCompletePartAvailable` is to determine if the `Part` passed as a parameter, along with all of its nested parts, have their bodies fully available."
      ],
      [
        "createEmptyPart()",
        "The goal of this method is to create an empty `MimeBodyPart` object that can be used in email composition."
      ]
    ],
    "com.fsck.k9.mailstore.StoreSchemaDefinition$RealMigrationsHelper": [
      [
        "getContext()",
        "The method returns the Android context of the local mail store."
      ],
      [
        "getLocalStore()",
        "The method returns the instance of the local mail store."
      ],
      [
        "getStorage()",
        "The method returns the storage of a local email store."
      ],
      [
        "serializeFlags(java.util.List)",
        "The method serializes a list of flags into a string."
      ],
      [
        "getAccount()",
        "The method returns the account associated with the local mail store."
      ]
    ],
    "com.fsck.k9.mailstore.LockableDatabase": [
      [
        "execute(boolean,com.fsck.k9.mailstore.LockableDatabase$DbCallback)",
        "The goal of the `execute()` method is to execute a database callback in a shared context while taking care of locking the database storage, optionally starting a transaction and participating in any active transaction."
      ],
      [
        "open()",
        "The method opens the LockableDatabase for reading and writing and adds a listener to the StorageManager instance."
      ],
      [
        "recreate()",
        "The method recreates the database by deleting all data and schema."
      ],
      [
        "switchProvider(java.lang.String)",
        "The goal of the `switchProvider` method is to switch the database provider of the mail store database and move all the data to the new location."
      ],
      [
        "setStorageProviderId(java.lang.String)",
        "The goal of the method is to set the ID of the storage provider for the lockable database."
      ],
      [
        "getStorageProviderId()",
        "The method returns the storage provider ID of the lockable database."
      ],
      [
        "delete()",
        "The goal of this method is to delete the backing database, with the possibility of preserving files for backup purposes if the `delete` flag is set to `false`."
      ]
    ],
    "com.fsck.k9.mailstore.LocalFolder": [
      [
        "getMessagesByUids(java.util.List)",
        "The method returns a list of LocalMessages for the given UIDs."
      ],
      [
        "getName()",
        "The method returns the name of the current local mail folder."
      ],
      [
        "getMessages(int,int,java.util.Date,com.fsck.k9.mail.MessageRetrievalListener)",
        "The goal of this method is to retrieve a list of local messages within a specified range and earliest date, with an optional listener for progress updates."
      ],
      [
        "getMessage(java.lang.String)",
        "The `getMessage` method retrieves a specific email message from the local store based on its unique identifier."
      ],
      [
        "getUidFromMessageId(com.fsck.k9.mail.Message)",
        "The goal of this method is to throw a messaging exception indicating that `getUidFromMessageId` cannot be called on `LocalFolder`."
      ],
      [
        "save(com.fsck.k9.preferences.StorageEditor)",
        "The `save` method saves the display mode, sync mode, notify mode, push mode, isInTopGroup status, and isIntegrate status of a LocalFolder to the provided `StorageEditor`."
      ],
      [
        "setDisplayClass(com.fsck.k9.mailstore.FolderClass)",
        "The goal of this method is to set the display class of a local email folder and update the corresponding folder column with the new value."
      ],
      [
        "refresh(java.lang.String,com.fsck.k9.mailstore.LocalFolder$PreferencesHolder)",
        "The goal of the `refresh` method is to update the preferences of a given local folder based on the values stored in the associated `Storage`."
      ],
      [
        "getMessages(com.fsck.k9.mail.MessageRetrievalListener,boolean)",
        "The goal of this method is to retrieve a list of emails from the local folder, optionally including deleted ones, and notify a listener of the retrieval progress."
      ],
      [
        "addPartToMessage(com.fsck.k9.mailstore.LocalMessage,com.fsck.k9.mail.Part)",
        "The goal of this method is to add a given part to a given message and store it in the database."
      ],
      [
        "getSyncClass()",
        "This method returns the synchronization class of the local folder, which is either inherited or a custom class set by the user."
      ],
      [
        "delete(boolean)",
        "The method deletes the folder instance from the email database and deletes all message data from the disk."
      ],
      [
        "isOpen()",
        "The goal of the `isOpen()` method is to check whether the folder is currently open or not by returning a boolean value based on the folder's databaseId and name."
      ],
      [
        "create(com.fsck.k9.mailstore.FolderType)",
        "The method creates a new folder of a given type with a default display count."
      ],
      [
        "equals(java.lang.Object)",
        "The goal of the `equals(java.lang.Object)` method is to check whether the passed object is a `LocalFolder` instance and if yes, to compare its name with the name of the current object and return `true` if they are equal."
      ],
      [
        "setPushState(java.lang.String)",
        "The goal of this method is to update the push state of the local folder and its corresponding database column."
      ],
      [
        "changeUid(com.fsck.k9.mailstore.LocalMessage)",
        "The goal of the `changeUid` method is to update the stored UID of a given message to the UID in the message."
      ],
      [
        "getVisibleLimit()",
        "The method returns the visible limit for the number of messages displayed in the current folder."
      ],
      [
        "clearAllMessages()",
        "The goal of the `clearAllMessages()` method is to delete all messages from the local folder, including associated message data and threads."
      ],
      [
        "getAccountUuid()",
        "The method returns the UUID (Universally Unique Identifier) of the account associated with this LocalFolder."
      ],
      [
        "appendMessages(java.util.List)",
        "The `appendMessages` method appends a list of messages to the local folder, with functionality to replace existing messages with matching UID and is used for saving drafts and re-synchronizing updated server messages."
      ],
      [
        "setStatus(java.lang.String)",
        "The `setStatus` method updates the status column of a local mail folder with the given string value."
      ],
      [
        "exists()",
        "The goal of the `exists()` method is to check whether a folder with the given name exists in the local store and return `true` if it exists, `false` otherwise."
      ],
      [
        "getMode()",
        "The goal of the `getMode()` method is to return the read-write mode for a local mail folder."
      ],
      [
        "getDatabaseId()",
        "The `getDatabaseId()` method returns the database ID of the local folder."
      ],
      [
        "hashCode()",
        "The `hashCode()` method returns the hash code of the name of the LocalFolder object."
      ],
      [
        "getPushState()",
        "The goal of the `getPushState()` method is to return the push state of the local folder."
      ],
      [
        "getSignatureUse()",
        "The method returns whether the email account associated with the folder uses a signature for outgoing messages."
      ],
      [
        "setInTopGroup(boolean)",
        "The goal of this method is to update the \"top_group\" column of the local folder's database to indicate whether the folder should be displayed in the top level group."
      ],
      [
        "updateLastUid()",
        "The `updateLastUid()` method fetches the most recent numeric UID value in a folder to be used in determining the newness of messages."
      ],
      [
        "clearMessagesOlderThan(long)",
        "The method clears all messages in the folder that are older than a specified cutoff date."
      ],
      [
        "areMoreMessagesAvailable(int,java.util.Date)",
        "The method is supposed to check if there are more messages available in the folder based on the provided criteria."
      ],
      [
        "getRawSyncClass()",
        "The goal of the method is to return the `syncClass` of a `LocalFolder`."
      ],
      [
        "copyMessages(java.util.List,com.fsck.k9.mail.Folder)",
        "The method copies a list of email messages to a local folder and returns a map of the copied message IDs and their corresponding unique identifiers."
      ],
      [
        "setIntegrate(boolean)",
        "The method sets a flag indicating whether the folder should be integrated with the unified inbox and updates the corresponding column in the folder database."
      ],
      [
        "fetch(java.util.List,com.fsck.k9.mail.FetchProfile,com.fsck.k9.mail.MessageRetrievalListener)",
        "The method fetches a list of local messages with the given FetchProfile and notifies the provided listener of the progress and results."
      ],
      [
        "setMoreMessages(com.fsck.k9.mailstore.LocalFolder$MoreMessages)",
        "The method sets the value of moreMessages and updates the corresponding database column."
      ],
      [
        "storeSmallMessage(com.fsck.k9.mail.Message,java.lang.Runnable)",
        "The `storeSmallMessage` method stores a message and marks it as fully downloaded, while executing a specified runnable before setting the download flag."
      ],
      [
        "setLastSelectedFolderName(java.lang.String)",
        "The goal of the method is to set the last selected folder name for the account associated with the LocalFolder."
      ],
      [
        "isIntegrate()",
        "To return a boolean indicating whether the email folder is integrated with the system or not."
      ],
      [
        "getNotifyClass()",
        "The goal of the method is to return the appropriate `FolderClass` for notifications based on whether it is inherited or explicitly specified."
      ],
      [
        "getAllMessageUids()",
        "The `getAllMessageUids()` method returns a list of UIDs for all non-empty, non-deleted messages in the folder, ordered by date."
      ],
      [
        "getOldestMessageDate()",
        "This method retrieves the date of the oldest message in the folder from the database."
      ],
      [
        "setFlags(java.util.List,java.util.Set,boolean)",
        "The method sets specified flags for a list of email messages in the local folder."
      ],
      [
        "getMessageCount()",
        "The `getMessageCount()` method returns the number of non-deleted messages in the folder."
      ],
      [
        "save()",
        "The goal of the `save()` method is to save changes made to the LocalFolder and commit them to the StorageEditor."
      ],
      [
        "setNotifyClass(com.fsck.k9.mailstore.FolderClass)",
        "The goal of this method is to update the notification class value for the folder and update the corresponding database column."
      ],
      [
        "getMoreMessages()",
        "The method returns an instance of the class `LocalFolder.MoreMessages`."
      ],
      [
        "getAllMessagesAndEffectiveDates()",
        "The goal of this method is to retrieve all messages and their effective dates from the local storage database for a given email folder."
      ],
      [
        "setPushClass(com.fsck.k9.mailstore.FolderClass)",
        "The goal of the method is to set the push class of a local folder and update the corresponding database column."
      ],
      [
        "close()",
        "The goal of the `close()` method is to mark the databaseId of the local folder as -1."
      ],
      [
        "delete()",
        "The `delete()` method removes the settings associated with a local email folder."
      ],
      [
        "purgeToVisibleLimit(com.fsck.k9.mailstore.MessageRemovalListener)",
        "The `purgeToVisibleLimit` method removes all messages from the folder above the visible limit while avoiding issues with active searches."
      ],
      [
        "open(int)",
        "The method `open()` is used to open a mailbox folder in a specified read or write mode, and creates a new folder if it does not already exist."
      ],
      [
        "getRawPushClass()",
        "The goal of the method is to return the push class of a local mail folder."
      ],
      [
        "setLastChecked(long)",
        "The method sets the last checked time for a local mail folder and updates the corresponding database column."
      ],
      [
        "getMessageUidById(long)",
        "The method retrieves the UID of the email message with the given ID from the local database."
      ],
      [
        "setVisibleLimit(int)",
        "The method sets the maximum number of messages to be displayed in the folder view and updates the folder's visible limit column accordingly."
      ],
      [
        "isInTopGroup()",
        "To determine if the current folder is in the top group of folders in the email application."
      ],
      [
        "getLastUid()",
        "The method returns the last UID (unique identifier) of the messages in the local folder."
      ],
      [
        "setSyncClass(com.fsck.k9.mailstore.FolderClass)",
        "The method sets the synchronization class of a local folder and updates the corresponding column in the database."
      ],
      [
        "moveMessages(java.util.List,com.fsck.k9.mail.Folder)",
        "The `moveMessages` method moves messages from one folder to another within a local mail storage system and returns a map of the old and new UIDs of the moved messages."
      ],
      [
        "getDisplayClass()",
        "The method returns the display class of the folder."
      ],
      [
        "create(com.fsck.k9.mailstore.FolderType,int)",
        "The method creates a local folder with a given type and visible limit."
      ],
      [
        "setFlags(java.util.Set,boolean)",
        "The method sets a given set of flags for all the messages in the folder to either a true or false value."
      ],
      [
        "syncRemoteDeletions()",
        "The goal of the `syncRemoteDeletions()` method is to synchronize remote deletions with the local folder, by calling the same method on the associated email account."
      ],
      [
        "getMessages(com.fsck.k9.mail.MessageRetrievalListener)",
        "The goal of the method is to retrieve a list of local messages for the given folder with the option to notify a message retrieval listener."
      ],
      [
        "hasMoreMessages()",
        "The goal of the method is to check if there are more messages available in the folder or not."
      ],
      [
        "getMessagesByReference(java.util.List)",
        "The method returns a list of messages based on their references to a specific account and folder."
      ],
      [
        "setLastPush(long)",
        "The method sets the time of the last successful push of new messages to the folder and updates it in the folder database."
      ],
      [
        "getUnreadMessageCount()",
        "The goal of the `getUnreadMessageCount()` method is to retrieve the number of unread messages in the local folder."
      ],
      [
        "getRawNotifyClass()",
        "The method returns the notify class of the local folder."
      ],
      [
        "destroyMessages(java.util.List)",
        "The `destroyMessages` method destructively removes the specified list of email messages from the local folder's stored messages."
      ],
      [
        "getPushClass()",
        "The goal of this method is to return the push class of a local email folder."
      ],
      [
        "getFlaggedMessageCount()",
        "The goal of the `getFlaggedMessageCount()` method is to retrieve the number of messages that are flagged in the local folder."
      ],
      [
        "extractNewMessages(java.util.List)",
        "The `extractNewMessages()` method takes a list of messages, checks if each message is new, and returns a list of only the new messages."
      ]
    ],
    "com.fsck.k9.mailstore.MessageRemovalListener": [
      [
        "messageRemoved(com.fsck.k9.mail.Message)",
        "The method is called when a message is removed from the mail store, and it takes the removed message as an argument."
      ]
    ],
    "com.fsck.k9.mailstore.TempFileBody": [
      [
        "getInputStream()",
        "This method returns an input stream for reading the contents of a temporary file that contains the body of an email message."
      ],
      [
        "getSize()",
        "The `getSize()` method returns the size of the file associated with the `TempFileBody` object."
      ]
    ],
    "com.fsck.k9.mailstore.MimePartStreamParser$PartBuilder": [
      [
        "epilogue(java.io.InputStream)",
        "The `epilogue` method sets the epilogue of a MIME multipart message in the `MimePartStreamParser$PartBuilder` class."
      ],
      [
        "startHeader()",
        "The goal of this method is to do nothing and silently pass over the start of a header in a MIME part."
      ],
      [
        "startBodyPart()",
        "The goal of the `startBodyPart()` method is to create a new `BodyPart`, add it to the current `Multipart` and make it the new working `BodyPart` on the stack."
      ],
      [
        "endMessage()",
        "To remove the current message from the stack."
      ],
      [
        "endHeader()",
        "The method `endHeader()` does nothing and serves as a placeholder."
      ],
      [
        "body(org.apache.james.mime4j.stream.BodyDescriptor,java.io.InputStream)",
        "The goal of this method is to set the body of a MIME part with the given input stream and transfer encoding."
      ],
      [
        "endBodyPart()",
        "The method removes the current MIME body part from the stack."
      ],
      [
        "startMultipart(org.apache.james.mime4j.stream.BodyDescriptor)",
        "The `startMultipart` method initializes a new `MimeMultipart` object and sets it as the body of the current mail part."
      ],
      [
        "raw(java.io.InputStream)",
        "The goal of the method is to throw an `IllegalStateException` indicating that the method is not implemented."
      ],
      [
        "preamble(java.io.InputStream)",
        "The goal of this method is to extract the preamble of a MIME multipart message and set it as the preamble of the current MimeMultipart object being built."
      ],
      [
        "endMultipart()",
        "The goal of the method is to end the current multipart stream by popping the top element from the stack."
      ],
      [
        "startMessage()",
        "The `startMessage()` method is used to handle the start of a new message within a MIME stream, creating a new `MimeMessage` and adding it as a child of the current part in the stack."
      ],
      [
        "field(org.apache.james.mime4j.stream.Field)",
        "The method adds a MIME field to the current MIME part being built by adding a raw header to the part with the given name and raw value."
      ]
    ],
    "com.fsck.k9.mailstore.LockableDatabase$SchemaDefinition": [
      [
        "getVersion()",
        "The goal of the method is to return the version number of the schema."
      ],
      [
        "doDbUpgrade(android.database.sqlite.SQLiteDatabase)",
        "The goal of the method is to perform a schema upgrade on an SQLite database."
      ]
    ],
    "com.fsck.k9.mailstore.MessageViewInfoExtractor": [
      [
        "extractMessageForView(com.fsck.k9.mail.Message,com.fsck.k9.ui.crypto.MessageCryptoAnnotations)",
        "The goal of the `extractMessageForView` method is to extract information from a given email message for display purposes, including any necessary decryption and annotations related to encryption."
      ],
      [
        "getInstance()",
        "The `getInstance()` method returns an instance of the `MessageViewInfoExtractor` class, which extracts information for displaying email messages."
      ]
    ],
    "com.fsck.k9.mailstore.StorageManager$InternalStorageProvider": [
      [
        "getRoot(android.content.Context)",
        "The method returns the root directory of the internal storage provider."
      ],
      [
        "isReady(android.content.Context)",
        "The method returns true indicating that the internal storage provider is ready."
      ],
      [
        "getDatabase(android.content.Context,java.lang.String)",
        "The method returns a file object representing the path to a database file associated with the given context and database name."
      ],
      [
        "getName(android.content.Context)",
        "The goal of the method is to return the name of the internal storage provider as a string."
      ],
      [
        "isSupported(android.content.Context)",
        "The method always returns true without checking whether the provided context supports the internal storage provider, which renders the method useless."
      ],
      [
        "getAttachmentDirectory(android.content.Context,java.lang.String)",
        "The method returns the file path of the directory where attachments are stored in the context's database path."
      ],
      [
        "init(android.content.Context)",
        "The goal of the method is to initialize the InternalStorageProvider with the root directory \"/\" of the device's internal storage."
      ],
      [
        "getId()",
        "This method returns the identifier of the internal storage provider."
      ]
    ],
    "com.fsck.k9.mailstore.MessageViewInfo": [
      [
        "createWithErrorState(com.fsck.k9.mail.Message,boolean)",
        "The method creates a new `MessageViewInfo` object with an error state and incomplete message information."
      ]
    ],
    "com.fsck.k9.mailstore.AttachmentResolver": [
      [
        "getAttachmentUriForContentId(java.lang.String)",
        "The goal of the `getAttachmentUriForContentId` method is to retrieve the attachment URI for a given content ID."
      ],
      [
        "createFromPart(com.fsck.k9.mail.Part)",
        "This method creates an `AttachmentResolver` object from a given `Part` by extracting attachment information and building a map of Content-ID to attachment URIs."
      ]
    ],
    "com.fsck.k9.mailstore.DeferredFileBody": [
      [
        "writeTo(java.io.OutputStream)",
        "The goal of this method is to write the content of an `InputStream` to an `OutputStream`."
      ],
      [
        "getEncoding()",
        "This method returns the encoding of the deferred file body."
      ],
      [
        "setEncoding(java.lang.String)",
        "The goal of the method is to throw an exception when attempting to re-encode a DecryptedTempFileBody."
      ],
      [
        "getSize()",
        "The goal of the `getSize()` method is to return the size of the file or data associated with an instance of `DeferredFileBody`."
      ],
      [
        "getInputStream()",
        "This method returns an `InputStream` for reading the decrypted data stored in a file or memory."
      ],
      [
        "getFile()",
        "The method returns a File object, creating it if necessary by writing the contents of the email body from memory to a file."
      ],
      [
        "getOutputStream()",
        "The goal of the method is to provide an OutputStream for writing byte data to a deferred file or a memory-backed buffer with a threshold limit."
      ]
    ],
    "com.fsck.k9.mailstore.FileBackedBody": [
      [
        "getInputStream()",
        "The method returns an input stream for reading the contents of a file."
      ],
      [
        "writeTo(java.io.OutputStream)",
        "The goal of the `writeTo` method is to copy the input stream obtained from a file to the output stream provided as a parameter."
      ],
      [
        "getEncoding()",
        "The method returns the character encoding of the email body stored in a file."
      ],
      [
        "getSize()",
        "This method returns the size of the file associated with the body."
      ]
    ],
    "com.fsck.k9.mailstore.LocalBodyPart": [
      [
        "getAccountUuid()",
        "The method returns the account UUID associated with the email message's body part."
      ],
      [
        "getMessage()",
        "The goal of the method is to return the `LocalMessage` associated with the `LocalBodyPart`."
      ],
      [
        "getSize()",
        "The method returns the size of the `LocalBodyPart` object."
      ],
      [
        "getPartId()",
        "The method returns the ID of the message part."
      ]
    ],
    "com.fsck.k9.mailstore.StorageManager$FixedStorageProviderBase": [
      [
        "init(android.content.Context)",
        "The goal of the `init(android.content.Context)` method is to set the root and application directory paths for storing email data."
      ],
      [
        "getAttachmentDirectory(android.content.Context,java.lang.String)",
        "The method returns a File object representing the attachment directory for a given ID."
      ],
      [
        "getDatabase(android.content.Context,java.lang.String)",
        "The goal of this method is to return a file object representing the path of a database file with a given ID within a specified application directory."
      ],
      [
        "isSupported(android.content.Context)",
        "The method checks if the root directory is a directory and if the vendor is supported."
      ],
      [
        "isReady(android.content.Context)",
        "The `isReady` method checks if the specified root file is ready for use as a fixed storage provider by checking if it is a mount point and if the external storage is mounted."
      ],
      [
        "getRoot(android.content.Context)",
        "The method returns the root file for the storage provider."
      ]
    ],
    "com.fsck.k9.mailstore.StorageManager$StorageProvider": [
      [
        "init(android.content.Context)",
        "The method initializes the storage provider with a given Android context."
      ],
      [
        "getRoot(android.content.Context)",
        "This method retrieves the root directory of the underlying storage."
      ],
      [
        "getAttachmentDirectory(android.content.Context,java.lang.String)",
        "The method returns a File object corresponding to the chosen attachment directory."
      ],
      [
        "getName(android.content.Context)",
        "The method returns a user displayable and localized name for the storage provider."
      ],
      [
        "isSupported(android.content.Context)",
        "The goal of the method is to determine whether this provider supports the current device in order to prevent invoking it again if it is incompatible with the device."
      ],
      [
        "isReady(android.content.Context)",
        "The method checks if the underlying storage is ready for read/write operations."
      ],
      [
        "getDatabase(android.content.Context,java.lang.String)",
        "The method returns a File object representing the chosen email database file, which may or may not exist on the file system."
      ],
      [
        "getId()",
        "The goal of the method is to retrieve a unique identifier for the storage provider implementation."
      ]
    ],
    "com.fsck.k9.mailstore.LocalMessage": [
      [
        "getDatabaseId()",
        "The method returns the database ID of the local message."
      ],
      [
        "setFlag(com.fsck.k9.mail.Flag,boolean)",
        "The `setFlag` method sets a flag for a local message and updates its corresponding record in the database."
      ],
      [
        "getPreviewType()",
        "The method returns the preview type of a local message."
      ],
      [
        "getFolder()",
        "The goal of this method is to return the local folder where the message is stored."
      ],
      [
        "equals(java.lang.Object)",
        "The goal of this method is to compare two `LocalMessage` objects for equality based on their account UUID and other attributes inherited from the `Message` class."
      ],
      [
        "clone()",
        "The `clone()` method creates a shallow copy of a `LocalMessage` object."
      ],
      [
        "setSubject(java.lang.String)",
        "The goal of the `setSubject` method is to set the subject of the email message represented by the `LocalMessage` instance and mark the header as needing an update."
      ],
      [
        "getThreadId()",
        "The method returns the thread id of a local email message."
      ],
      [
        "getMessagePartId()",
        "The method returns the message part ID of a local email message."
      ],
      [
        "hasAttachments()",
        "The method returns whether the LocalMessage has attachments or not."
      ],
      [
        "hashCode()",
        "The goal of this method is to generate a hash code for the `LocalMessage` object that includes the hash code of its superclass and its account UUID."
      ],
      [
        "getUri()",
        "The goal of the method is to return a URI that uniquely identifies a local email message."
      ],
      [
        "setMessageId(java.lang.String)",
        "The goal of this method is to set the message ID of the local message and mark the header as needing an update."
      ],
      [
        "getAccount()",
        "The goal of the `getAccount()` method is to return the `Account` instance associated with the `LocalMessage` instance."
      ],
      [
        "getSubject()",
        "This method returns the subject of a local message."
      ],
      [
        "writeTo(java.io.OutputStream)",
        "The method writes the message to the specified OutputStream and updates the header if needed."
      ],
      [
        "getPreview()",
        "This method retrieves the preview of the email message."
      ],
      [
        "debugClearLocalData()",
        "The goal of the `debugClearLocalData()` method is to clear local data associated with a message in a debug build."
      ],
      [
        "setRecipients(com.fsck.k9.mailstore.RecipientType,com.fsck.k9.mail.Address[])",
        "The goal of the `setRecipients` method is to set the recipients (TO, CC, or BCC) of a local email message and update the message header."
      ],
      [
        "setReplyTo(com.fsck.k9.mail.Address[])",
        "The method sets the reply-to addresses for the email message and updates the header accordingly."
      ],
      [
        "setFlagInternal(com.fsck.k9.mail.Flag,boolean)",
        "The method sets or removes a flag on the local email message."
      ],
      [
        "destroy()",
        "The goal of the method is to completely remove a message from the local database."
      ],
      [
        "setUid(java.lang.String)",
        "The `setUid` method sets the unique identifier of the email message and resets the message reference."
      ],
      [
        "getRootId()",
        "The method returns the root message ID of a LocalMessage."
      ],
      [
        "makeMessageReference()",
        "The method returns a `MessageReference` object that uniquely identifies the message within the account and folder it belongs to."
      ],
      [
        "getMimeType()",
        "The method returns the MIME type of the email message."
      ],
      [
        "setFrom(com.fsck.k9.mail.Address)",
        "The goal of this method is to set the sender address of the email message and update the header accordingly."
      ]
    ],
    "com.fsck.k9.mailstore.MimePartStreamParser": [
      [
        "parse(com.fsck.k9.mailstore.util.FileFactory,java.io.InputStream)",
        "This method parses a MIME message from an input stream and returns the root body part."
      ]
    ],
    "com.fsck.k9.mailstore.StorageManager$StorageListener": [
      [
        "onMount(java.lang.String)",
        "The method `onMount(java.lang.String)` is invoked when a storage with read/write access is mounted and its provider ID is provided as a parameter."
      ],
      [
        "onUnmount(java.lang.String)",
        "The method is invoked when a storage is about to be unmounted and takes the identifier of the storage provider as a parameter."
      ]
    ],
    "com.fsck.k9.mailstore.LocalStore$BatchSetSelection": [
      [
        "getListItem(int)",
        "The method returns the specified element from a list of strings."
      ],
      [
        "getListSize()",
        "The method returns the size of the argument list."
      ],
      [
        "doDbWork(android.database.sqlite.SQLiteDatabase,java.lang.String,java.lang.String[])",
        "The method executes an SQL statement with a partial selection string and argument list on a given SQLiteDatabase instance."
      ],
      [
        "postDbWork()",
        "The `postDbWork()` method is executed after each invocation of `doDbWork()` and its purpose is to perform actions on the database following the transaction commit."
      ]
    ],
    "com.fsck.k9.mailstore.LocalPart": [
      [
        "getPartId()",
        "This method retrieves the ID of the email attachment or message part."
      ],
      [
        "getSize()",
        "The method `getSize()` returns the size of the email message."
      ],
      [
        "getMessage()",
        "The method returns the local message associated with the local part."
      ],
      [
        "getAccountUuid()",
        "The method returns the UUID of the account to which the local part belongs."
      ]
    ],
    "com.fsck.k9.mailstore.StorageManager": [
      [
        "getDefaultProviderId()",
        "The method returns the ID of the first email provider in the list of providers."
      ],
      [
        "onAfterUnmount(java.lang.String)",
        "The method is called after the storage path is unmounted and unlocks the write lock for the storage provider, updates synchronization aid and enables K9 services."
      ],
      [
        "addListener(com.fsck.k9.mailstore.StorageManager$StorageListener)",
        "The `addListener` method adds a listener for storage events to the storage manager."
      ],
      [
        "onBeforeUnmount(java.lang.String)",
        "The method is called before unmounting a storage path and notifies listeners that it is being unmounted."
      ],
      [
        "getDatabase(java.lang.String,java.lang.String)",
        "The goal of this method is to retrieve the database file for the given provider ID."
      ],
      [
        "removeListener(com.fsck.k9.mailstore.StorageManager$StorageListener)",
        "The method removes a storage listener from the list of listeners receiving storage updates."
      ],
      [
        "getAttachmentDirectory(java.lang.String,java.lang.String)",
        "The method returns the attachment directory for a given provider ID."
      ],
      [
        "getInstance(android.content.Context)",
        "The goal of this method is to create and return a single instance of `com.fsck.k9.mailstore.StorageManager` class for a given `android.content.Context`."
      ],
      [
        "isReady(java.lang.String)",
        "The `isReady` method returns a boolean indicating whether the specified storage provider is ready for read/write operations."
      ],
      [
        "unlockProvider(java.lang.String)",
        "The `unlockProvider` method unlocks a read lock for a given provider in the `StorageManager` class."
      ],
      [
        "isMountPoint(java.io.File)",
        "The goal of the method is to determine whether a specified file matches a filesystem root."
      ],
      [
        "lockProvider(java.lang.String)",
        "The goal of the `lockProvider` method is to lock the underlying storage to prevent concurrent unmount."
      ],
      [
        "onMount(java.lang.String,boolean)",
        "The method notifies the relevant listeners and resets the mail service if necessary when a storage path is mounted."
      ],
      [
        "getAvailableProviders()",
        "The method returns a map of available storage providers names and their IDs."
      ]
    ],
    "com.fsck.k9.mailstore.BinaryAttachmentBody": [
      [
        "setEncoding(java.lang.String)",
        "The goal of the method is to set the encoding of the binary attachment body."
      ],
      [
        "writeTo(java.io.OutputStream)",
        "The `writeTo(java.io.OutputStream)` method writes the contents of a binary email attachment to the specified output stream, potentially encoding the data in Base64 or Quoted-Printable before writing."
      ],
      [
        "getInputStream()",
        "The method returns an input stream to read the content of the binary attachment body."
      ],
      [
        "getEncoding()",
        "The method returns the encoding of the binary attachment body."
      ]
    ],
    "com.fsck.k9.mailstore.StoreSchemaDefinition": [
      [
        "getVersion()",
        "This method returns the version of the database used by the local mail store."
      ],
      [
        "doDbUpgrade(android.database.sqlite.SQLiteDatabase)",
        "The `doDbUpgrade` method upgrades the database schema of the K-9 Mail app, with error handling that resets the database to its initial state if an exception occurs during the upgrade process."
      ]
    ]
  },
  "com.fsck.k9.mailstore.migrations": {
    "com.fsck.k9.mailstore.migrations.MigrationTo61": [
      [
        "removeErrorsFolder(android.database.sqlite.SQLiteDatabase)",
        "The `removeErrorsFolder` method removes the folder named 'K9mail-errors' from the provided SQLiteDatabase instance."
      ]
    ],
    "com.fsck.k9.mailstore.migrations.MigrationTo44": [
      [
        "addMessagesThreadingColumns(android.database.sqlite.SQLiteDatabase)",
        "The goal of this method is to add four new columns (`thread_root`, `thread_parent`, `normalized_subject_hash`, and `empty`) to the `messages` table of a SQLite database."
      ]
    ],
    "com.fsck.k9.mailstore.migrations.MigrationTo54": [
      [
        "addPreviewTypeColumn(android.database.sqlite.SQLiteDatabase)",
        "This method adds a new column to the `messages` table in the given SQLite database and sets its default value to `\"none\"`, then updates the value of the newly added column to `\"text\"` for all messages that have a non-null value in the `preview` column."
      ]
    ],
    "com.fsck.k9.mailstore.migrations.MigrationTo42": [
      [
        "from41MoveFolderPreferences(com.fsck.k9.mailstore.migrations.MigrationsHelper)",
        "The goal of the `from41MoveFolderPreferences` method is to migrate folder preferences from a previous version of the database to version 42 in the K-9 Mail app."
      ]
    ],
    "com.fsck.k9.mailstore.migrations.MigrationTo37": [
      [
        "addAttachmentsContentDispositionColumn(android.database.sqlite.SQLiteDatabase)",
        "The goal of this method is to add a new column named \"content_disposition\" of type \"TEXT\" to the \"attachments\" table in a SQLite database."
      ]
    ],
    "com.fsck.k9.mailstore.migrations.MigrationTo60": [
      [
        "migratePendingCommands(android.database.sqlite.SQLiteDatabase)",
        "The goal of this method is to migrate pending commands from an old table format to a new format in the given SQLite database."
      ]
    ],
    "com.fsck.k9.mailstore.migrations.MigrationTo40": [
      [
        "addMimeTypeColumn(android.database.sqlite.SQLiteDatabase)",
        "The goal of this method is to add a new column for MIME type to the \"messages\" table in an SQLite database."
      ]
    ],
    "com.fsck.k9.mailstore.migrations.MigrationTo32": [
      [
        "updateDeletedColumnFromFlags(android.database.sqlite.SQLiteDatabase)",
        "The goal of this method is to update the `deleted` column of the `messages` table in the given SQLite database by setting it to 1 for rows whose `flags` column contains the string \"DELETED\"."
      ]
    ],
    "com.fsck.k9.mailstore.migrations.MigrationTo52": [
      [
        "addMoreMessagesColumnToFoldersTable(android.database.sqlite.SQLiteDatabase)",
        "The goal of this method is to add a new column named `more_messages` to the `folders` table in a SQLite database with a default value of \"unknown\"."
      ]
    ],
    "com.fsck.k9.mailstore.migrations.MigrationTo36": [
      [
        "addAttachmentsContentIdColumn(android.database.sqlite.SQLiteDatabase)",
        "The goal of this method is to add a new column called `content_id` to the `attachments` table of the given SQLite database."
      ]
    ],
    "com.fsck.k9.mailstore.migrations.MigrationTo51": [
      [
        "db51MigrateMessageFormat(android.database.sqlite.SQLiteDatabase,com.fsck.k9.mailstore.migrations.MigrationsHelper)",
        "This method converts from the old message table structure to the new one and recreates the MIME structure of the original emails using the available data such as the message content, message headers, and attachments."
      ]
    ],
    "com.fsck.k9.mailstore.migrations.MigrationTo35": [
      [
        "updateRemoveXNoSeenInfoFlag(android.database.sqlite.SQLiteDatabase)",
        "The goal of this method is to update a SQLite database by replacing the flag \"X_NO_SEEN_INFO\" with \"X_BAD_FLAG\" in the \"messages\" table."
      ]
    ],
    "com.fsck.k9.mailstore.migrations.MigrationTo45": [
      [
        "changeThreadingIndexes(android.database.sqlite.SQLiteDatabase)",
        "The goal of the `changeThreadingIndexes` method is to modify the threading indexes of a SQLite database used by K-9 Mail in order to improve its performance."
      ]
    ],
    "com.fsck.k9.mailstore.migrations.MigrationTo33": [
      [
        "addPreviewColumn(android.database.sqlite.SQLiteDatabase)",
        "The goal of the `addPreviewColumn` method is to add a new column named \"preview\" of type TEXT to the \"messages\" table in the provided SQLiteDatabase object, if it doesn't already exist."
      ]
    ],
    "com.fsck.k9.mailstore.migrations.MigrationTo43": [
      [
        "fixOutboxFolders(android.database.sqlite.SQLiteDatabase,com.fsck.k9.mailstore.migrations.MigrationsHelper)",
        "The method renames a folder and moves messages from that folder to another in order to fix issues with outbox folders in a mail storage system during migration to version 43."
      ]
    ],
    "com.fsck.k9.mailstore.migrations.MigrationTo46": [
      [
        "addMessagesFlagColumns(android.database.sqlite.SQLiteDatabase,com.fsck.k9.mailstore.migrations.MigrationsHelper)",
        "The method adds flag columns for read, flagged, answered, and forwarded messages to the message table in the given database and sets the appropriate flags based on the values in the existing flags column."
      ]
    ],
    "com.fsck.k9.mailstore.migrations.MigrationTo39": [
      [
        "headersPruneOrphans(android.database.sqlite.SQLiteDatabase)",
        "The goal of this method is to prune orphaned data from the \"headers\" table of the given SQLite database."
      ]
    ],
    "com.fsck.k9.mailstore.migrations.MigrationTo51$MimeStructureState": [
      [
        "applyValues(android.content.ContentValues)",
        "The method applies values to the current state of the MIME structure and stores them in the given `ContentValues` object."
      ],
      [
        "popParent()",
        "The `popParent()` method returns a new `MimeStructureState` object with the parent ID set to the previous parent ID, effectively undoing the addition of a new parent node to the MIME structure."
      ],
      [
        "nextMultipartChild(long)",
        "The goal of the method is to advance the state of the current multipart child and return the next MimeStructureState."
      ],
      [
        "getNewRootState()",
        "The goal of this method is to return a new instance of `MimeStructureState` with default values."
      ],
      [
        "nextChild(long)",
        "The method `nextChild(long)` returns a new `MimeStructureState` object representing the next child of the current `MimeStructureState`."
      ]
    ],
    "com.fsck.k9.mailstore.migrations.MigrationsHelper": [
      [
        "getLocalStore()",
        "The goal of the method is to return a reference to the LocalStore object in the mailstore package."
      ],
      [
        "getStorage()",
        "This method returns the storage object for accessing preferences in K-9 Mail."
      ],
      [
        "getContext()",
        "The goal of the method is to return the Android context associated with the migrations helper."
      ],
      [
        "serializeFlags(java.util.List)",
        "The `serializeFlags` method serializes a list of mail flags into a string representation."
      ],
      [
        "getAccount()",
        "The `getAccount()` method returns an instance of `com.fsck.k9.Account`."
      ]
    ],
    "com.fsck.k9.mailstore.migrations.MigrationTo48": [
      [
        "updateThreadsSetRootWhereNull(android.database.sqlite.SQLiteDatabase)",
        "The goal of this method is to update the \"threads\" table in a SQLite database by setting the root column to the id column for any records where the root column is null, and to create a trigger to ensure this is done automatically for any new records inserted into the table."
      ]
    ],
    "com.fsck.k9.mailstore.migrations.MigrationTo53": [
      [
        "removeNullValuesFromEmptyColumnInMessagesTable(android.database.sqlite.SQLiteDatabase)",
        "The goal of the `removeNullValuesFromEmptyColumnInMessagesTable` method is to update the `empty` column in the `messages` table of a SQLite database by setting all null values to 0."
      ]
    ],
    "com.fsck.k9.mailstore.migrations.MigrationTo50": [
      [
        "foldersAddNotifyClassColumn(android.database.sqlite.SQLiteDatabase,com.fsck.k9.mailstore.migrations.MigrationsHelper)",
        "The method adds a new column named \"notify_class\" to the \"folders\" table in the given SQLiteDatabase, sets a default value for the column, and updates the \"notify_class\" value for the inbox folder of the account."
      ]
    ],
    "com.fsck.k9.mailstore.migrations.MigrationTo41": [
      [
        "db41FoldersAddClassColumns(android.database.sqlite.SQLiteDatabase)",
        "The goal of the method `db41FoldersAddClassColumns` is to add several columns (integrate, top_group, poll_class, push_class, and display_class) to the \"folders\" table in a SQLite database."
      ],
      [
        "db41UpdateFolderMetadata(android.database.sqlite.SQLiteDatabase,com.fsck.k9.mailstore.migrations.MigrationsHelper)",
        "The goal of `db41UpdateFolderMetadata` is to update the folder metadata in a SQLiteDatabase to version 41 of the app's mailstore."
      ]
    ],
    "com.fsck.k9.mailstore.migrations.MigrationTo49": [
      [
        "createMsgCompositeIndex(android.database.sqlite.SQLiteDatabase)",
        "The goal of the method is to create a composite index on the \"messages\" table in the database with the specified columns."
      ]
    ],
    "com.fsck.k9.mailstore.migrations.Migrations": [
      [
        "upgradeDatabase(android.database.sqlite.SQLiteDatabase,com.fsck.k9.mailstore.migrations.MigrationsHelper)",
        "This method upgrades the SQLite database used by K-9 Mail to the latest version by applying a series of database migration steps."
      ]
    ],
    "com.fsck.k9.mailstore.migrations.MigrationTo47": [
      [
        "createThreadsTable(android.database.sqlite.SQLiteDatabase)",
        "The method creates a new 'threads' table, populates it with data from an existing 'messages' table, and removes old thread-related columns from the 'messages' table."
      ]
    ],
    "com.fsck.k9.mailstore.migrations.MigrationTo31": [
      [
        "changeMsgFolderIdDeletedDateIndex(android.database.sqlite.SQLiteDatabase)",
        "The method changes the index of the \"messages\" table in a SQLite database by dropping an existing index and creating a new one on the \"folder_id\", \"deleted\", and \"internal_date\" columns."
      ]
    ],
    "com.fsck.k9.mailstore.migrations.MigrationTo30": [
      [
        "addDeletedColumn(android.database.sqlite.SQLiteDatabase)",
        "The goal of this method is to add a \"deleted\" column to the \"messages\" table in a SQLite database if it doesn't already exist."
      ]
    ],
    "com.fsck.k9.mailstore.migrations.MigrationTo34": [
      [
        "addFlaggedCountColumn(android.database.sqlite.SQLiteDatabase)",
        "The goal of the method is to add a new column called `flagged_count` with a default value of 0 to the `folders` table in the provided SQLite database."
      ]
    ]
  },
  "com.fsck.k9.mailstore.util": {
    "com.fsck.k9.mailstore.util.DeferredFileOutputStream": [
      [
        "getData()",
        "The method returns the byte array of data stored in the ByteArrayOutputStream."
      ],
      [
        "getFile()",
        "The method returns the output file of the `DeferredFileOutputStream`, throwing an `IllegalStateException` if the stream is memory-backed."
      ]
    ],
    "com.fsck.k9.mailstore.util.FileFactory": [
      [
        "createFile()",
        "The `createFile()` method of interface `com.fsck.k9.mailstore.util.FileFactory` creates a new file and returns a `java.io.File` object representing that file."
      ]
    ],
    "com.fsck.k9.mailstore.util.FlowedMessageUtils": [
      [
        "deflow(java.lang.String,boolean)",
        "The `deflow` method decodes a text that was previously wrapped using \"format=flowed\" and returns the original message."
      ],
      [
        "flow(java.lang.String,boolean)",
        "The method encodes text using standard flowed format."
      ],
      [
        "flow(java.lang.String,boolean,int)",
        "The `flow` method is used to re-flow text according to the RFC2646 specification."
      ],
      [
        "isAlphaChar(java.lang.String,int)",
        "The goal of the `isAlphaChar` method is to check whether a character at a given index of a string is a part of a word according to the RFC standard."
      ]
    ]
  },
  "com.fsck.k9.message": {
    "com.fsck.k9.message.IdentityHeaderBuilder": [
      [
        "setQuoteTextMode(com.fsck.k9.message.QuotedTextMode)",
        "The method sets the quoted text mode for an email message and returns the modified `IdentityHeaderBuilder` object."
      ],
      [
        "setIdentity(com.fsck.k9.Identity)",
        "The goal of this method is to set the identity of the sender of an email message."
      ],
      [
        "setMessageFormat(com.fsck.k9.message.SimpleMessageFormat)",
        "The method sets the message format for the identity headers of an email message."
      ],
      [
        "setQuotedHtmlContent(com.fsck.k9.message.quote.InsertableHtmlContent)",
        "The method sets the quoted HTML content of an email message's identity header."
      ],
      [
        "setCursorPosition(int)",
        "This method sets the cursor position in the IdentityHeaderBuilder object."
      ],
      [
        "setSignature(java.lang.String)",
        "The goal of the method is to set the signature of the IdentityHeaderBuilder object and return the object."
      ],
      [
        "build()",
        "The `build()` method generates a URL-encoded representation of metadata about a draft message, including its length, format, and identity, in order to be used upon loading the draft for composition."
      ],
      [
        "setIdentityChanged(boolean)",
        "The method sets a boolean flag indicating whether the identity in the message has been changed."
      ],
      [
        "setMessageReference(com.fsck.k9.activity.MessageReference)",
        "The method sets the message reference for the identity header builder."
      ],
      [
        "setQuoteStyle(com.fsck.k9.Account$QuoteStyle)",
        "The method sets the quote style of the email message."
      ],
      [
        "setBodyPlain(com.fsck.k9.mail.internet.TextBody)",
        "The method sets the plain text body for the email message."
      ],
      [
        "setBody(com.fsck.k9.mail.internet.TextBody)",
        "This method sets the body of an email message for the identity of the message sender."
      ],
      [
        "setSignatureChanged(boolean)",
        "The goal of the `setSignatureChanged(boolean)` method is to set the `signatureChanged` boolean variable in the `IdentityHeaderBuilder` class to a new value and return the modified instance of the class."
      ]
    ],
    "com.fsck.k9.message.MessageBuilder$Callback": [
      [
        "onMessageBuildCancel()",
        "The goal of the method is to notify that message building has been canceled."
      ],
      [
        "onMessageBuildReturnPendingIntent(android.app.PendingIntent,int)",
        "This method is called when a pending intent is returned by the message builder during the message building process."
      ],
      [
        "onMessageBuildException(com.fsck.k9.mail.MessagingException)",
        "The method is called when there is a messaging exception during the building of a message."
      ],
      [
        "onMessageBuildSuccess(com.fsck.k9.mail.internet.MimeMessage,boolean)",
        "The method handles the successful build of a MIME message in K-9 Mail."
      ]
    ],
    "com.fsck.k9.message.SimpleMessageBuilder": [
      [
        "newInstance()",
        "The goal of the method is to create a new instance of `SimpleMessageBuilder` class with appropriate context, message ID generator, and boundary generator."
      ]
    ],
    "com.fsck.k9.message.AutocryptStatusInteractor$RecipientAutocryptStatus": [
      [
        "hasPendingIntent()",
        "This method checks whether `intent` is not null and returns true if it is not null."
      ]
    ],
    "com.fsck.k9.message.PgpMessageBuilder": [
      [
        "buildMessageOnActivityResult(int,android.content.Intent)",
        "The method builds a PGP message by starting or continuing the message building process based on user interaction result."
      ],
      [
        "setCryptoStatus(com.fsck.k9.activity.compose.ComposeCryptoStatus)",
        "The method sets the crypto status of a PGP message builder instance."
      ],
      [
        "setOpenPgpApi(org.openintents.openpgp.util.OpenPgpApi)",
        "The method sets the OpenPgpApi object used for encryption and decryption in the PgpMessageBuilder class."
      ],
      [
        "newInstance()",
        "The goal of the `newInstance()` method is to create a new instance of `PgpMessageBuilder` with pre-initialized variables and return it."
      ]
    ],
    "com.fsck.k9.message.ComposePgpEnableByDefaultDecider": [
      [
        "shouldEncryptByDefault(com.fsck.k9.mail.Message)",
        "The method returns true if the given local message should be encrypted by default."
      ]
    ],
    "com.fsck.k9.message.ComposePgpInlineDecider": [
      [
        "shouldReplyInline(com.fsck.k9.mail.Message)",
        "The goal of the method is to determine whether a given email message should be replied to inline using PGP encryption."
      ]
    ],
    "com.fsck.k9.message.AutocryptStatusInteractor$RecipientAutocryptStatusType": [
      [
        "canEncrypt()",
        "The goal of the method `canEncrypt()` is to return a boolean value indicating whether the recipient can be encrypted using Autocrypt."
      ],
      [
        "isMutual()",
        "The goal of the method is to return a boolean value indicating whether the recipient's Autocrypt status is mutual or not."
      ],
      [
        "isConfirmed()",
        "The goal of this method is to return a boolean that indicates whether the recipient's Autocrypt status is confirmed."
      ]
    ],
    "com.fsck.k9.message.IdentityField": [
      [
        "getIntegerFields()",
        "The goal of this method is to return an array of IdentityFields that should be validated as integers during decoding."
      ],
      [
        "value()",
        "The goal of this method is to return the value of the current identity field."
      ]
    ],
    "com.fsck.k9.message.TextBodyBuilder": [
      [
        "setAppendSignature(boolean)",
        "This method sets whether or not to append a user's email signature to the message being built."
      ],
      [
        "buildTextPlain()",
        "The method builds a TextBody instance containing the entered text and optionally the quoted original message and signature."
      ],
      [
        "setQuotedText(java.lang.String)",
        "The method sets the quoted text for a message in an email client."
      ],
      [
        "setInsertSeparator(boolean)",
        "The goal of this method is to set a flag indicating whether a separator should be inserted between the text of the current message and the previous message when composing an email."
      ],
      [
        "setReplyAfterQuote(boolean)",
        "The goal of the `setReplyAfterQuote(boolean)` method is to set a boolean value indicating whether to place the reply after or before the quoted text in an email."
      ],
      [
        "buildTextHtml()",
        "The goal of `buildTextHtml()` is to create a `TextBody` that contains the entered text, possibly with quoted original message and with an appended signature."
      ],
      [
        "setIncludeQuotedText(boolean)",
        "The method sets whether or not to include quoted text when building a message body."
      ],
      [
        "setQuotedTextHtml(com.fsck.k9.message.quote.InsertableHtmlContent)",
        "The method sets the HTML content of the quoted text in an email message."
      ],
      [
        "setSignature(java.lang.String)",
        "The method sets the signature for the email message being built."
      ],
      [
        "setSignatureBeforeQuotedText(boolean)",
        "The goal of this method is to set whether the signature should be placed before or after the quoted text in an email message."
      ]
    ],
    "com.fsck.k9.message.AutocryptStatusInteractor": [
      [
        "getInstance()",
        "The goal of the `getInstance()` method is to return an instance of the `AutocryptStatusInteractor` class."
      ],
      [
        "retrieveCryptoProviderRecipientStatus(org.openintents.openpgp.util.OpenPgpApi,java.lang.String[])",
        "This method retrieves the Autocrypt status of the recipient from the OpenPGP API."
      ]
    ],
    "com.fsck.k9.message.IdentityHeaderParser": [
      [
        "parse(java.lang.String)",
        "The goal of this method is to parse an encoded identity string, either in legacy or new style, into a map containing values for each IdentityField."
      ]
    ],
    "com.fsck.k9.message.MessageBuilder": [
      [
        "setSubject(java.lang.String)",
        "The goal of the `setSubject` method is to set the subject of the email message being built and return the updated `MessageBuilder` object."
      ],
      [
        "setCc(java.util.List)",
        "The goal of the method is to set the carbon copy field of a `MessageBuilder` object using a list of email addresses, and then return the updated `MessageBuilder` object."
      ],
      [
        "setRequestReadReceipt(boolean)",
        "This method sets whether the email message should request a read receipt or not."
      ],
      [
        "setCursorPosition(int)",
        "The method sets the cursor position within the message builder."
      ],
      [
        "setReplyAfterQuote(boolean)",
        "The method sets whether the reply to a message should be placed after or before the quoted text."
      ],
      [
        "setQuotedHtmlContent(com.fsck.k9.message.quote.InsertableHtmlContent)",
        "The method sets the quoted HTML content of an email message being built in the MessageBuilder."
      ],
      [
        "setInReplyTo(java.lang.String)",
        "The goal of this method is to set the Message-ID of the message that this message is in reply to."
      ],
      [
        "setBcc(java.util.List)",
        "The goal of the `setBcc` method is to set the list of blind carbon copy addresses for a message being built and return the builder object."
      ],
      [
        "setSignature(java.lang.String)",
        "The goal of the `setSignature` method is to set the signature of the email being constructed by the `MessageBuilder`."
      ],
      [
        "setSignatureChanged(boolean)",
        "The goal of the method is to set a flag indicating whether the signature of the message has been changed."
      ],
      [
        "setIsPgpInlineEnabled(boolean)",
        "The method sets the flag indicating whether PGP inline encryption is enabled for the email message being built."
      ],
      [
        "setIdentity(com.fsck.k9.Identity)",
        "The method sets the identity (sender) associated with the message builder."
      ],
      [
        "setAttachments(java.util.List)",
        "The method sets the list of attachments for the message being built."
      ],
      [
        "setMessageReference(com.fsck.k9.activity.MessageReference)",
        "The goal of this method is to set the reference message for the MessageBuilder object being constructed."
      ],
      [
        "reattachCallback(com.fsck.k9.message.MessageBuilder$Callback)",
        "The goal of the `reattachCallback` method is to attach a new callback to the message builder, which will be delivered immediately if the computation finished while the previous callback was detached."
      ],
      [
        "setSentDate(java.util.Date)",
        "The method sets the sent date of the email message being built."
      ],
      [
        "buildAsync(com.fsck.k9.message.MessageBuilder$Callback)",
        "The goal of the `buildAsync` method is to build a message asynchronously and call exactly one method on the callback on the UI thread after it finishes."
      ],
      [
        "setReferences(java.lang.String)",
        "The method sets the references to be associated with the email message."
      ],
      [
        "setDraft(boolean)",
        "The `setDraft(boolean)` method sets whether the message being built is a draft or not."
      ],
      [
        "setQuotedText(java.lang.String)",
        "The method sets the quoted text of the message to be built."
      ],
      [
        "setSignatureBeforeQuotedText(boolean)",
        "The goal of this method is to set whether the message signature should be added before or after quoted text in the email body."
      ],
      [
        "onActivityResult(int,int,android.content.Intent,com.fsck.k9.message.MessageBuilder$Callback)",
        "This method handles the onActivityResult event for an email message builder, notifying the callback of success or failure and delivering the message result."
      ],
      [
        "detachCallback()",
        "The goal of this method is to temporarily detach the callback in order to delay the delivery of a result until reattachment."
      ],
      [
        "isDraft()",
        "The `isDraft()` method is used to determine whether the message being built is a draft or not, and returns a boolean value indicating this."
      ],
      [
        "setQuoteStyle(com.fsck.k9.Account$QuoteStyle)",
        "The goal of this method is to set the quote style for the email message being composed."
      ],
      [
        "setIdentityChanged(boolean)",
        "The method sets the value of the variable \"identityChanged\" to indicate whether the identity of the message has changed."
      ],
      [
        "setMessageFormat(com.fsck.k9.message.SimpleMessageFormat)",
        "The goal of the `setMessageFormat` method is to set the message format for the email being constructed and return the modified `MessageBuilder` object."
      ],
      [
        "setHideTimeZone(boolean)",
        "The method sets whether or not the time zone of the message should be hidden."
      ],
      [
        "setText(java.lang.String)",
        "The goal of the method is to set the text content of the email message."
      ],
      [
        "setTo(java.util.List)",
        "The goal of this method is to set the recipient addresses of the email message being built to the specified list of email addresses."
      ],
      [
        "setQuotedTextMode(com.fsck.k9.message.QuotedTextMode)",
        "The method sets the quoted text display mode for the email message being built."
      ]
    ]
  },
  "com.fsck.k9.message.extractors": {
    "com.fsck.k9.message.extractors.MessagePreviewCreator": [
      [
        "createPreview(com.fsck.k9.mail.Message)",
        "The method aims to create a preview for a given email message, checking if the message is encrypted and returning an encryption warning if necessary."
      ],
      [
        "newInstance()",
        "The method creates a new instance of `MessagePreviewCreator` with the necessary dependencies."
      ]
    ],
    "com.fsck.k9.message.extractors.EncryptionDetector": [
      [
        "isEncrypted(com.fsck.k9.mail.Message)",
        "The method checks whether the given message is encrypted using either PGP/MIME or S/MIME or contains inline PGP-encrypted text."
      ]
    ],
    "com.fsck.k9.message.extractors.AttachmentCounter": [
      [
        "getAttachmentCount(com.fsck.k9.mail.Message)",
        "The method counts the number of attachments in a given email message, excluding encrypted attachments."
      ],
      [
        "newInstance()",
        "The goal of this method is to create a new instance of `AttachmentCounter` with a new instance of `EncryptionDetector` as its constructor argument."
      ]
    ],
    "com.fsck.k9.message.extractors.AttachmentInfoExtractor": [
      [
        "extractAttachmentInfoForDatabase(com.fsck.k9.mail.Part)",
        "The method extracts attachment information from an email message to be stored in a database, including information about the availability and size of the attachment."
      ],
      [
        "getInstance()",
        "The goal of this method is to instantiate and return an instance of the `AttachmentInfoExtractor` class, using the application context."
      ],
      [
        "extractAttachmentInfo(com.fsck.k9.mail.Part)",
        "The `extractAttachmentInfo` method extracts information about an email attachment, such as its size and content availability, and returns an `AttachmentViewInfo` object."
      ],
      [
        "extractAttachmentInfoForView(java.util.List)",
        "The goal of the `extractAttachmentInfoForView` method is to extract attachment information from a list of email message parts and return a list of `AttachmentViewInfo` objects."
      ]
    ],
    "com.fsck.k9.message.extractors.PreviewTextExtractor": [
      [
        "extractPreview(com.fsck.k9.mail.Part)",
        "The goal of this method is to extract a preview of text from a given email message part."
      ]
    ],
    "com.fsck.k9.message.extractors.TextPartFinder": [
      [
        "findFirstTextPart(com.fsck.k9.mail.Part)",
        "The goal of `findFirstTextPart` is to return the first `Part` that contains either plain text or HTML."
      ]
    ],
    "com.fsck.k9.message.extractors.BodyTextExtractor": [
      [
        "getBodyTextFromMessage(com.fsck.k9.mail.Part,com.fsck.k9.message.SimpleMessageFormat)",
        "The method retrieves the body text from a message part in the specified format, handling conversions between HTML and plain text if necessary."
      ]
    ],
    "com.fsck.k9.message.extractors.PreviewResult": [
      [
        "text(java.lang.String)",
        "The goal of this method is to create a new instance of PreviewResult with the given previewText as the text type preview."
      ],
      [
        "encrypted()",
        "The goal of the method is to create and return a new `PreviewResult` object with \"ENCRYPTED\" preview type and null preview data."
      ],
      [
        "getPreviewType()",
        "The goal of this method is to return the preview type of a message."
      ],
      [
        "none()",
        "This method returns a new instance of `PreviewResult` with the `PreviewType` set to `NONE` and a null `data` field."
      ],
      [
        "isPreviewTextAvailable()",
        "The goal of the method is to check if the preview extracted from a message is in text form."
      ],
      [
        "error()",
        "The `error()` method returns a new instance of the `PreviewResult` class with a `PreviewType` of `ERROR` and a `null` preview content."
      ],
      [
        "getPreviewText()",
        "This method returns the preview text of an email message if available, or throws an exception if not."
      ]
    ],
    "com.fsck.k9.message.extractors.MessageFulltextCreator": [
      [
        "newInstance()",
        "The `newInstance()` method creates a new instance of the `MessageFulltextCreator` class with the necessary dependencies of `TextPartFinder` and `EncryptionDetector`."
      ],
      [
        "createFulltext(com.fsck.k9.mail.Message)",
        "The method creates a full text version of an email message by extracting its text content, unless the email is encrypted, in which case it returns null."
      ]
    ]
  },
  "com.fsck.k9.message.html": {
    "com.fsck.k9.message.html.HtmlProcessor": [
      [
        "toCompactString(org.jsoup.nodes.Document)",
        "The goal of the `toCompactString` method is to return a compact HTML string representation of a given JSoup document by disabling pretty printing and indentation."
      ],
      [
        "newInstance()",
        "The method creates a new instance of the `HtmlProcessor` class with a new instance of `HtmlSanitizer` as a parameter."
      ],
      [
        "processForDisplay(java.lang.String)",
        "The `processForDisplay` method sanitizes and processes HTML content for display in an email client."
      ]
    ],
    "com.fsck.k9.message.html.UriLinkifier": [
      [
        "linkifyText(java.lang.String,java.lang.StringBuffer)",
        "The method `linkifyText` takes a string and appends it to a StringBuffer, searching for URIs within the string and replacing them with clickable links if possible."
      ]
    ],
    "com.fsck.k9.message.html.UriParser": [
      [
        "linkifyUri(java.lang.String,int,java.lang.StringBuffer)",
        "The goal of the method is to parse and linkify a scheme-specific URI in a given string, starting from a given position, and write the result to a given buffer."
      ]
    ],
    "com.fsck.k9.message.html.HeadCleaner": [
      [
        "clean(org.jsoup.nodes.Document,org.jsoup.nodes.Document)",
        "The `clean` method copies safe nodes from the head element of a dirty HTML document to the head element of a cleaned HTML document."
      ]
    ],
    "com.fsck.k9.message.html.HttpUriParser": [
      [
        "linkifyUri(java.lang.String,int,java.lang.StringBuffer)",
        "The goal of this method is to parse a given URI string within a text and add HTML anchor tags to make it clickable."
      ]
    ],
    "com.fsck.k9.message.html.HtmlConverter": [
      [
        "wrapMessageContent(java.lang.CharSequence)",
        "The goal of this method is to wrap the given `messageContent` in HTML tags with a viewport meta tag, a CSS theme, and a CSS style for preformatted text."
      ],
      [
        "textToHtml(java.lang.String)",
        "The `textToHtml` method converts a plain text string into a corresponding HTML string, with smart replacements to prevent OutOfMemory errors."
      ],
      [
        "textToHtmlFragment(java.lang.String)",
        "The method converts plain text into an HTML fragment with escaped entities, linkified text, and added newlines."
      ],
      [
        "htmlToText(java.lang.String)",
        "The `htmlToText` method converts an HTML string to a plain text string."
      ],
      [
        "wrapStatusMessage(java.lang.CharSequence)",
        "The method wraps a status message in an HTML div element with center alignment and grey text color."
      ],
      [
        "convertEmoji2Img(java.lang.String)",
        "The method converts any emoji characters in the input string to HTML image tags with the appropriate emoji image source and alt text."
      ],
      [
        "htmlToSpanned(java.lang.String)",
        "The method `htmlToSpanned` converts an HTML fragment to a formatted `Spanned` text that can be used in a `TextView`."
      ]
    ],
    "com.fsck.k9.message.html.EthereumUriParser": [
      [
        "linkifyUri(java.lang.String,int,java.lang.StringBuffer)",
        "The goal of the `linkifyUri` method is to find and convert Ethereum URIs in a given text into clickable links."
      ]
    ],
    "com.fsck.k9.message.html.BitcoinUriParser": [
      [
        "linkifyUri(java.lang.String,int,java.lang.StringBuffer)",
        "The method searches for Bitcoin URIs within a given text and converts them into clickable HTML links with the same URI."
      ]
    ],
    "com.fsck.k9.message.html.HtmlSanitizer": [
      [
        "sanitize(java.lang.String)",
        "The goal of this method is to sanitize an input HTML string by parsing it into a JSoup Document, cleaning it using a cleaner, and returning the cleaned Document."
      ]
    ],
    "com.fsck.k9.message.html.HeadCleaner$CleaningVisitor": [
      [
        "tail(org.jsoup.nodes.Node,int)",
        "The goal of the `tail` method is to set the `destination` node to its parent and allow processing of its children."
      ],
      [
        "head(org.jsoup.nodes.Node,int)",
        "The goal of the `head` method is to clean the head section of an HTML document by copying safe tags and their attributes to a new document while ignoring unsafe tags and their children."
      ]
    ],
    "com.fsck.k9.message.html.HtmlConverter$ListTagHandler": [
      [
        "handleTag(boolean,java.lang.String,android.text.Editable,org.xml.sax.XMLReader)",
        "The goal of the `handleTag` method is to convert HTML tags for unordered lists and list items into the appropriate format for display in an Android `text.Editable` object."
      ]
    ],
    "com.fsck.k9.message.html.HtmlConverter$HtmlToTextTagHandler": [
      [
        "handleTag(boolean,java.lang.String,android.text.Editable,org.xml.sax.XMLReader)",
        "The goal of this method is to handle HTML tags and convert them to plain text while also performing some specific formatting for certain tags such as `<hr>`."
      ]
    ]
  },
  "com.fsck.k9.message.quote": {
    "com.fsck.k9.message.quote.InsertableHtmlContent": [
      [
        "setUserContent(java.lang.String)",
        "The method sets the inserted content to the specified content by replacing anything that is currently in the buffer."
      ],
      [
        "toDebugString()",
        "The `toDebugString()` method returns a string containing debugging information about an `InsertableHtmlContent` object."
      ],
      [
        "setQuotedContent(java.lang.StringBuilder)",
        "The goal of the `setQuotedContent` method is to set the quoted content for the `InsertableHtmlContent` object so that the insertion point can be set against this content."
      ],
      [
        "setHeaderInsertionPoint(int)",
        "The method sets the insertion point of the header in the quoted content."
      ],
      [
        "getInsertionPoint()",
        "The goal of the `getInsertionPoint()` method is to fetch the insertion point based on the quote style."
      ],
      [
        "getFooterInsertionPoint()",
        "The method gets the insertion point of the footer in the HTML content."
      ],
      [
        "setFooterInsertionPoint(int)",
        "The goal of this method is to set the insertion point for the footer content in the quoted HTML message."
      ],
      [
        "getQuotedContent()",
        "The goal of the method is to retrieve the quoted content as a string."
      ],
      [
        "insertIntoQuotedHeader(java.lang.String)",
        "The goal of the `insertIntoQuotedHeader(java.lang.String)` method is to insert content into the header of quoted content, typically used for inserting reply/forward headers."
      ],
      [
        "toString()",
        "The goal of this `toString()` method is to build and return a composed string by inserting user content into quoted content and deleting the original insertion point."
      ],
      [
        "insertIntoQuotedFooter(java.lang.String)",
        "The goal of the `insertIntoQuotedFooter(java.lang.String)` method is to insert content into the quoted content footer, typically used for adding closing tags of reply/forward headers."
      ],
      [
        "clearQuotedContent()",
        "The method clears all quoted content from the `InsertableHtmlContent` instance."
      ],
      [
        "setInsertionLocation(com.fsck.k9.message.quote.InsertableHtmlContent$InsertionLocation)",
        "The method sets the location for inserting user content relative to the quoted content."
      ]
    ],
    "com.fsck.k9.message.quote.TextQuoteCreator": [
      [
        "quoteOriginalTextMessage(android.content.res.Resources,com.fsck.k9.mail.Message,java.lang.String,com.fsck.k9.Account$QuoteStyle,java.lang.String)",
        "The method adds quoting markup to a text message based on the provided metadata, message text, and quote style."
      ]
    ],
    "com.fsck.k9.message.quote.HtmlQuoteCreator": [
      [
        "quoteOriginalHtmlMessage(android.content.res.Resources,com.fsck.k9.mail.Message,java.lang.String,com.fsck.k9.Account$QuoteStyle)",
        "The goal of the `quoteOriginalHtmlMessage` method is to add HTML quoting markup to an email message according to a chosen quote style."
      ]
    ]
  },
  "com.fsck.k9.message.signature": {
    "com.fsck.k9.message.signature.HtmlSignatureRemover": [
      [
        "stripSignature(java.lang.String)",
        "The `stripSignature` method removes the signature from an HTML-formatted email content."
      ]
    ],
    "com.fsck.k9.message.signature.HtmlSignatureRemover$StripSignatureFilter": [
      [
        "head(org.jsoup.nodes.Node,int)",
        "This method traverses through HTML nodes and removes any elements or text nodes that are part of an email signature."
      ],
      [
        "tail(org.jsoup.nodes.Node,int)",
        "The `tail` method determines whether to continue filtering HTML nodes and tracks line breaks in order to remove email signature content."
      ]
    ],
    "com.fsck.k9.message.signature.TextSignatureRemover": [
      [
        "stripSignature(java.lang.String)",
        "The goal of this method is to remove any signature from the given string."
      ]
    ]
  },
  "com.fsck.k9.ui": {
    "com.fsck.k9.ui.EolConvertingEditText": [
      [
        "setCharacters(java.lang.CharSequence)",
        "The `setCharacters` method sets the string value of the `EolConvertingEditText` and converts any line endings in the string to `\\n`."
      ],
      [
        "getCharacters()",
        "The goal of the `getCharacters()` method in class `com.fsck.k9.ui.EolConvertingEditText` is to return the text being displayed with any line endings converted to \"\\r\\n\"."
      ]
    ],
    "com.fsck.k9.ui.ContactBadge": [
      [
        "assignContactFromEmail(java.lang.String,boolean,android.os.Bundle)",
        "The method assigns a contact to the badge based on an email address, performing a lookup query if necessary, and allows for the population of a contact edit page with extras if the contact is not found."
      ],
      [
        "assignContactUri(android.net.Uri)",
        "The goal of the `assignContactUri` method is to associate a contact URI with a `ContactBadge` in order to display the QuickContact window."
      ],
      [
        "onInitializeAccessibilityNodeInfo(android.view.accessibility.AccessibilityNodeInfo)",
        "The goal of this method is to set the class name of an AccessibilityNodeInfo object to \"com.fsck.k9.ui.ContactBadge\"."
      ],
      [
        "assignContactFromEmail(java.lang.String,boolean)",
        "The goal of the `assignContactFromEmail(java.lang.String,boolean)` method is to assign a contact based on an email address and perform a lookup query for the contact's URI if it is not available."
      ],
      [
        "onInitializeAccessibilityEvent(android.view.accessibility.AccessibilityEvent)",
        "The goal of this method is to set the class name of the accessibility event to \"com.fsck.k9.ui.ContactBadge\"."
      ],
      [
        "onClick(android.view.View)",
        "The method is responsible for handling clicks on a contact badge, and either displaying the contact's information using QuickContact or starting a lookup for the contact's email address."
      ]
    ]
  },
  "com.fsck.k9.ui.compose": {
    "com.fsck.k9.ui.compose.QuotedMessagePresenter": [
      [
        "populateUIWithQuotedMessage(com.fsck.k9.mailstore.MessageViewInfo,boolean,com.fsck.k9.activity.MessageCompose$Action)",
        "The method builds and populates the UI with the quoted message based on message format and user preferences."
      ],
      [
        "onRestoreInstanceState(android.os.Bundle)",
        "The method restores the state of the `QuotedMessagePresenter` instance from a saved instance state bundle."
      ],
      [
        "onSaveInstanceState(android.os.Bundle)",
        "The goal of the method is to save the state of the QuotedMessagePresenter instance by storing several variables in the provided Bundle."
      ],
      [
        "isForcePlainText()",
        "The goal of this method is to return a boolean indicating if plain text formatting should be forced for the quoted message."
      ],
      [
        "includeQuotedText()",
        "The goal of this method is to return a boolean indicating whether the quoted text should be included in the compose message."
      ],
      [
        "processDraftMessage(com.fsck.k9.mailstore.MessageViewInfo,java.util.Map)",
        "The `processDraftMessage` method of `QuotedMessagePresenter` processes the draft message and sets the necessary content and settings for the compose view."
      ],
      [
        "isQuotedTextText()",
        "The method returns a boolean indicating whether the quoted text format of a message is plain text."
      ],
      [
        "builderSetProperties(com.fsck.k9.message.MessageBuilder)",
        "The method sets various properties of a MessageBuilder object for use in a quoted message."
      ],
      [
        "showOrHideQuotedText(com.fsck.k9.message.QuotedTextMode)",
        "The goal of this method is to update the quoted text mode and format based on the user's input and display the updated quoted text accordingly."
      ],
      [
        "initFromReplyToMessage(com.fsck.k9.mailstore.MessageViewInfo,com.fsck.k9.activity.MessageCompose$Action)",
        "The goal of the `initFromReplyToMessage` method is to populate the compose UI with the quoted message from the `MessageViewInfo` and set the visibility of the quoted text based on the account default, for a particular `MessageCompose.Action`."
      ],
      [
        "processMessageToForward(com.fsck.k9.mailstore.MessageViewInfo)",
        "The method sets the quote style and populates UI with the quoted message to forward it."
      ],
      [
        "onSwitchAccount(com.fsck.k9.Account)",
        "The goal of the method is to update the currently selected account in the `QuotedMessagePresenter` with the given account."
      ]
    ],
    "com.fsck.k9.ui.compose.QuotedMessageMvpView": [
      [
        "getQuotedText()",
        "The goal of the method is to retrieve the quoted text from the view."
      ],
      [
        "setMessageContentCursorPosition(int)",
        "The method sets the cursor position in the message content view of a quoted message."
      ],
      [
        "addTextChangedListener(android.text.TextWatcher)",
        "The goal of the `addTextChangedListener` method is to add a `TextWatcher` to the `mQuotedText` view in order to listen for changes in text and trigger an action when detected."
      ],
      [
        "setQuotedText(java.lang.String)",
        "The method sets the quoted text of a composed message."
      ],
      [
        "setOnClickPresenter(com.fsck.k9.ui.compose.QuotedMessagePresenter)",
        "The goal of the `setOnClickPresenter` method is to set click listeners on views for showing, editing, and deleting quoted text in the compose screen of an email client app, and to delegate the click events to the corresponding methods in the `QuotedMessagePresenter` instance passed as an argument."
      ],
      [
        "showOrHideQuotedText(com.fsck.k9.message.QuotedTextMode,com.fsck.k9.message.SimpleMessageFormat)",
        "The method shows or hides the quoted text in the email message being composed, depending on the specified mode and text format."
      ],
      [
        "setMessageContentCharacters(java.lang.String)",
        "The `setMessageContentCharacters` method sets the characters in the message content view with the given text."
      ],
      [
        "setFontSizes(com.fsck.k9.FontSizes,int)",
        "The goal of this method is to set the font size for the quoted message view."
      ],
      [
        "setQuotedHtml(java.lang.String,com.fsck.k9.mailstore.AttachmentResolver)",
        "The method sets the HTML content of the quoted message along with any inline attachments."
      ]
    ]
  },
  "com.fsck.k9.ui.crypto": {
    "com.fsck.k9.ui.crypto.MessageCryptoAnnotations": [
      [
        "findKeyForAnnotationWithReplacementPart(com.fsck.k9.mail.Part)",
        "The goal of the `findKeyForAnnotationWithReplacementPart` method is to find the key for an annotation in a map, based on a specific replacement part."
      ],
      [
        "isEmpty()",
        "The method checks if the `annotations` collection is empty and returns a boolean value indicating the result."
      ],
      [
        "get(com.fsck.k9.mail.Part)",
        "This method retrieves the crypto result annotation for a given email message part."
      ],
      [
        "has(com.fsck.k9.mail.Part)",
        "The goal of the `has(com.fsck.k9.mail.Part)` method is to check if the provided email message part has any annotations associated with it."
      ],
      [
        "put(com.fsck.k9.mail.Part,com.fsck.k9.mailstore.CryptoResultAnnotation)",
        "Add a CryptoResultAnnotation object to the hashmap of annotations, along with the corresponding Part object key."
      ]
    ],
    "com.fsck.k9.ui.crypto.MessageCryptoHelper": [
      [
        "onActivityResult(int,int,android.content.Intent)",
        "This method handles the result of a user interaction related to cryptographic operations in an email message."
      ],
      [
        "isConfiguredForOutdatedCryptoProvider()",
        "The method checks whether the app's OpenPGP provider package is outdated or not."
      ],
      [
        "cancelIfRunning()",
        "The goal of the `cancelIfRunning()` method is to cancel a running background operation and detach its callback."
      ],
      [
        "detachCallback()",
        "The method detaches the callback for encryption and decryption operations."
      ],
      [
        "asyncStartOrResumeProcessingMessage(com.fsck.k9.mail.Message,com.fsck.k9.ui.crypto.MessageCryptoCallback,org.openintents.openpgp.OpenPgpDecryptionResult,boolean)",
        "The goal of the `asyncStartOrResumeProcessingMessage` method is to initiate or resume the processing of a message for encryption or decryption, with the option to skip verification of unsigned components."
      ]
    ],
    "com.fsck.k9.ui.crypto.MessageCryptoCallback": [
      [
        "startPendingIntentForCryptoHelper(android.content.IntentSender,int,android.content.Intent,int,int,int)",
        "The goal of the `startPendingIntentForCryptoHelper()` method is to start a pending intent for a cryptographic helper."
      ],
      [
        "onCryptoOperationsFinished(com.fsck.k9.ui.crypto.MessageCryptoAnnotations)",
        "The goal of the method is to notify the callback that the cryptographic operations on a message have finished along with the message annotations."
      ],
      [
        "onCryptoHelperProgress(int,int)",
        "The method reports the progress of a cryptographic operation to the caller."
      ]
    ]
  },
  "com.fsck.k9.ui.dialog": {},
  "com.fsck.k9.ui.message": {
    "com.fsck.k9.ui.message.LocalMessageExtractorLoader": [
      [
        "isCreatedFor(com.fsck.k9.mailstore.LocalMessage,com.fsck.k9.ui.crypto.MessageCryptoAnnotations)",
        "To check whether the given `LocalMessage` object and `MessageCryptoAnnotations` object match the instance variables of the `LocalMessageExtractorLoader` object."
      ],
      [
        "loadInBackground()",
        "The goal of the method `loadInBackground()` is to extract the local message for viewing and return a `MessageViewInfo` object, catching and logging any exceptions that occur during the process."
      ],
      [
        "deliverResult(com.fsck.k9.mailstore.MessageViewInfo)",
        "To deliver the messageViewInfo as a result of the LocalMessageExtractorLoader to its listeners."
      ]
    ],
    "com.fsck.k9.ui.message.LocalMessageLoader": [
      [
        "isCreatedFor(com.fsck.k9.activity.MessageReference)",
        "This method returns a boolean value indicating whether the given message reference is equal to the message reference for which this LocalMessageLoader instance was created."
      ],
      [
        "loadInBackground()",
        "The goal of the method is to load a local message from the database in the background."
      ],
      [
        "deliverResult(com.fsck.k9.mailstore.LocalMessage)",
        "The method delivers the result of loading a local message to the UI."
      ]
    ]
  },
  "com.fsck.k9.ui.messageview": {
    "com.fsck.k9.ui.messageview.AttachmentViewCallback": [
      [
        "onViewAttachment(com.fsck.k9.mailstore.AttachmentViewInfo)",
        "The goal of this method is to handle the action of viewing an attachment in the UI."
      ],
      [
        "onSaveAttachmentToUserProvidedDirectory(com.fsck.k9.mailstore.AttachmentViewInfo)",
        "This method is called when the user saves an attachment to a specific directory, and it should handle the actual saving of the attachment."
      ],
      [
        "onSaveAttachment(com.fsck.k9.mailstore.AttachmentViewInfo)",
        "The goal of this method is to save the given attachment."
      ]
    ],
    "com.fsck.k9.ui.messageview.MessageViewFragment": [
      [
        "onForward()",
        "The goal of the method is to forward the message to the fragment listener, along with the message reference and the decryption result for the reply."
      ],
      [
        "onReplyAll()",
        "The goal of the `onReplyAll()` method is to call back to the parent activity with the reply-all message reference and decryption result for a selected email message."
      ],
      [
        "onResume()",
        "The method `onResume()` is used to resume the `messageCryptoPresenter` when the `MessageViewFragment` is resumed."
      ],
      [
        "enableAttachmentButtons(com.fsck.k9.mailstore.AttachmentViewInfo)",
        "This method enables buttons for the given email attachment in the message view."
      ],
      [
        "onClickShowSecurityWarning()",
        "The goal of the method is to invoke the `onClickShowCryptoWarningDetails()` method of the `messageCryptoPresenter` to show the security warning details."
      ],
      [
        "canMessageBeMovedToSpam()",
        "The goal of this method is to check if a message can be moved to the spam folder for the current account in the MessageViewFragment."
      ],
      [
        "onCreateView(android.view.LayoutInflater,android.view.ViewGroup,android.os.Bundle)",
        "The goal of the `onCreateView` method is to inflate the UI layout for displaying an email message and initialize its various components and listeners."
      ],
      [
        "refreshAttachmentThumbnail(com.fsck.k9.mailstore.AttachmentViewInfo)",
        "The method refreshes the thumbnail image of the given email attachment in the message view."
      ],
      [
        "allHeadersVisible()",
        "The method returns whether all headers are visible for a message in the message view."
      ],
      [
        "onPendingIntentResult(int,int,android.content.Intent)",
        "The method handles the result of various pending intents related to the message view, including loaders and cryptographic operations."
      ],
      [
        "newInstance(com.fsck.k9.activity.MessageReference)",
        "The goal of the method is to create a new instance of MessageViewFragment with a specified message reference."
      ],
      [
        "doPositiveClick(int)",
        "The method performs an action based on the ID of a dialog, either deleting a message or moving it to a spam folder."
      ],
      [
        "onSaveInstanceState(android.os.Bundle)",
        "The method `onSaveInstanceState` is saving the state of the messageCryptoPresenter to a Bundle to allow for restoring the state later on."
      ],
      [
        "onCopy()",
        "The `onCopy()` method copies a message to the clipboard if it is copy capable, shows an error message if the message cannot be copied, and starts an activity to select the destination folder to copy the message to."
      ],
      [
        "showAttachmentLoadingDialog()",
        "The goal of the method `showAttachmentLoadingDialog()` is to display a progress dialog for loading email message attachments."
      ],
      [
        "getMessageReference()",
        "The goal of this method is to return the current message reference of the displayed message in the message view fragment."
      ],
      [
        "isMessageRead()",
        "The goal of the `isMessageRead()` method is to check whether the current message has been marked as read or not."
      ],
      [
        "getApplicationContext()",
        "The method returns the application context of the MessageViewFragment class."
      ],
      [
        "isCopyCapable()",
        "The goal of this method is to determine if the current message being viewed is capable of being copied."
      ],
      [
        "onArchive()",
        "The goal of this method is to move the current message to the archive folder of the associated email account."
      ],
      [
        "onToggleAllHeadersView()",
        "The goal of the method is to toggle the visibility of all email headers in the message view."
      ],
      [
        "onToggleRead()",
        "The goal of the `onToggleRead()` method is to toggle the \"read\" status of a message and update the message view accordingly."
      ],
      [
        "onMove()",
        "The goal of this method is to handle the action of moving a message to a different folder in the email client."
      ],
      [
        "onSendAlternate()",
        "The goal of the `onSendAlternate()` method is to send an alternate version of the current email message."
      ],
      [
        "onDestroy()",
        "The `onDestroy()` method is responsible for stopping the message loader helper and freeing up resources when the fragment is being destroyed, and if the activity is not being destroyed due to a configuration change, it updates the message loader helper accordingly."
      ],
      [
        "onClickShowCryptoKey()",
        "The goal of the `onClickShowCryptoKey()` method is to delegate the \"show crypto key\" action to the `messageCryptoPresenter`."
      ],
      [
        "onDelete()",
        "The `onDelete()` method prompts the user to confirm deletion of a message and performs the deletion if confirmed, or directly deletes the message if deletion is not confirmed."
      ],
      [
        "doNegativeClick(int)",
        "The goal of this method is to do nothing when the user clicks on a negative button in a dialog with the specified ID."
      ],
      [
        "onCreate(android.os.Bundle)",
        "The method initializes various objects and sets the option menu for the action bar in the MessageViewFragment."
      ],
      [
        "dialogCancelled(int)",
        "The method does nothing and is called when a dialog is cancelled."
      ],
      [
        "runOnMainThread(java.lang.Runnable)",
        "The goal of this method is to execute a `Runnable` object on the main thread using a `Handler`."
      ],
      [
        "moveMessage(com.fsck.k9.activity.MessageReference,java.lang.String)",
        "The goal of this method is to move a message from one folder to another folder within an email account."
      ],
      [
        "onToggleFlagged()",
        "The goal of the `onToggleFlagged()` method is to toggle the flagged state of a message and update its headers in the message view."
      ],
      [
        "canMessageBeArchived()",
        "This method determines whether the message can be archived by checking if it is already in the archive folder and if the account has an archive folder."
      ],
      [
        "isMoveCapable()",
        "The goal of this method is to determine if moving the message to a different folder is possible for a given email account."
      ],
      [
        "disableAttachmentButtons(com.fsck.k9.mailstore.AttachmentViewInfo)",
        "The goal of this method is to disable attachment buttons in the message view for a specific attachment."
      ],
      [
        "onSelectText()",
        "The method begins selecting text in the message view."
      ],
      [
        "onActivityCreated(android.os.Bundle)",
        "The goal of the `onActivityCreated` method is to retrieve a message reference from the fragment's arguments and use it to display the corresponding message."
      ],
      [
        "onSaveAttachment(com.fsck.k9.mailstore.AttachmentViewInfo)",
        "The method saves the attachment specified by `attachment` through the `getAttachmentController(attachment)` method."
      ],
      [
        "onActivityResult(int,int,android.content.Intent)",
        "The `onActivityResult` method handles the outcomes of activities started by this fragment, including choosing a directory to save an attachment and choosing a folder to move or copy a message to."
      ],
      [
        "onReply()",
        "The goal of this method is to trigger the reply functionality for the current displayed message in the fragment."
      ],
      [
        "onSpam()",
        "The goal of the method is to shift the current email to the spam folder of the current email account."
      ],
      [
        "isInitialized()",
        "The method returns a boolean indicating if the message view fragment has been initialized."
      ],
      [
        "zoom(android.view.KeyEvent)",
        "The goal of this method is to handle zooming functionality in the message view fragment using the specified key event."
      ],
      [
        "hideAttachmentLoadingDialogOnMainThread()",
        "The goal of the method is to hide the attachment loading dialog on the main thread."
      ],
      [
        "onAttach(android.app.Activity)",
        "The goal of this method is to set the `mContext` variable to the application context of the attached activity and cast the activity as a `MessageViewFragmentListener` for later use."
      ],
      [
        "onSaveAttachmentToUserProvidedDirectory(com.fsck.k9.mailstore.AttachmentViewInfo)",
        "The goal of this method is to allow users to save attachments to a location of their choice by showing a file browser activity and passing the chosen path to the attachment controller."
      ],
      [
        "copyMessage(com.fsck.k9.activity.MessageReference,java.lang.String)",
        "The `copyMessage` method copies a message from one folder to another folder within an email account."
      ],
      [
        "onRefile(java.lang.String)",
        "The method `onRefile` moves a selected email message to a specified folder, with additional checks for the capability to move messages and confirmation for moving to the spam folder."
      ],
      [
        "updateTitle()",
        "The goal of the `updateTitle()` method is to update the displayed message subject in the title of the message view fragment."
      ],
      [
        "onViewAttachment(com.fsck.k9.mailstore.AttachmentViewInfo)",
        "This method sets the currentAttachmentViewInfo and calls the viewAttachment() method on the AttachmentController for a given attachment."
      ]
    ],
    "com.fsck.k9.ui.messageview.AttachmentController": [
      [
        "viewAttachment()",
        "The goal of the method is to either download and view the attachment or view the local attachment if it is already available."
      ],
      [
        "saveAttachment()",
        "The method saves an attachment to the default path specified in the K9 email app settings."
      ],
      [
        "saveAttachmentTo(java.lang.String)",
        "The method saves an attachment to a specified directory."
      ]
    ],
    "com.fsck.k9.ui.messageview.MessageCryptoPresenter$MessageCryptoMvpView": [
      [
        "restartMessageCryptoProcessing()",
        "The goal of the method is to restart the processing of message encryption and decryption."
      ],
      [
        "redisplayMessage()",
        "The goal of the `redisplayMessage()` method is to refresh and display the message view with updated information."
      ],
      [
        "startPendingIntentForCryptoPresenter(android.content.IntentSender,java.lang.Integer,android.content.Intent,int,int,int)",
        "The method starts a pending intent and fills it with intent data for the MessageCryptoPresenter."
      ],
      [
        "showCryptoConfigDialog()",
        "The goal of the method is to display a configuration dialog for message crypto."
      ],
      [
        "showCryptoInfoDialog(com.fsck.k9.view.MessageCryptoDisplayStatus,boolean)",
        "Show a dialog displaying crypto information and security warning message for a given message display status."
      ]
    ],
    "com.fsck.k9.ui.messageview.MessageTopView": [
      [
        "showMessageCryptoCancelledView(com.fsck.k9.mailstore.MessageViewInfo,android.graphics.drawable.Drawable)",
        "The goal of the method is to display a view indicating that the cryptography operation has been cancelled."
      ],
      [
        "enableDownloadButton()",
        "The method enables a download button in the user interface for downloading email attachments."
      ],
      [
        "setOnDownloadButtonClickListener(com.fsck.k9.ui.messageview.OnClickListener)",
        "The method sets an `OnClickListener` on the download button of the message view."
      ],
      [
        "showMessage(com.fsck.k9.Account,com.fsck.k9.mailstore.MessageViewInfo)",
        "The `showMessage` method displays a message in the message view with container and relevant settings for the user's account."
      ],
      [
        "onFinishInflate()",
        "The goal of the `onFinishInflate()` method is to initialize and set up various UI elements of the message view."
      ],
      [
        "additionalHeadersVisible()",
        "The method `additionalHeadersVisible()` returns a boolean value indicating whether additional headers are visible in a message view."
      ],
      [
        "showAllHeaders()",
        "The goal of this method is to show all headers in the message view by calling a method in the header container."
      ],
      [
        "setAttachmentCallback(com.fsck.k9.ui.messageview.AttachmentViewCallback)",
        "This method sets a callback for attachment viewing in the K-9 email client message top view."
      ],
      [
        "displayViewOnLoadFinished(boolean)",
        "The goal of the `displayViewOnLoadFinished(boolean)` method is to display the message view once the message has finished loading, and optionally finish the progress bar animation."
      ],
      [
        "setOnToggleFlagClickListener(com.fsck.k9.ui.messageview.OnClickListener)",
        "The method sets a listener for clicking on the flag icon in the message header."
      ],
      [
        "getMessageHeaderView()",
        "The method aims to fetch the message header view displayed at the top of messages."
      ],
      [
        "disableDownloadButton()",
        "The method disables the download button in the message top view."
      ],
      [
        "setMessageCryptoPresenter(com.fsck.k9.ui.messageview.MessageCryptoPresenter)",
        "The goal of the method is to set a MessageCryptoPresenter and attach it to an OnCryptoClickListener on the message header container."
      ],
      [
        "showMessageCryptoWarning(com.fsck.k9.mailstore.MessageViewInfo,android.graphics.drawable.Drawable,int,boolean)",
        "The `showMessageCryptoWarning` method displays a warning message related to email encryption alongside a provider icon and optional detail and override buttons."
      ],
      [
        "showMessageCryptoErrorView(com.fsck.k9.mailstore.MessageViewInfo,android.graphics.drawable.Drawable)",
        "The method sets up and displays a view to show an error related to cryptography for a specific email message."
      ],
      [
        "setLoadingProgress(int,int)",
        "The method sets the loading progress of a message in the message view."
      ],
      [
        "setHeaders(com.fsck.k9.mail.Message,com.fsck.k9.Account)",
        "The goal of the method is to populate the header container with the headers of the given message and make it visible."
      ],
      [
        "setToLoadingState()",
        "The goal of the `setToLoadingState()` method is to reset the message top view to a loading state by displaying a progress bar at 0%, setting the view animator to the first child, and setting the `isShowingProgress` variable to false."
      ],
      [
        "showCryptoProviderNotConfigured(com.fsck.k9.mailstore.MessageViewInfo)",
        "The goal of the `showCryptoProviderNotConfigured` method is to display a message indicating that a crypto provider is not configured for a given message view and provide an option to configure the provider."
      ],
      [
        "showMessageEncryptedButIncomplete(com.fsck.k9.mailstore.MessageViewInfo,android.graphics.drawable.Drawable)",
        "Displays a message as encrypted but incomplete with the given provider icon."
      ]
    ],
    "com.fsck.k9.ui.messageview.MessageContainerView$SavedState": [
      [
        "writeToParcel(android.os.Parcel,int)",
        "The `writeToParcel` method writes the state of a `MessageContainerView` instance to a `Parcel` object, including whether the attachment and picture views are visible or not."
      ]
    ],
    "com.fsck.k9.ui.messageview.CryptoInfoDialog$OnClickShowCryptoKeyListener": [
      [
        "onClickShowSecurityWarning()",
        "The goal of the `onClickShowSecurityWarning()` method is to display a security warning in response to the user clicking on the option to show more information about the cryptographic security of a message."
      ],
      [
        "onClickShowCryptoKey()",
        "The goal of this method is to handle the user clicking on the \"Show Key\" button in the CryptoInfoDialog."
      ]
    ],
    "com.fsck.k9.ui.messageview.MessageViewFragment$MessageViewFragmentListener": [
      [
        "disableDeleteAction()",
        "The goal of this method is to disable the ability to delete a message in the message view fragment."
      ],
      [
        "updateMenu()",
        "The method updates the menu options for the message view fragment."
      ],
      [
        "onForward(com.fsck.k9.activity.MessageReference,android.os.Parcelable)",
        "The method is called when the user attempts to forward an email message and receives the reference to the message and the result of the decryption process for the reply."
      ],
      [
        "setProgress(boolean)",
        "The method is used to display or hide a progress indicator for a message view fragment."
      ],
      [
        "showNextMessageOrReturn()",
        "The goal of the method is to show the next message or return to the previous screen."
      ],
      [
        "onReply(com.fsck.k9.activity.MessageReference,android.os.Parcelable)",
        "The `onReply` method is used to handle the action of replying to a message and passing along any decryption results associated with the reply."
      ],
      [
        "messageHeaderViewAvailable(com.fsck.k9.view.MessageHeader)",
        "This method is called to provide the fragment with a reference to the message header view."
      ],
      [
        "onReplyAll(com.fsck.k9.activity.MessageReference,android.os.Parcelable)",
        "The goal of the method is to handle the user's request to reply to all recipients of a message along with the decryption result if applicable."
      ],
      [
        "displayMessageSubject(java.lang.String)",
        "The goal of the `displayMessageSubject` method is to display the subject of a message in a user interface."
      ]
    ],
    "com.fsck.k9.ui.messageview.LockedAttachmentView": [
      [
        "onClick(android.view.View)",
        "The goal of this method is to display an unlocked view of a locked attachment when the locked button is clicked."
      ],
      [
        "setAttachment(com.fsck.k9.mailstore.AttachmentViewInfo)",
        "The method sets the attachment view info for a locked attachment view."
      ],
      [
        "setCallback(com.fsck.k9.ui.messageview.AttachmentViewCallback)",
        "The `setCallback` method sets the `attachmentCallback` field of the `LockedAttachmentView` instance to the provided `AttachmentViewCallback` object."
      ]
    ],
    "com.fsck.k9.ui.messageview.OnCryptoClickListener": [
      [
        "onCryptoClick()",
        "The goal of the method `onCryptoClick()` is to handle a user clicking on the crypto-related UI element in the message view."
      ]
    ],
    "com.fsck.k9.ui.messageview.AttachmentController$IntentAndResolvedActivitiesCount": [
      [
        "getIntent()",
        "The `getIntent()` method returns the intent associated with the AttachmentController activity."
      ],
      [
        "getMimeType()",
        "The `getMimeType()` method returns the MIME type of the attachment."
      ],
      [
        "hasResolvedActivities()",
        "The method returns true if there are resolved activities, meaning if `activitiesCount` is greater than 0."
      ],
      [
        "containsFileUri()",
        "The method checks if the intent data contains a file URI."
      ]
    ],
    "com.fsck.k9.ui.messageview.MessageContainerView$OnRenderingFinishedListener": [
      [
        "onLoadFinished()",
        "The goal of this method is to notify the listener that the message rendering has finished."
      ]
    ],
    "com.fsck.k9.ui.messageview.MessageContainerView": [
      [
        "hasHiddenExternalImages()",
        "The method returns a boolean indicating whether the message container view has hidden external images."
      ],
      [
        "onCreateContextMenu(android.view.ContextMenu,android.view.View,android.view.ContextMenu.ContextMenuInfo)",
        "The `onCreateContextMenu` method is responsible for creating and displaying a contextual menu with options for various types of items (links, images, phone numbers, and email addresses) within a web view in the MessageContainerView of the K-9 email client application."
      ],
      [
        "refreshAttachmentThumbnail(com.fsck.k9.mailstore.AttachmentViewInfo)",
        "The `refreshAttachmentThumbnail` method refreshes the thumbnail of a given attachment in the message container view."
      ],
      [
        "enableAttachmentButtons()",
        "The method enables the buttons associated with each attachment view within the message container view."
      ],
      [
        "renderAttachments(com.fsck.k9.mailstore.MessageViewInfo)",
        "The goal of the `renderAttachments` method is to add attachments to the message view container and display them for the user."
      ],
      [
        "displayMessageViewContainer(com.fsck.k9.mailstore.MessageViewInfo,com.fsck.k9.ui.messageview.MessageContainerView$OnRenderingFinishedListener,boolean,boolean,com.fsck.k9.ui.messageview.AttachmentViewCallback)",
        "The method displays a message view container with the message text and attachments, and calls a listener when rendering is finished."
      ],
      [
        "onFinishInflate()",
        "The goal of the `onFinishInflate()` method is to initialize and configure various views and variables used in the `MessageContainerView` class."
      ],
      [
        "showPictures()",
        "The goal of this method is to display pictures in the message container view by setting the load pictures flag to true and refreshing the displayed content."
      ],
      [
        "enableAttachmentButtons(com.fsck.k9.mailstore.AttachmentViewInfo)",
        "The method enables the buttons for the specified attachment view."
      ],
      [
        "disableAttachmentButtons()",
        "The goal of the method is to disable buttons for all attachments in the message container view."
      ],
      [
        "resetView()",
        "The `resetView()` method clears the displayed content of the message view, including pictures and attachments."
      ],
      [
        "onSaveInstanceState()",
        "The `onSaveInstanceState()` method is used to save the state of the message container view, including visibility of attachments and whether pictures are being displayed."
      ],
      [
        "disableAttachmentButtons(com.fsck.k9.mailstore.AttachmentViewInfo)",
        "The goal of this method is to disable the buttons for a specific attachment in the message container view."
      ],
      [
        "onRestoreInstanceState(android.os.Parcelable)",
        "The goal of the `onRestoreInstanceState` method is to restore the state of `MessageContainerView` after it has been previously saved."
      ],
      [
        "onLayoutChanged()",
        "The goal of this method is to invalidate the message content view when there is a change in the layout of the message container view."
      ],
      [
        "beginSelectingText()",
        "The goal of the method is to simulate holding the shift key down to initiate text selection in the message content view."
      ],
      [
        "zoom(android.view.KeyEvent)",
        "The `zoom` method allows the user to zoom in or out of the `mMessageContentView` in the `MessageContainerView` depending on whether the shift key is pressed or not."
      ]
    ],
    "com.fsck.k9.ui.messageview.CryptoInfoDialog": [
      [
        "onCreateDialog(android.os.Bundle)",
        "The goal of this method is to create an alert dialog that displays information about the cryptography status of an email message."
      ],
      [
        "newInstance(com.fsck.k9.view.MessageCryptoDisplayStatus,boolean)",
        "The method creates a new instance of a CryptoInfoDialog and sets its arguments with displayStatus and hasSecurityWarning values."
      ]
    ],
    "com.fsck.k9.ui.messageview.AttachmentView": [
      [
        "enableButtons()",
        "The method enables the View and Download buttons for an attachment in the message view."
      ],
      [
        "setAttachment(com.fsck.k9.mailstore.AttachmentViewInfo)",
        "The goal of the `setAttachment` method is to set the attachment being viewed and display its information."
      ],
      [
        "disableButtons()",
        "The method disables the \"view\" and \"download\" buttons of an email attachment."
      ],
      [
        "setCallback(com.fsck.k9.ui.messageview.AttachmentViewCallback)",
        "The goal of this method is to set the callback for handling user interactions with attachments in the MessageView screen."
      ],
      [
        "onLongClick(android.view.View)",
        "The `onLongClick` method checks if the long click event happened on the download button, and if so, performs an action and returns `true`. Otherwise, it returns `false`."
      ],
      [
        "onClick(android.view.View)",
        "The method handles clicks on two buttons in the `AttachmentView` and performs appropriate actions based on the button clicked."
      ],
      [
        "refreshThumbnail()",
        "The method `refreshThumbnail()` aims to load and display the thumbnail of an attachment using Glide library."
      ],
      [
        "getAttachment()",
        "The method returns the `AttachmentViewInfo` of the attachment displayed in the `AttachmentView`."
      ]
    ],
    "com.fsck.k9.ui.messageview.MessageCryptoPresenter": [
      [
        "onActivityResult(int,int,android.content.Intent)",
        "This method handles the result of activities started by the `MessageCryptoPresenter`, mainly related to unknown keys or security warnings during message encryption or decryption."
      ],
      [
        "onCryptoClick()",
        "The goal of the `onCryptoClick()` method is to handle user clicks on the crypto status button and display information or perform an action based on the current crypto status."
      ],
      [
        "onSaveInstanceState(android.os.Bundle)",
        "The goal of this method is to save the value of the boolean variable `overrideCryptoWarning` in the bundle `outState`."
      ],
      [
        "maybeHandleShowMessage(com.fsck.k9.ui.messageview.MessageTopView,com.fsck.k9.Account,com.fsck.k9.mailstore.MessageViewInfo)",
        "The goal of this method is to handle the display of various encryption and signing statuses of email messages."
      ],
      [
        "onResume()",
        "This method reloads the message crypto processing if a flag is set."
      ],
      [
        "getDecryptionResultForReply()",
        "The method retrieves the decryption result for an email reply if it was encrypted using OpenPGP."
      ],
      [
        "onClickShowMessageOverrideWarning()",
        "The goal of this method is to set the overrideCryptoWarning flag to true and redisplay the message on the message crypto MVP view."
      ],
      [
        "onClickShowCryptoKey()",
        "The goal of the method `onClickShowCryptoKey()` is to start a PendingIntent related to the OpenPGP signing key if it exists, to display the cryptographic key to the user."
      ],
      [
        "onClickRetryCryptoOperation()",
        "The goal of the method is to restart the processing of message crypto for the current message when the user clicks the retry button."
      ],
      [
        "onClickConfigureProvider()",
        "The goal of the method is to set a flag to reload the view without recreating it, and to show a dialog for configuring the crypto provider."
      ],
      [
        "onClickShowCryptoWarningDetails()",
        "The goal of the method is to show details of a warning related to insecure OpenPGP data encryption."
      ]
    ]
  },
  "com.fsck.k9.service": {
    "com.fsck.k9.service.RemoteControlReceiver": [
      [
        "receive(android.content.Context,android.content.Intent,java.lang.Integer)",
        "The goal of the method is to handle incoming remote control intents for the K-9 email client, either setting a service or retrieving a list of accounts."
      ]
    ],
    "com.fsck.k9.service.RemoteControlService": [
      [
        "startService(android.content.Intent,int)",
        "The `startService` method of `RemoteControlService` is used to receive incoming intents and change settings, reschedule email polling or restart push notifications for a specific K-9 Mail account."
      ],
      [
        "set(android.content.Context,android.content.Intent,java.lang.Integer)",
        "The goal of this method is to start the RemoteControlService with a specific action and wake lock ID."
      ]
    ],
    "com.fsck.k9.service.ShutdownReceiver": [
      [
        "onReceive(android.content.Context,android.content.Intent)",
        "The goal of this method is to release resources and prevent any scheduled intent from waking up K-9 on system shutdown."
      ]
    ],
    "com.fsck.k9.service.PollService": [
      [
        "stopService(android.content.Context)",
        "The `stopService` method stops the `PollService` by sending a broadcast to it with the `STOP_SERVICE` action."
      ],
      [
        "startService(android.content.Intent,int)",
        "The goal of the `startService` method is to start the polling service to check for new email messages in the background and acquire a wake lock if necessary."
      ],
      [
        "onCreate()",
        "The goal of the `onCreate()` method is to initialize the `PollService` and set the auto shutdown flag to false."
      ],
      [
        "onBind(android.content.Intent)",
        "This method is used to bind the service to an external client, but in this case, it does not return a binder object."
      ],
      [
        "startService(android.content.Context)",
        "The goal of this method is to start the `PollService` and acquire a wakelock to ensure the device does not go to sleep during the service execution."
      ]
    ],
    "com.fsck.k9.service.SleepService": [
      [
        "startService(android.content.Intent,int)",
        "The goal of this method is to handle the start of the SleepService and to check if a specific alarm has fired in order to end the sleep."
      ],
      [
        "sleep(android.content.Context,long,com.fsck.k9.mail.power.TracingPowerManager.TracingWakeLock,long)",
        "The method `sleep` is responsible for putting the device in sleep mode for a specified duration while holding a wake lock to keep the CPU running during that time."
      ]
    ],
    "com.fsck.k9.service.MailService": [
      [
        "isSyncBlocked()",
        "To return a boolean indicating whether the synchronization is blocked or not."
      ],
      [
        "getNextPollTime()",
        "The goal of this method is to return the time of the next scheduled poll for new emails."
      ],
      [
        "actionCancel(android.content.Context,java.lang.Integer)",
        "The goal of the `actionCancel` method is to cancel a wake lock associated with the `MailService` class in order to conserve device resources."
      ],
      [
        "isSyncDisabled()",
        "The method checks if email synchronization is disabled by checking if sync is blocked or if neither polling nor pushing is requested."
      ],
      [
        "connectivityChange(android.content.Context,java.lang.Integer)",
        "The goal of the `connectivityChange` method is to start the `MailService` with an intent that indicates a change in connectivity."
      ],
      [
        "isPollAndPushDisabled()",
        "The method checks if both polling and pushing of emails are disabled."
      ],
      [
        "actionReschedulePoll(android.content.Context,java.lang.Integer)",
        "The goal of this method is to reschedule the polling for new email in the MailService."
      ],
      [
        "startService(android.content.Intent,int)",
        "The goal of the `startService` method in class `com.fsck.k9.service.MailService` is to handle various actions triggered by intents and perform background tasks related to email synchronization and push notifications."
      ],
      [
        "saveLastCheckEnd(android.content.Context)",
        "The goal of the `saveLastCheckEnd(android.content.Context)` method is to save the timestamp of the last email check in the app's preferences."
      ],
      [
        "actionReset(android.content.Context,java.lang.Integer)",
        "The method is used to reset the MailService and acquire a wake lock to prevent the device from sleeping."
      ],
      [
        "onBind(android.content.Intent)",
        "The goal of the method is to bind the service to a client with the given intent, but since it is not used in the implementation, it simply returns null."
      ],
      [
        "hasNoConnectivity()",
        "The method returns whether the MailService has no network connectivity."
      ],
      [
        "onDestroy()",
        "The goal of the `onDestroy()` method in class `com.fsck.k9.service.MailService` is to log the destruction of the service and call the `onDestroy()` method of the parent class."
      ],
      [
        "isSyncNoBackground()",
        "To check if the email synchronization should occur without running the background synchronization service."
      ],
      [
        "onCreate()",
        "The goal of this method is to log a message when the MailService is created."
      ],
      [
        "actionRestartPushers(android.content.Context,java.lang.Integer)",
        "The method restarts push notifications for emails in the MailService class."
      ]
    ],
    "com.fsck.k9.service.StorageGoneReceiver": [
      [
        "onReceive(android.content.Context,android.content.Intent)",
        "This method handles storage unmount events and calls appropriate methods from the `StorageManager` class based on the type of action received."
      ]
    ],
    "com.fsck.k9.service.CoreService": [
      [
        "onDestroy()",
        "The goal of the `onDestroy()` method is to clean up resources and shut down the thread pool when the `CoreService` is stopped."
      ],
      [
        "onStartCommand(android.content.Intent,int,int)",
        "The `onStartCommand` method is responsible for starting the CoreService and acquiring a wake lock for it, as well as releasing any previously held wake locks and stopping the service if there is no outstanding work to be done."
      ],
      [
        "startService(android.content.Intent,int)",
        "Subclasses of `CoreService` need to implement this method to manage the service lifecycle and wake lock management."
      ],
      [
        "onCreate()",
        "The `onCreate()` method initializes a single-threaded thread pool for the `CoreService` class and logs information about its creation using Timber."
      ],
      [
        "onLowMemory()",
        "The `onLowMemory()` method is used to log a warning message indicating that the app is running low on memory."
      ],
      [
        "execute(android.content.Context,java.lang.Runnable,int,java.lang.Integer)",
        "The `execute` method runs a task in the background thread and acquires a wake lock, and shuts down the service if applicable."
      ],
      [
        "onBind(android.content.Intent)",
        "This method returns an IBinder interface for communicating with the service, which is not used in the implementation."
      ]
    ],
    "com.fsck.k9.service.CoreReceiver": [
      [
        "receive(android.content.Context,android.content.Intent,java.lang.Integer)",
        "The method returns an Integer wakeLockId."
      ],
      [
        "onReceive(android.content.Context,android.content.Intent)",
        "The goal of the method `onReceive` is to receive incoming system broadcast intents and execute corresponding actions."
      ],
      [
        "releaseWakeLock(android.content.Context,int)",
        "The goal of this method is to release a wake lock with a specified ID."
      ]
    ],
    "com.fsck.k9.service.PushService": [
      [
        "startService(android.content.Context)",
        "The goal of the method is to start the PushService with a wake lock to allow for processing of push notifications even when the device is in a sleep state."
      ],
      [
        "startService(android.content.Intent,int)",
        "The `startService` method of the `PushService` class starts or stops the service depending on the intent action received."
      ],
      [
        "onCreate()",
        "The goal of the method is to prevent the PushService from automatically shutting down."
      ],
      [
        "onBind(android.content.Intent)",
        "This method is typically used to provide a communication channel between the service and the rest of the application, but in this case, it returns null and appears to do nothing."
      ],
      [
        "stopService(android.content.Context)",
        "The goal of this method is to stop the PushService and release the wake lock associated with it."
      ]
    ],
    "com.fsck.k9.service.StorageReceiver": [
      [
        "onReceive(android.content.Context,android.content.Intent)",
        "The method handles intents related to media being mounted or unmounted, and calls the appropriate methods to manage email storage."
      ]
    ],
    "com.fsck.k9.service.PollService$Listener": [
      [
        "wakeLockRelease()",
        "The method releases the wake lock if it is not null."
      ],
      [
        "setStartId(int)",
        "The method sets the startId for the PollService listener."
      ],
      [
        "checkMailFinished(android.content.Context,com.fsck.k9.Account)",
        "The goal of this method is to log the completion of email checking and release resources."
      ],
      [
        "getStartId()",
        "The goal of this method is to retrieve the ID of the command that started the service."
      ],
      [
        "checkMailStarted(android.content.Context,com.fsck.k9.Account)",
        "The method clears a set of previously checked email accounts."
      ],
      [
        "wakeLockAcquire()",
        "The goal of the `wakeLockAcquire()` method is to acquire a wakelock to run the `PollService` and release the old wakelock if it exists."
      ],
      [
        "synchronizeMailboxFinished(com.fsck.k9.Account,java.lang.String,int,int)",
        "The method updates the number of new messages for a mailbox in the mailbox list of a specific email account."
      ]
    ],
    "com.fsck.k9.service.DatabaseUpgradeService": [
      [
        "onBind(android.content.Intent)",
        "The method returns an IBinder interface for the service, but in this case it returns null and is unused."
      ],
      [
        "onCreate()",
        "The goal of the `onCreate()` method is to initialize the `mLocalBroadcastManager` instance of the class with the application context."
      ],
      [
        "onStartCommand(android.content.Intent,int,int)",
        "The `onStartCommand` method starts a database upgrade process in the background or sends the progress of the current upgrade process via broadcast if it is already running."
      ],
      [
        "startService(android.content.Context)",
        "The goal of this method is to start the DatabaseUpgradeService."
      ]
    ],
    "com.fsck.k9.service.BootReceiver": [
      [
        "scheduleIntent(android.content.Context,long,android.content.Intent)",
        "The goal of the `scheduleIntent` method is to schedule an alarm intent for a specific time using the Android `AlarmManager`."
      ],
      [
        "cancelIntent(android.content.Context,android.content.Intent)",
        "The method cancels the specified alarmed intent by sending a cancel broadcast to the `BootReceiver` class."
      ],
      [
        "receive(android.content.Context,android.content.Intent,java.lang.Integer)",
        "The `receive` method handles various Intent actions for `BootReceiver`, including boot completed, device storage low or OK, connectivity changes, and scheduling or canceling alarms."
      ],
      [
        "purgeSchedule(android.content.Context)",
        "The method cancels any scheduled alarm in the given `android.content.Context`."
      ]
    ]
  },
  "com.fsck.k9.setup": {
    "com.fsck.k9.setup.ServerNameSuggester": [
      [
        "suggestServerName(com.fsck.k9.mail.ServerSettings.Type,java.lang.String)",
        "The `suggestServerName` method suggests a server name based on the server type and domain part."
      ]
    ]
  },
  "com.fsck.k9.search": {
    "com.fsck.k9.search.SearchAccount": [
      [
        "getDescription()",
        "The method returns the description of a search account."
      ],
      [
        "setEmail(java.lang.String)",
        "The goal of the method is to set the email address for a search account."
      ],
      [
        "getRelatedSearch()",
        "The method returns a LocalSearch object that is related to the current SearchAccount."
      ],
      [
        "getUuid()",
        "This method returns the ID of a `SearchAccount` object instance which is used as an opaque string to identify the object."
      ],
      [
        "setDescription(java.lang.String)",
        "The method sets the description of a search account."
      ],
      [
        "createAllMessagesAccount(android.content.Context)",
        "The goal of the method is to create a search account for all messages in the given context."
      ],
      [
        "getId()",
        "The method returns the ID of the search account as a string."
      ],
      [
        "getEmail()",
        "The method retrieves the email address associated with a specific search account."
      ],
      [
        "createUnifiedInboxAccount(android.content.Context)",
        "The goal of this method is to create a unified inbox meta account that integrates all accounts by default when none is specified."
      ]
    ],
    "com.fsck.k9.search.SearchSpecification": [
      [
        "getConditions()",
        "The method returns the root node of the condition tree used in a search."
      ],
      [
        "getName()",
        "The method `getName()` returns the name of a search, if it was given one."
      ],
      [
        "getAccountUuids()",
        "The goal of the `getAccountUuids()` method is to return an array of account UUIDs that the search specification applies to."
      ]
    ],
    "com.fsck.k9.search.LocalSearch": [
      [
        "or(com.fsck.k9.search.ConditionsTreeNode)",
        "The goal of the `or(com.fsck.k9.search.ConditionsTreeNode)` method in class `com.fsck.k9.search.LocalSearch` is to add the provided node as the second argument of an OR clause to this node."
      ],
      [
        "clone()",
        "The `clone()` method returns a new instance of the `LocalSearch` class with all its fields copied and shallow-copied collections."
      ],
      [
        "describeContents()",
        "The `describeContents()` method is meant to describe any special objects contained in the `LocalSearch` object to be written into a `Parcel`."
      ],
      [
        "isManualSearch()",
        "The goal of this method is to return a boolean indicating whether the search was initiated manually by the user or automatically by the system."
      ],
      [
        "getAccountUuids()",
        "This method returns an array of account UUIDs that are being matched against in the search."
      ],
      [
        "or(com.fsck.k9.search.SearchSpecification$SearchCondition)",
        "The method adds a new condition as the second argument of an OR clause to the search tree."
      ],
      [
        "getName()",
        "The `getName()` method returns the name of a saved search as a string."
      ],
      [
        "and(com.fsck.k9.search.ConditionsTreeNode)",
        "The goal of this method is to add another condition to the search query and connect it with a logical AND operator."
      ],
      [
        "getFolderNames()",
        "The goal of the `getFolderNames()` method is to extract a list of folder names from a set of search conditions."
      ],
      [
        "addAccountUuids(java.lang.String[])",
        "The method adds multiple account uuids to be matched by a search."
      ],
      [
        "isPredefined()",
        "The method checks whether the search was pre-defined and shipped with K-9 mail client."
      ],
      [
        "getConditions()",
        "The goal of this method is to return the root node of the conditions tree for a local search."
      ],
      [
        "searchAllAccounts()",
        "The goal of this method is to return a boolean that indicates whether or not to search all accounts."
      ],
      [
        "writeToParcel(android.os.Parcel,int)",
        "The goal of the method is to write the state of a `LocalSearch` object to a `Parcel` object for later retrieval."
      ],
      [
        "addAllowedFolder(java.lang.String)",
        "The goal of this method is to add a folder to the list of folders that will be searched."
      ],
      [
        "addAccountUuid(java.lang.String)",
        "The goal of the method `addAccountUuid` in class `com.fsck.k9.search.LocalSearch` is to add a new account UUID to the list of search targets."
      ],
      [
        "and(com.fsck.k9.search.SearchSpecification$SearchField,java.lang.String,com.fsck.k9.search.SearchSpecification$Attribute)",
        "The goal of this method is to add a new search condition to the LocalSearch node using an AND clause."
      ],
      [
        "and(com.fsck.k9.search.SearchSpecification$SearchCondition)",
        "The goal of the `and` method is to add a provided condition as the second argument of an AND clause to the current node."
      ],
      [
        "getRemoteSearchArguments()",
        "The goal of the `getRemoteSearchArguments()` method is to return a string value that represents the search arguments for a remote search."
      ],
      [
        "setName(java.lang.String)",
        "The method sets the name of a saved search."
      ],
      [
        "getLeafSet()",
        "The goal of the `getLeafSet()` method is to return a set of all the leaf conditions of the related condition tree."
      ],
      [
        "removeAccountUuid(java.lang.String)",
        "The goal of the `removeAccountUuid` method is to remove an account UUID from the current search and return whether it was successfully removed or not."
      ],
      [
        "setManualSearch(boolean)",
        "The method sets whether the search was initiated manually."
      ]
    ],
    "com.fsck.k9.search.ConditionsTreeNode": [
      [
        "describeContents()",
        "The goal of the `describeContents()` method in the `ConditionsTreeNode` class is to return a bitmask indicating the set of special object types contained in the Parcelable."
      ],
      [
        "writeToParcel(android.os.Parcel,int)",
        "The `writeToParcel(android.os.Parcel,int)` method writes the state of a `ConditionsTreeNode` object to a `Parcel`."
      ],
      [
        "or(com.fsck.k9.search.ConditionsTreeNode)",
        "The `or` method adds the given expression as the second argument of an OR clause to this node and returns a new top OR node."
      ],
      [
        "or(com.fsck.k9.search.SearchSpecification$SearchCondition)",
        "This method adds the provided condition as the second argument of an OR clause to the current node and returns the new top OR node."
      ],
      [
        "preorder()",
        "The goal of the `preorder()` method is to return a list of all the nodes in a subtree in pre-order traversal."
      ],
      [
        "and(com.fsck.k9.search.SearchSpecification$SearchCondition)",
        "The goal of the `and` method is to add a provided search condition as the second argument in an AND clause to this node and return a new top AND node as the new root."
      ],
      [
        "getLeafSet()",
        "The goal of the `getLeafSet()` method is to return a set of all the leaves (nodes without children) in the tree."
      ],
      [
        "and(com.fsck.k9.search.ConditionsTreeNode)",
        "The `and` method adds an expression as the second argument of an AND clause to a ConditionsTreeNode."
      ],
      [
        "getCondition()",
        "To retrieve the stored condition of the search specification in the current node of the search conditions tree."
      ],
      [
        "buildTreeFromDB(android.database.Cursor)",
        "The method builds a condition tree from a database cursor pointing to rows representing the nodes of the tree."
      ],
      [
        "applyMPTTLabel()",
        "The goal of the `applyMPTTLabel()` method is to apply the Modified Preorder Tree Traversal labeling to the subtree of which the node is the root node."
      ]
    ],
    "com.fsck.k9.search.SqlQueryBuilder": [
      [
        "addPrefixToSelection(java.lang.String[],java.lang.String,java.lang.String)",
        "The goal of this method is to add a prefix to the column names in a selection query for a SQL database."
      ],
      [
        "buildWhereClause(com.fsck.k9.Account,com.fsck.k9.search.ConditionsTreeNode,java.lang.StringBuilder,java.util.List)",
        "The method builds a SQL WHERE clause for a given account and search conditions, and appends it to a query string with accompanying selection arguments."
      ]
    ],
    "com.fsck.k9.search.SearchSpecification$SearchCondition": [
      [
        "hashCode()",
        "The method calculates the hash code of the object based on its attribute, field, and value."
      ],
      [
        "clone()",
        "The goal of the `clone()` method is to create and return a new instance of `SearchCondition` with the same field, attribute, and value as the original object."
      ],
      [
        "writeToParcel(android.os.Parcel,int)",
        "The goal of this method is to write the data of a `SearchCondition` object into a `Parcel` object for transfer between processes."
      ],
      [
        "toHumanString()",
        "The goal of the method is to convert the fields and attributes of a `SearchCondition` object to a human-readable string."
      ],
      [
        "describeContents()",
        "The method returns a bitmask indicating whether or not the object's contents include a file descriptor."
      ],
      [
        "equals(java.lang.Object)",
        "The goal of the method is to check if two `SearchCondition` objects are equal based on their attribute, field, and value."
      ]
    ]
  },
  "com.fsck.k9.view": {
    "com.fsck.k9.view.MessageHeader$OnLayoutChangedListener": [
      [
        "onLayoutChanged()",
        "The goal of the `onLayoutChanged()` method is to notify the listener when the layout of a message header has changed."
      ]
    ],
    "com.fsck.k9.view.HighlightDialogFragment": [
      [
        "onDismiss(android.content.DialogInterface)",
        "The goal of this method is to dismiss the dialog and hide the showcase view."
      ],
      [
        "onStart()",
        "The goal of the method is to prepare and display the highlight dialog fragment by hiding the keyboard, setting the dialog background dim, and highlighting the view in the background."
      ]
    ],
    "com.fsck.k9.view.CryptoModeSelector$CryptoStatusSelectedListener": [
      [
        "onCryptoStatusSelected(com.fsck.k9.view.CryptoModeSelector$CryptoModeSelectorState)",
        "The goal of the `onCryptoStatusSelected` method is to receive notifications when a crypto status has been selected in the Crypto Mode Selector."
      ]
    ],
    "com.fsck.k9.view.ViewSwitcher": [
      [
        "setFirstInAnimation(android.view.animation.Animation)",
        "This method sets the animation for when the first child view of the view switcher is shown."
      ],
      [
        "onAnimationStart(android.view.animation.Animation)",
        "The method is empty and its goal is to indicate that no actions are performed at the start of an animation in ViewSwitcher."
      ],
      [
        "setSecondOutAnimation(android.view.animation.Animation)",
        "The method sets the animation to be used when the second view in a ViewSwitcher is being hidden."
      ],
      [
        "getSecondInAnimation()",
        "The goal of this method is to return the second animation that is set for the ViewSwitcher."
      ],
      [
        "showSecondView()",
        "The goal of the method is to switch to the second view in the view switcher and play animations if necessary."
      ],
      [
        "setOnSwitchCompleteListener(com.fsck.k9.view.ViewSwitcher$OnSwitchCompleteListener)",
        "The method sets a listener to be notified when a view switch animation is complete."
      ],
      [
        "showFirstView()",
        "The goal of the `showFirstView()` method is to display the first view in the ViewSwitcher."
      ],
      [
        "getFirstInAnimation()",
        "The goal of the method is to return the animation used for the first view when it is being shown in the ViewSwitcher."
      ],
      [
        "getmFirstOutAnimation()",
        "This method returns the first out animation currently set on the ViewSwitcher object."
      ],
      [
        "setFirstOutAnimation(android.view.animation.Animation)",
        "This method sets the animation to be used for the outgoing view in a ViewSwitcher."
      ],
      [
        "getSecondOutAnimation()",
        "The goal of the `getSecondOutAnimation()` method is to return the second out animation of a `ViewSwitcher` object."
      ],
      [
        "setSecondInAnimation(android.view.animation.Animation)",
        "This method sets the animation for when the second view is being brought into the view switcher."
      ],
      [
        "onAnimationEnd(android.view.animation.Animation)",
        "The goal of the method is to notify the listener that the transition animation has ended and provide the index of the currently displayed child view."
      ],
      [
        "onAnimationRepeat(android.view.animation.Animation)",
        "This method is used to handle animation repeating in the ViewSwitcher but is currently unused."
      ]
    ],
    "com.fsck.k9.view.NonLockingScrollView": [
      [
        "onInterceptTouchEvent(android.view.MotionEvent)",
        "The goal of this method is to intercept touch events and handle them in a custom way, without allowing child views to handle click events falsely after a drag."
      ],
      [
        "requestChildFocus(android.view.View,android.view.View)",
        "The goal of the `requestChildFocus` method in class `NonLockingScrollView` is to prevent scrolling of a `MessageWebView` if it is already partially in view and has been first touched."
      ]
    ],
    "com.fsck.k9.view.MessageCryptoDisplayStatus": [
      [
        "isUnencryptedSigned()",
        "The goal of the method `isUnencryptedSigned()` is to determine if a message is unencrypted but has a signature status."
      ],
      [
        "fromResultAnnotation(com.fsck.k9.mailstore.CryptoResultAnnotation)",
        "The goal of this method is to convert a `CryptoResultAnnotation` object into a `MessageCryptoDisplayStatus` enumeration value."
      ],
      [
        "hasAssociatedKey()",
        "The method checks if a `MessageCryptoDisplayStatus` enumeration has an associated key."
      ]
    ],
    "com.fsck.k9.view.MessageWebView": [
      [
        "emulateShiftHeld()",
        "The goal of the `emulateShiftHeld()` method is to simulate the shift key being pressed to enable text selection mode in a WebView."
      ],
      [
        "displayHtmlContentWithInlineAttachments(java.lang.String,com.fsck.k9.mailstore.AttachmentResolver,com.fsck.k9.view.MessageWebView$OnPageFinishedListener)",
        "The goal of this method is to display HTML content with inline attachments in a message view."
      ],
      [
        "blockNetworkData(boolean)",
        "The goal of the `blockNetworkData(boolean)` method is to configure a web view to either allow or block the loading of network data based on the `shouldBlockNetworkData` parameter."
      ],
      [
        "configure()",
        "The `configure()` method sets up the `MessageWebView` to display a message in accordance with the user's preferences."
      ]
    ],
    "com.fsck.k9.view.MessageHeader": [
      [
        "setCryptoStatus(com.fsck.k9.view.MessageCryptoDisplayStatus)",
        "The method sets the display status of the message's crypto icon and enables it."
      ],
      [
        "onShowAdditionalHeaders()",
        "The goal of the `onShowAdditionalHeaders()` method is to show or hide additional header information and expand or collapse the \"To\" and \"Cc\" header views accordingly."
      ],
      [
        "populate(com.fsck.k9.mail.Message,com.fsck.k9.Account)",
        "The method `populate` populates the message header with relevant information about the email message."
      ],
      [
        "setOnCryptoClickListener(com.fsck.k9.ui.messageview.OnCryptoClickListener)",
        "The goal of the `setOnCryptoClickListener` method in the `MessageHeader` class is to set the listener for the header's crypto button click events."
      ],
      [
        "onSaveInstanceState()",
        "The goal of the method is to save the state of the MessageHeader view, including the visibility of any additional headers."
      ],
      [
        "showSubjectLine()",
        "The goal of the `showSubjectLine()` method is to make the subject view visible in the message header."
      ],
      [
        "additionalHeadersVisible()",
        "This method returns whether the additional headers view is currently visible or not."
      ],
      [
        "onClick(android.view.View)",
        "The goal of this method is to handle click events on various views in the message header and perform corresponding actions."
      ],
      [
        "onLongClick(android.view.View)",
        "The `onLongClick` method determines which view was long-clicked and adds the respective address(es) to the clipboard for further use."
      ],
      [
        "hideCryptoStatus()",
        "The goal of the method is to hide the crypto status icon in the message header."
      ],
      [
        "setOnFlagListener(android.view.View.OnClickListener)",
        "The method sets a click listener for a view element representing the \"flagged\" status of an email message."
      ],
      [
        "createMessage(int)",
        "The goal of the method is to create a message to be displayed to the user indicating how many email addresses have been copied to the clipboard."
      ],
      [
        "setOnLayoutChangedListener(com.fsck.k9.view.MessageHeader$OnLayoutChangedListener)",
        "The goal of this method is to set a listener to be informed when the layout of the MessageHeader changes."
      ],
      [
        "shouldShowSender(com.fsck.k9.mail.Message)",
        "The method determines if the sender should be shown in the message header."
      ],
      [
        "onRestoreInstanceState(android.os.Parcelable)",
        "The goal of the method is to restore the saved state of the MessageHeader view."
      ],
      [
        "setCryptoStatusDisabled()",
        "The goal of this method is to set the message crypto status to disabled and update the visibility and state of the icon accordingly."
      ],
      [
        "setCryptoStatusLoading()",
        "The method sets the crypto status icon to indicate that loading of crypto information is in progress."
      ]
    ],
    "com.fsck.k9.view.ClientCertificateSpinner": [
      [
        "setAlias(java.lang.String)",
        "This method sets the alias value of the client certificate used for secure communication."
      ],
      [
        "getAlias()",
        "The `getAlias()` method returns the selected alias from the client certificate spinner, or null if no alias is selected."
      ],
      [
        "chooseCertificate()",
        "The `chooseCertificate()` method allows the user to select a client certificate alias."
      ],
      [
        "setOnClientCertificateChangedListener(com.fsck.k9.view.ClientCertificateSpinner$OnClientCertificateChangedListener)",
        "The method sets a listener to be notified when the selected client certificate changes in a spinner view."
      ]
    ],
    "com.fsck.k9.view.K9WebViewClient": [
      [
        "newInstance(com.fsck.k9.mailstore.AttachmentResolver)",
        "The goal of this method is to create a new instance of `K9WebViewClient` based on the current Android version, with the option to provide an `AttachmentResolver`."
      ],
      [
        "onPageFinished(android.webkit.WebView,java.lang.String)",
        "The goal of this method is to notify the `onPageFinishedListener` that the web page has finished loading."
      ],
      [
        "setOnPageFinishedListener(com.fsck.k9.view.MessageWebView$OnPageFinishedListener)",
        "The method sets a listener to be called when the web page finishes loading in a message WebView in the K9 email client."
      ],
      [
        "shouldOverrideUrlLoading(android.webkit.WebView,java.lang.String)",
        "The goal of this method is to handle URL loading and decide whether to proceed with loading a web page in the WebView or open it in a new browser window."
      ]
    ],
    "com.fsck.k9.view.MessageWebView$OnPageFinishedListener": [
      [
        "onPageFinished()",
        "The method is called when a web page has finished loading in a MessageWebView and its goal is to signal that the loading process has finished."
      ]
    ],
    "com.fsck.k9.view.ClientCertificateSpinner$OnClientCertificateChangedListener": [
      [
        "onClientCertificateChanged(java.lang.String)",
        "The method is called when the selected client certificate is changed in a spinner, and takes the new certificate's alias as its parameter."
      ]
    ],
    "com.fsck.k9.view.MessageTitleView": [
      [
        "showSubjectInMessageHeader()",
        "The goal of the method is to show the subject line in the message header."
      ],
      [
        "setMessageHeader(com.fsck.k9.view.MessageHeader)",
        "The method sets the message header for the message title view."
      ],
      [
        "onDraw(android.graphics.Canvas)",
        "The goal of the method `onDraw()` is to check if the length of the text in `MessageTitleView` is longer than the maximum allowed lines, and if so, manually truncate the text and append an ellipsis, and then display the truncated subject line in the corresponding `MessageHeader`."
      ]
    ],
    "com.fsck.k9.view.K9WebViewClient$LollipopWebViewClient": [
      [
        "shouldInterceptRequest(android.webkit.WebView,android.webkit.WebResourceRequest)",
        "The goal of the method is to intercept a web resource request made by a WebView and return a custom response."
      ]
    ],
    "com.fsck.k9.view.K9WebViewClient$PreLollipopWebViewClient": [
      [
        "shouldInterceptRequest(android.webkit.WebView,java.lang.String)",
        "The method intercepts a request made by a web page loaded in a WebView and returns the corresponding web resource response."
      ]
    ],
    "com.fsck.k9.view.RecipientSelectView$Recipient": [
      [
        "equals(java.lang.Object)",
        "The goal of the `equals` method is to check if the given object is equal to the current instance based solely on the address of the recipient."
      ],
      [
        "getDisplayNameOrUnknown(android.content.Context)",
        "This method returns the display name of a recipient or a default string if the display name is null."
      ],
      [
        "setCryptoStatus(com.fsck.k9.view.RecipientSelectView$RecipientCryptoStatus)",
        "The method sets the crypto status of a recipient in a recipient select view."
      ],
      [
        "getContactLookupUri()",
        "This method returns the lookup URI for a contact in the Android ContactsContract based on the contact ID and lookup key."
      ],
      [
        "isValidEmailAddress()",
        "The goal of the `isValidEmailAddress()` method is to check if the email address is valid by verifying that `getAddress()` returns a non-null value."
      ],
      [
        "getDisplayNameOrAddress()",
        "The method returns the display name of a recipient if available, or else it returns the email address."
      ],
      [
        "getCryptoStatus()",
        "The method returns the crypto status of the recipient, which is an object of class `com.fsck.k9.view.RecipientSelectView.RecipientCryptoStatus`."
      ],
      [
        "getNameOrUnknown(android.content.Context)",
        "The method returns the name of the recipient if available, otherwise it returns a string indicating that the recipient is unknown."
      ]
    ],
    "com.fsck.k9.view.FoldableLinearLayout": [
      [
        "addView(android.view.View)",
        "The goal of the method is to add the provided child view to the foldableContainer View."
      ]
    ],
    "com.fsck.k9.view.RecipientSelectView$TokenListener": [
      [
        "onTokenChanged(java.lang.Object)",
        "The method is called when the selected token in a `RecipientSelectView` changes."
      ]
    ],
    "com.fsck.k9.view.ToolableViewAnimator": [
      [
        "setDisplayedChildId(int)",
        "The method sets the currently displayed child view of the ToolableViewAnimator to the one specified by the given ID."
      ],
      [
        "setDisplayedChild(int,boolean)",
        "The `setDisplayedChild(int,boolean)` method sets the displayed child view with or without animation depending on the value of `animate`."
      ],
      [
        "setDisplayedChild(int)",
        "The goal of the method is to set the displayed child of the ViewAnimator only if the requested child is different from the currently displayed child."
      ],
      [
        "addView(android.view.View,int,android.view.ViewGroup$LayoutParams)",
        "The method adds a view to the `ToolableViewAnimator` with the given index and layout parameters, and can be skipped during editing mode."
      ],
      [
        "getDisplayedChildId()",
        "This method returns the ID of the currently displayed child view in the ToolableViewAnimator."
      ]
    ],
    "com.fsck.k9.view.ViewSwitcher$OnSwitchCompleteListener": [
      [
        "onSwitchComplete(int)",
        "The method is called after a view switch animation has completed, and its goal is to receive the index of the child view that is now displayed."
      ]
    ],
    "com.fsck.k9.view.NonLockingScrollView$HierarchyTreeChangeListener": [
      [
        "onChildViewRemoved(android.view.View,android.view.View)",
        "The goal of this method is to remove child views from the parent view and update a list of children that require all touch events and remove setOnHierarchyChangeListener of child views that are ViewGroups."
      ],
      [
        "onChildViewAdded(android.view.View,android.view.View)",
        "The goal of this method is to add child views to the hierarchy tree and to keep track of web views that require all touches."
      ]
    ],
    "com.fsck.k9.view.MessageCryptoStatusView": [
      [
        "setCryptoDisplayStatus(com.fsck.k9.view.MessageCryptoDisplayStatus)",
        "The goal of the `setCryptoDisplayStatus` method is to update the display status of the message's encryption or signing status by changing the appearance of the view accordingly."
      ]
    ],
    "com.fsck.k9.view.FoldableLinearLayout$SavedState": [
      [
        "writeToParcel(android.os.Parcel,int)",
        "The goal of the method is to write the state of the FoldableLinearLayout to a Parcel."
      ]
    ],
    "com.fsck.k9.view.LinearViewAnimator": [
      [
        "setUpInAnimation(android.view.animation.Animation)",
        "The method sets up the animation for the view when it is coming in."
      ],
      [
        "setUpOutAnimation(android.content.Context,int)",
        "The method sets up an out animation by loading an animation resource from a context."
      ],
      [
        "setDownInAnimation(android.view.animation.Animation)",
        "The method sets the animation used for the down-in transition of views in the LinearViewAnimator."
      ],
      [
        "setUpInAnimation(android.content.Context,int)",
        "The goal of this method is to set up the input animation using the specified resource ID and context."
      ],
      [
        "setDownOutAnimation(android.content.Context,int)",
        "The method sets a downward animation for when a view is removed from the LinearViewAnimator using a specified resource ID."
      ],
      [
        "setUpOutAnimation(android.view.animation.Animation)",
        "The method sets up an animation for when a view is being moved out of the LinearViewAnimator."
      ],
      [
        "setDownOutAnimation(android.view.animation.Animation)",
        "The method sets a downward-outward animation for the LinearViewAnimator."
      ],
      [
        "setDownInAnimation(android.content.Context,int)",
        "The method sets a downward animation for the LinearViewAnimator using the animation resource ID provided."
      ],
      [
        "setDisplayedChild(int)",
        "The `setDisplayedChild(int)` method sets the currently displayed child view of the LinearViewAnimator to the specified index."
      ],
      [
        "setDisplayedChild(int,boolean)",
        "The method sets the displayed child of the LinearViewAnimator with optional animation."
      ]
    ],
    "com.fsck.k9.view.MessageHeader$SavedState": [
      [
        "writeToParcel(android.os.Parcel,int)",
        "The method writes the state of the additional headers visibility to a parcel."
      ]
    ],
    "com.fsck.k9.view.ThemeUtils": [
      [
        "getStyledColor(android.content.res.Resources.Theme,int)",
        "This method returns the color value of a given theme attribute."
      ],
      [
        "getStyledColor(android.content.Context,int)",
        "This method retrieves a styled color from the current theme of the given context and attribute."
      ]
    ],
    "com.fsck.k9.view.RecipientSelectView": [
      [
        "onLoaderReset(android.content.Loader)",
        "The `onLoaderReset` method is called when the loader is being reset, and it clears the recipients list and highlights of the adapter for the recipient select view if the loader ID is for filtering."
      ],
      [
        "hasUncompletedText()",
        "The method checks if there is any incomplete text typed in the recipient select view."
      ],
      [
        "onLoadFinished(android.content.Loader,java.util.List)",
        "The goal of the `onLoadFinished` method is to handle the results of loading recipients for the RecipientSelectView object and update the UI accordingly."
      ],
      [
        "setCryptoProvider(java.lang.String,boolean)",
        "The goal of the method is to set the cryptographic provider and decide whether to show advanced information or not in the RecipientSelectView."
      ],
      [
        "setLoaderManager(android.app.LoaderManager)",
        "The method sets the loader manager for the recipient selection view."
      ],
      [
        "setShowCryptoEnabled(boolean)",
        "The method sets whether or not to show a Crypto enabled feature in the recipient select view."
      ],
      [
        "onTouchEvent(android.view.MotionEvent)",
        "The goal of this method is to handle touch events on the RecipientSelectView and show alternates when a recipient token is touched."
      ],
      [
        "addRecipients(com.fsck.k9.view.RecipientSelectView$Recipient[])",
        "The goal of the method is to add recipients to the RecipientSelectView."
      ],
      [
        "showDropDown()",
        "The goal of the method is to show a dropdown list of recipients in the `RecipientSelectView` if the adapter is valid."
      ],
      [
        "onCreateLoader(int,android.os.Bundle)",
        "The `onCreateLoader` method creates and returns a loader for filtering recipients based on the query string or for loading alternate recipients."
      ],
      [
        "postShowAlternatesPopup(java.util.List)",
        "The goal of the method is to delay the call to show a popup with a list of alternate recipients until the soft keyboard is gone."
      ],
      [
        "setTokenListener(com.fsck.k9.view.RecipientSelectView$TokenListener)",
        "The method sets a specialized listener for handling changes to tokens (e.g. email addresses) in a recipient selection view."
      ],
      [
        "getAddresses()",
        "The `getAddresses()` method returns an array of email addresses that have been selected as recipients in the `RecipientSelectView`."
      ],
      [
        "performCompletion()",
        "The goal of this method is to perform the autocomplete functionality for the recipient select view."
      ],
      [
        "onKeyDown(int,android.view.KeyEvent)",
        "The goal of the method is to dismiss an alternate popup when a key is pressed."
      ],
      [
        "isEmpty()",
        "The goal of the `isEmpty()` method is to check if there are any objects in the `RecipientSelectView` and return a boolean value indicating the result."
      ],
      [
        "onFocusChanged(boolean,int,android.graphics.Rect)",
        "The goal of this method is to display the keyboard when the focus of the view changes to this `RecipientSelectView`."
      ],
      [
        "onRecipientRemove(com.fsck.k9.view.RecipientSelectView$Recipient)",
        "The method removes a recipient from the recipient select view and dismisses the alternate popup."
      ],
      [
        "showAlternatesPopup(java.util.List)",
        "The method shows a popup containing alternate recipients for a given recipient."
      ],
      [
        "onRecipientChange(com.fsck.k9.view.RecipientSelectView$Recipient,com.fsck.k9.view.RecipientSelectView$Recipient)",
        "The goal of the `onRecipientChange` method is to update the recipient information when a new recipient is selected."
      ],
      [
        "tryPerformCompletion()",
        "The goal of the method `tryPerformCompletion()` is to attempt to auto-complete the text currently present in the recipient select view input field and return whether or not it was successful in adding a new recipient."
      ]
    ],
    "com.fsck.k9.view.CryptoModeSelector": [
      [
        "setCryptoStatusListener(com.fsck.k9.view.CryptoModeSelector$CryptoStatusSelectedListener)",
        "The goal of this method is to set a listener for when the crypto status is selected in a `CryptoModeSelector` view."
      ],
      [
        "setCryptoStatus(com.fsck.k9.view.CryptoModeSelector$CryptoModeSelectorState)",
        "To set the current crypto mode selector state."
      ]
    ],
    "com.fsck.k9.view.ColorChip": [
      [
        "drawable()",
        "The goal of the method is to return the ShapeDrawable of a ColorChip object."
      ]
    ]
  },
  "com.fsck.k9.widget.list": {
    "com.fsck.k9.widget.list.MessageListWidgetProvider": [
      [
        "onReceive(android.content.Context,android.content.Intent)",
        "The goal of this method is to update the message list widget when the widget receives an update action intent."
      ],
      [
        "onUpdate(android.content.Context,android.appwidget.AppWidgetManager,int[])",
        "The `onUpdate` method updates all the widgets of type `MessageListWidgetProvider` with information from the `context` and the `appWidgetManager`."
      ],
      [
        "triggerMessageListWidgetUpdate(android.content.Context)",
        "The method updates the message list widget for all instantiated widgets."
      ]
    ],
    "com.fsck.k9.widget.list.MessageListWidgetService": [
      [
        "onGetViewFactory(android.content.Intent)",
        "This method returns a new instance of `MessageListRemoteViewFactory` to be used for displaying data in the Message List widget."
      ]
    ],
    "com.fsck.k9.widget.list.MessageListRemoteViewFactory": [
      [
        "getLoadingView()",
        "The `getLoadingView()` method aims to return a customized `RemoteViews` object to display a loading view for the MessageList widget."
      ],
      [
        "getItemId(int)",
        "The goal of this method is to return the ID of the item at the specified position."
      ],
      [
        "getCount()",
        "The method returns the number of mail items in the message list."
      ],
      [
        "onDestroy()",
        "To clean up any resources used by the `MessageListRemoteViewFactory`."
      ],
      [
        "hasStableIds()",
        "This method returns whether the items in the remote view factory have stable IDs or not."
      ],
      [
        "onCreate()",
        "The `onCreate()` method initializes some variables used in the message list widget, including the color of read and unread messages."
      ],
      [
        "getViewTypeCount()",
        "The goal of this method is to return the number of view types that will be used by the remote views in the message list."
      ],
      [
        "onDataSetChanged()",
        "The goal of the method is to clear the calling identity, load the message list and then restore the calling identity."
      ],
      [
        "getViewAt(int)",
        "The goal of this method is to create a RemoteViews object for a particular position in a list of mail items to be displayed in a widget."
      ]
    ]
  },
  "com.fsck.k9.notification": {
    "com.fsck.k9.notification.CertificateErrorNotifications": [
      [
        "clearCertificateErrorNotifications(com.fsck.k9.Account,boolean)",
        "The `clearCertificateErrorNotifications` method removes certificate error notifications for a specific account and direction (incoming or outgoing)."
      ],
      [
        "showCertificateErrorNotification(com.fsck.k9.Account,boolean)",
        "The goal of this method is to display a notification informing the user that there is a certificate error for a particular email account."
      ]
    ],
    "com.fsck.k9.notification.SendFailedNotifications": [
      [
        "showSendFailedNotification(com.fsck.k9.Account,java.lang.Exception)",
        "The method displays a notification to the user when an email fails to send in the K9 email client."
      ],
      [
        "clearSendFailedNotification(com.fsck.k9.Account)",
        "The method cancels the send failed notification for a specified account."
      ]
    ],
    "com.fsck.k9.notification.NotificationContentCreator": [
      [
        "createFromMessage(com.fsck.k9.Account,com.fsck.k9.mailstore.LocalMessage)",
        "The goal of the method `createFromMessage` is to create a notification content object from a given email message."
      ]
    ],
    "com.fsck.k9.notification.NotificationIds": [
      [
        "getAuthenticationErrorNotificationId(com.fsck.k9.Account,boolean)",
        "The goal of the method is to return the notification ID for an authentication error message for a given account and incoming/outgoing status."
      ],
      [
        "getCertificateErrorNotificationId(com.fsck.k9.Account,boolean)",
        "The method returns the notification ID for a certificate error notification for a specific account and incoming/outgoing server."
      ],
      [
        "getNewMailStackedNotificationId(com.fsck.k9.Account,int)",
        "The goal of this method is to generate a unique notification ID for a new email notification, taking into account the account and the index of stacked notifications."
      ],
      [
        "getNewMailSummaryNotificationId(com.fsck.k9.Account)",
        "The method returns a unique notification ID for the summary of new emails received for a given email account."
      ],
      [
        "getFetchingMailNotificationId(com.fsck.k9.Account)",
        "This method returns a unique notification ID for when K-9 Mail is fetching mail for a specific account."
      ],
      [
        "getSendFailedNotificationId(com.fsck.k9.Account)",
        "This method returns the unique notification ID for a send failed notification associated with a given account."
      ]
    ],
    "com.fsck.k9.notification.NotificationController": [
      [
        "clearNewMailNotifications(com.fsck.k9.Account)",
        "The method clears all notifications for a given email account."
      ],
      [
        "platformSupportsExtendedNotifications()",
        "This method checks whether the device's Android version supports extended notifications."
      ],
      [
        "showSendingNotification(com.fsck.k9.Account)",
        "The goal of this method is to show a sending notification for a given email account."
      ],
      [
        "removeNewMailNotification(com.fsck.k9.Account,com.fsck.k9.activity.MessageReference)",
        "The method removes a new mail notification for a specific account and message."
      ],
      [
        "showFetchingMailNotification(com.fsck.k9.Account,com.fsck.k9.mail.Folder)",
        "The goal of the method is to display a notification indicating that K-9 Mail is currently fetching email for a given email account and folder."
      ],
      [
        "clearSendingNotification(com.fsck.k9.Account)",
        "The method clears all notifications related to sending emails for a given email account."
      ],
      [
        "platformSupportsLockScreenNotifications()",
        "The goal of the method is to determine whether the current platform supports lock screen notifications by checking whether the SDK version is greater than or equal to Lollipop (API level 21)."
      ],
      [
        "clearCertificateErrorNotifications(com.fsck.k9.Account,boolean)",
        "The method clears certificate error notifications for a specific account and incoming server."
      ],
      [
        "showSendFailedNotification(com.fsck.k9.Account,java.lang.Exception)",
        "The method shows a notification for a failed email sent using the specified account and with the specified exception."
      ],
      [
        "showAuthenticationErrorNotification(com.fsck.k9.Account,boolean)",
        "The goal of this method is to show an authentication error notification for a given account and incoming status."
      ],
      [
        "showCertificateErrorNotification(com.fsck.k9.Account,boolean)",
        "The goal of this method is to show a certificate error notification for a specific account and incoming/outgoing server."
      ],
      [
        "newInstance(android.content.Context)",
        "The method creates a new instance of the NotificationController class using the provided context and returns it."
      ],
      [
        "clearSendFailedNotification(com.fsck.k9.Account)",
        "The method clears the \"send failed\" notification for a specified email account."
      ],
      [
        "clearAuthenticationErrorNotification(com.fsck.k9.Account,boolean)",
        "The goal of the `clearAuthenticationErrorNotification` method is to remove any previously shown authentication error notification for a given account and incoming server."
      ],
      [
        "clearFetchingMailNotification(com.fsck.k9.Account)",
        "The method clears the notification for new incoming emails being fetched for a specific account."
      ],
      [
        "addNewMailNotification(com.fsck.k9.Account,com.fsck.k9.mailstore.LocalMessage,int)",
        "The goal of the method is to add a new mail notification for a specific account and message."
      ]
    ],
    "com.fsck.k9.notification.DeviceNotifications": [
      [
        "buildSummaryNotification(com.fsck.k9.Account,com.fsck.k9.notification.NotificationData,boolean)",
        "The goal of the method is to build a notification based on the account, notification data, and a boolean indicating if the notification should be silent or not."
      ],
      [
        "newInstance(com.fsck.k9.notification.NotificationController,com.fsck.k9.notification.NotificationActionCreator,com.fsck.k9.notification.WearNotifications)",
        "Create a new instance of `DeviceNotifications` with the given parameters."
      ]
    ],
    "com.fsck.k9.notification.NotificationData": [
      [
        "getNewMessagesCount()",
        "The method returns the total count of new messages that have triggered the app's notifications."
      ],
      [
        "getAllMessageReferences()",
        "The method returns an ArrayList of MessageReference objects that includes all currently active notifications as well as additional notifications."
      ],
      [
        "getHolderForLatestNotification()",
        "The method returns the holder for the latest notification."
      ],
      [
        "addNotificationContent(com.fsck.k9.notification.NotificationContent)",
        "The goal of the `addNotificationContent()` method is to add a new notification or replace an existing one with new content in the `NotificationData` object."
      ],
      [
        "hasSummaryOverflowMessages()",
        "The method checks whether there are more active notifications than the maximum number of messages allowed for a summary notification in order to determine if there are overflow messages."
      ],
      [
        "getActiveNotificationIds()",
        "The goal of the `getActiveNotificationIds()` method is to retrieve an array of active notification IDs."
      ],
      [
        "getUnreadMessageCount()",
        "The method returns the total number of unread messages, including new messages."
      ],
      [
        "containsStarredMessages()",
        "This method checks whether there are any starred messages in the active notifications or additional notifications and returns true if there are."
      ],
      [
        "removeNotificationForMessage(com.fsck.k9.activity.MessageReference)",
        "The goal of the method is to remove a notification associated with a particular email message and return the result of the removal."
      ],
      [
        "getAccount()",
        "The goal of the method is to return the `com.fsck.k9.Account` instance stored in the `account` variable."
      ],
      [
        "getSummaryOverflowMessagesCount()",
        "The goal of this method is to return the count of additional notifications that could not be displayed in the summary notification due to exceeding the maximum number of allowed messages."
      ],
      [
        "getContentForSummaryNotification()",
        "The method returns a list of notification content for display in a summary notification."
      ],
      [
        "isSingleMessageNotification()",
        "The method checks if there is only one active notification."
      ],
      [
        "setUnreadMessageCount(int)",
        "The goal of this method is to set the number of unread messages in the `NotificationData` instance."
      ]
    ],
    "com.fsck.k9.notification.NewMailNotifications": [
      [
        "addNewMailNotification(com.fsck.k9.Account,com.fsck.k9.mailstore.LocalMessage,int)",
        "The goal of the `addNewMailNotification` method is to add a new notification for a new email message for a given account, considering the unread message count, and create stacked and summary notifications if necessary."
      ],
      [
        "clearNewMailNotifications(com.fsck.k9.Account)",
        "The method clears all new mail notifications and the new mail summary notification for a given email account."
      ],
      [
        "newInstance(com.fsck.k9.notification.NotificationController,com.fsck.k9.notification.NotificationActionCreator)",
        "The method creates a new instance of `NewMailNotifications` with `controller`, `contentCreator`, `deviceNotifications`, and `wearNotifications` as parameters."
      ],
      [
        "removeNewMailNotification(com.fsck.k9.Account,com.fsck.k9.activity.MessageReference)",
        "The goal of the `removeNewMailNotification` method is to remove a new mail notification for a specific account and message reference, and update the summary notification if necessary."
      ]
    ],
    "com.fsck.k9.notification.WearNotifications": [
      [
        "addSummaryActions(android.support.v4.app.NotificationCompat.Builder,com.fsck.k9.notification.NotificationData)",
        "The goal of this method is to add summary actions to a notification builder for use with wearable devices."
      ],
      [
        "buildStackedNotification(com.fsck.k9.Account,com.fsck.k9.notification.NotificationHolder)",
        "The goal of `buildStackedNotification` is to create and return a notification to be displayed on a wearable device for a given email account and notification holder."
      ]
    ],
    "com.fsck.k9.notification.AuthenticationErrorNotifications": [
      [
        "showAuthenticationErrorNotification(com.fsck.k9.Account,boolean)",
        "The method displays a notification for an authentication error in order to alert the user to a problem with their mailbox account."
      ]
    ],
    "com.fsck.k9.notification.SyncNotifications": [
      [
        "clearFetchingMailNotification(com.fsck.k9.Account)",
        "The method clears the notification for a specific email account that is currently fetching new mail."
      ],
      [
        "showFetchingMailNotification(com.fsck.k9.Account,com.fsck.k9.mail.Folder)",
        "The goal of the method is to display a notification indicating that the app is currently fetching mail for a given account and folder."
      ],
      [
        "showSendingNotification(com.fsck.k9.Account)",
        "The goal of the `showSendingNotification` method is to create and display a notification indicating that emails are being sent in the background for a specific email account."
      ],
      [
        "clearSendingNotification(com.fsck.k9.Account)",
        "The `clearSendingNotification` method cancels the notification for an account when outgoing mail is being sent."
      ]
    ],
    "com.fsck.k9.notification.RemoveNotificationResult": [
      [
        "shouldCreateNotification()",
        "The method returns true if `notificationHolder` is not null and a notification should be created."
      ],
      [
        "unknownNotification()",
        "The goal of `unknownNotification()` method is to create a new `RemoveNotificationResult` object with null input, 0 identifier and a flag indicating the notification is unknown."
      ],
      [
        "getNotificationHolder()",
        "This method returns a `NotificationHolder` for a notification if `shouldCreateNotification()` returns true; otherwise, it throws an exception."
      ],
      [
        "createNotification(com.fsck.k9.notification.NotificationHolder)",
        "The goal of the method is to create a new `RemoveNotificationResult` object using a `NotificationHolder` object and return it."
      ],
      [
        "isUnknownNotification()",
        "The method returns a boolean indicating whether a given notification is unknown."
      ],
      [
        "cancelNotification(int)",
        "The method returns a new instance of `RemoveNotificationResult` with the provided `notificationId`."
      ],
      [
        "getNotificationId()",
        "The method returns the ID of a notification if it is known, otherwise it throws an exception."
      ]
    ],
    "com.fsck.k9.notification.NotificationActionCreator": [
      [
        "createMarkAllAsReadPendingIntent(com.fsck.k9.Account,java.util.List,int)",
        "The method creates a PendingIntent to mark all messages in a list as read for a given account and notification."
      ],
      [
        "createArchiveMessagePendingIntent(com.fsck.k9.activity.MessageReference,int)",
        "The goal of this method is to create a pending intent for archiving a message with the specified message reference and notification ID."
      ],
      [
        "createDeleteMessagePendingIntent(com.fsck.k9.activity.MessageReference,int)",
        "This method creates a pending intent either for confirming deletion of a message or for directly deleting it based on user preferences."
      ],
      [
        "createViewFolderPendingIntent(com.fsck.k9.Account,java.lang.String,int)",
        "The method creates a pending intent for viewing a specific email folder for a given account."
      ],
      [
        "createArchiveAllPendingIntent(com.fsck.k9.Account,java.util.List,int)",
        "The method creates a PendingIntent for archiving all messages associated with a given account."
      ],
      [
        "createMarkMessageAsReadPendingIntent(com.fsck.k9.activity.MessageReference,int)",
        "The goal of this method is to create a pending intent that marks a message as read when it is triggered."
      ],
      [
        "createDeleteAllPendingIntent(com.fsck.k9.Account,java.util.List,int)",
        "The method creates either a confirmation or service pending intent for deleting all pending messages in the notification for a given account."
      ],
      [
        "getDeleteAllPendingIntent(com.fsck.k9.Account,java.util.List,int)",
        "The `getDeleteAllPendingIntent` method returns a `PendingIntent` that either confirms the deletion of multiple emails or queues them for deletion."
      ],
      [
        "createViewFolderListPendingIntent(com.fsck.k9.Account,int)",
        "The goal of this method is to create a pending intent that opens the folder list for a specific account when the user taps on a notification."
      ],
      [
        "createViewMessagePendingIntent(com.fsck.k9.activity.MessageReference,int)",
        "The method creates a pending intent for viewing a message with a specific reference and notification ID."
      ],
      [
        "getMarkAllAsReadPendingIntent(com.fsck.k9.Account,java.util.List,int)",
        "The `getMarkAllAsReadPendingIntent` method returns a pending intent for marking all email messages as read."
      ],
      [
        "createReplyPendingIntent(com.fsck.k9.activity.MessageReference,int)",
        "The goal of this method is to create a PendingIntent that launches the \"Reply\" action for a specific message on a specific notification."
      ],
      [
        "createViewMessagesPendingIntent(com.fsck.k9.Account,java.util.List,int)",
        "The goal of this method is to create a PendingIntent that will launch the appropriate task stack for viewing the specified list of message references in the correct account and folder."
      ],
      [
        "createDismissAllMessagesPendingIntent(com.fsck.k9.Account,int)",
        "The method creates a `PendingIntent` to dismiss all notifications for a given account and notification ID."
      ],
      [
        "createDismissMessagePendingIntent(android.content.Context,com.fsck.k9.activity.MessageReference,int)",
        "The goal of this method is to create a pending intent that can be used to dismiss a notification for a specific email message."
      ],
      [
        "createMarkMessageAsSpamPendingIntent(com.fsck.k9.activity.MessageReference,int)",
        "This method creates a PendingIntent to mark a message as spam in the notification using NotificationActionService."
      ]
    ],
    "com.fsck.k9.notification.LockScreenNotification": [
      [
        "configureLockScreenNotification(android.support.v4.app.NotificationCompat.Builder,com.fsck.k9.notification.NotificationData)",
        "The method configures the visibility of the lock screen notification based on the user's preference and notification data."
      ],
      [
        "newInstance(com.fsck.k9.notification.NotificationController)",
        "This method is used to create a new instance of the `LockScreenNotification` class with the provided `NotificationController` object."
      ]
    ],
    "com.fsck.k9.notification.NotificationGroupKeys": [
      [
        "getGroupKey(com.fsck.k9.Account)",
        "The goal of the method is to return a string that prefixes a notification group key with the account number of a K9 email client account."
      ]
    ],
    "com.fsck.k9.notification.NotificationActionService": [
      [
        "createDeleteAllMessagesIntent(android.content.Context,java.lang.String,java.util.List)",
        "The method creates an intent to delete all messages associated with a given account and list of references."
      ],
      [
        "startService(android.content.Intent,int)",
        "The goal of the method is to handle different notification actions (such as marking as read or deleting messages) and cancel the corresponding notification afterwards."
      ]
    ],
    "com.fsck.k9.notification.AddNotificationResult": [
      [
        "newNotification(com.fsck.k9.notification.NotificationHolder)",
        "The goal of the method is to create a new notification with the given `NotificationHolder`."
      ],
      [
        "shouldCancelNotification()",
        "The method returns a boolean value indicating whether a notification should be cancelled before reuse."
      ],
      [
        "replaceNotification(com.fsck.k9.notification.NotificationHolder)",
        "The goal of the method is to create a new instance of `AddNotificationResult` with the specified `NotificationHolder` and a boolean value `true`."
      ],
      [
        "getNotificationHolder()",
        "The method returns the notification holder object."
      ],
      [
        "getNotificationId()",
        "This method returns the ID of a notification if it should be cancelled, or throws an error if it should not be cancelled."
      ]
    ]
  },
  "com.fsck.k9.power": {
    "com.fsck.k9.power.DeviceIdleManager": [
      [
        "registerReceiver()",
        "The method registers a BroadcastReceiver for device idle mode changes."
      ],
      [
        "getInstance(android.content.Context)",
        "The method returns the instance of a `DeviceIdleManager`, either a real one or a no-op one, based on if the device supports idle mode and if the app is whitelisted."
      ],
      [
        "unregisterReceiver()",
        "The method unregisters a previously registered broadcast receiver."
      ]
    ],
    "com.fsck.k9.power.DozeChecker": [
      [
        "isDeviceIdleModeSupported()",
        "The goal of this method is to determine if the device supports the Android Doze battery-saving feature."
      ],
      [
        "isAppWhitelisted()",
        "The method checks whether the app is currently whitelisted from Android battery optimizations."
      ]
    ],
    "com.fsck.k9.power.DeviceIdleReceiver": [
      [
        "onReceive(android.content.Context,android.content.Intent)",
        "The goal of this method is to check if the device is in idle mode and reset the mail service if it is not in idle mode."
      ]
    ],
    "com.fsck.k9.power.DeviceIdleManager$RealDeviceIdleManager": [
      [
        "unregisterReceiver()",
        "The method is used to unregister a receiver for the DeviceIdleReceiver in order to stop listening for device idle events."
      ],
      [
        "registerReceiver()",
        "The method is used to register a DeviceIdleReceiver in the context with the given intent filter."
      ]
    ],
    "com.fsck.k9.power.DeviceIdleManager$NoOpDeviceIdleManager": [
      [
        "unregisterReceiver()",
        "This method does nothing and is used as a placeholder in the NoOpDeviceIdleManager."
      ],
      [
        "registerReceiver()",
        "The goal of the `registerReceiver()` method is to do nothing."
      ]
    ]
  },
  "com.fsck.k9.preferences": {
    "com.fsck.k9.preferences.FolderSettings": [
      [
        "convert(java.util.Map)",
        "This method converts a map of generic objects to a map of strings specific to folder settings in K-9 email client."
      ],
      [
        "upgrade(int,java.util.Map)",
        "The method upgrades folder settings to a new version using a map of validated settings."
      ]
    ],
    "com.fsck.k9.preferences.GlobalSettings$DirectorySetting": [
      [
        "fromString(java.lang.String)",
        "The goal of the method is to validate if a given string represents a valid directory path and return it if it does, or throw an exception if it doesn't."
      ]
    ],
    "com.fsck.k9.preferences.GlobalSettings$SettingsUpgraderV12": [
      [
        "upgrade(java.util.Map)",
        "The goal of the `upgrade` method is to upgrade the settings by modifying the notificationHideSubject setting based on the value of the keyguardPrivacy setting, and then return a set containing the keyguardPrivacy key."
      ]
    ],
    "com.fsck.k9.preferences.Settings$BooleanSetting": [
      [
        "fromString(java.lang.String)",
        "The `fromString` method is used to convert a string value into a boolean value for a specific setting in K-9 mail application preferences."
      ]
    ],
    "com.fsck.k9.preferences.Settings$PseudoEnumSetting": [
      [
        "toPrettyString(java.lang.Object)",
        "The goal of the method is to return a human-readable string representation of the given value based on the mapping of values to strings in the setting."
      ],
      [
        "fromPrettyString(java.lang.String)",
        "The goal of the method is to parse a user-friendly string representation of a setting value and return the corresponding constant from a mapping of possible values."
      ]
    ],
    "com.fsck.k9.preferences.SettingsExporter": [
      [
        "exportToFile(android.content.Context,boolean,java.util.Set)",
        "The goal of this method is to export the preferences of a K-9 email client to a file on the device's external storage."
      ],
      [
        "exportToUri(android.content.Context,boolean,java.util.Set,android.net.Uri)",
        "The method exports K-9 Mail account settings and preferences to a specified URI."
      ],
      [
        "generateDatedExportFileName()",
        "The method generates a filename for exporting K-9 Mail settings that includes the current date and a specified file extension."
      ]
    ],
    "com.fsck.k9.preferences.GlobalSettings$LanguageSetting": [
      [
        "fromString(java.lang.String)",
        "This method converts a string value to a language setting value, throwing an exception if the string value is not valid."
      ]
    ],
    "com.fsck.k9.preferences.Settings$EnumSetting": [
      [
        "fromString(java.lang.String)",
        "This method converts a string value to an enum value."
      ]
    ],
    "com.fsck.k9.preferences.CheckBoxListPreference": [
      [
        "getCheckedItems()",
        "The method returns an array of booleans indicating which items in a checkbox list preference are checked."
      ],
      [
        "setItems(java.lang.CharSequence[])",
        "The method sets the list of items for a CheckBoxListPreference instance."
      ],
      [
        "setCheckedItems(boolean[])",
        "The method sets an array of boolean values as the checked items in a CheckBoxListPreference object."
      ]
    ],
    "com.fsck.k9.preferences.Settings": [
      [
        "convert(java.util.Map,java.util.Map)",
        "The method converts settings from the internal representation to the string representation used in the preference storage."
      ],
      [
        "upgrade(int,java.util.Map,java.util.Map,java.util.Map)",
        "This method upgrades the settings of an email client using a map of custom upgrade codes and a settings structure."
      ]
    ],
    "com.fsck.k9.preferences.GlobalSettings$TimeSetting": [
      [
        "fromString(java.lang.String)",
        "The `fromString` method parses and validates a string input as a time setting and returns the same string if the input is valid."
      ]
    ],
    "com.fsck.k9.preferences.SettingsImporter$ImportedServerSettings": [
      [
        "getExtra()",
        "The method returns an unmodifiable map of extra settings for an imported server."
      ]
    ],
    "com.fsck.k9.preferences.Settings$ColorSetting": [
      [
        "fromString(java.lang.String)",
        "The goal of this method is to convert a string to an integer representing a color."
      ],
      [
        "fromPrettyString(java.lang.String)",
        "The goal of this method is to convert a color represented as a `String` in the format \"#RRGGBB\" to an `Integer` value."
      ],
      [
        "toPrettyString(java.lang.Integer)",
        "The method converts an Integer color value to a hex string with a leading '#' character in the format \"#RRGGBB\"."
      ]
    ],
    "com.fsck.k9.preferences.AccountSettings$RingtoneSetting": [
      [
        "fromString(java.lang.String)",
        "This method returns the input string value without any further processing or validation."
      ]
    ],
    "com.fsck.k9.preferences.AccountSettings$DeletePolicySetting": [
      [
        "fromString(java.lang.String)",
        "This method converts a string value into an Integer, and verifies if the Integer is a valid delete policy setting."
      ]
    ],
    "com.fsck.k9.preferences.Settings$IntegerRangeSetting": [
      [
        "fromString(java.lang.String)",
        "This method converts a string to an Integer only if the value is within a specified range."
      ]
    ],
    "com.fsck.k9.preferences.Settings$WebFontSizeSetting": [
      [
        "fromString(java.lang.String)",
        "The goal of this method is to parse a string and return an integer representing a web font size if it is valid, or throw an exception otherwise."
      ]
    ],
    "com.fsck.k9.preferences.GlobalSettings$SubThemeSetting": [
      [
        "fromString(java.lang.String)",
        "The goal of the `fromString` method is to convert a string representation of a sub-theme setting into a corresponding `com.fsck.k9.K9.Theme` object."
      ],
      [
        "toPrettyString(com.fsck.k9.K9$Theme)",
        "The `toPrettyString` method returns a human-readable string representation of a K9 theme, handling the case where the theme is set to use the global theme."
      ],
      [
        "fromPrettyString(java.lang.String)",
        "The goal of the `fromPrettyString(java.lang.String)` method is to convert a string value into a K9.Theme enum value and return it, or throw an InvalidSettingValueException if the string is not valid."
      ]
    ],
    "com.fsck.k9.preferences.GlobalSettings": [
      [
        "convert(java.util.Map)",
        "The method converts a map of settings from type `String,Object` to type `String,String`, for use in global preferences in the K-9 email client."
      ],
      [
        "upgrade(int,java.util.Map)",
        "The goal of the `upgrade` method is to upgrade the settings of the K9 email client using a map of validated settings."
      ]
    ],
    "com.fsck.k9.preferences.AccountSettings$StringResourceSetting": [
      [
        "fromString(java.lang.String)",
        "The method returns the input string if it exists in a mapping, otherwise it throws an exception."
      ]
    ],
    "com.fsck.k9.preferences.AccountSettings$IntegerResourceSetting": [
      [
        "fromString(java.lang.String)",
        "This method converts a string input into an integer."
      ]
    ],
    "com.fsck.k9.preferences.GlobalSettings$SettingsUpgraderV31": [
      [
        "convertFromOldSize(int)",
        "This method converts an old size value into a new size value corresponding to different size options."
      ],
      [
        "upgrade(java.util.Map)",
        "This method upgrades a specific global setting (\"fontSizeMessageViewContent\") from an old integer value to a new percentage value and returns a set containing the name of the updated setting."
      ]
    ],
    "com.fsck.k9.preferences.AccountSettings$StorageProviderSetting": [
      [
        "fromString(java.lang.String)",
        "The goal of the `fromString` method is to validate that a given string value is a valid storage provider name."
      ],
      [
        "getDefaultValue()",
        "The method returns the default storage provider ID for an account in the K-9 mail app."
      ]
    ],
    "com.fsck.k9.preferences.Settings$SettingsUpgrader": [
      [
        "upgrade(java.util.Map)",
        "The method upgrades the provided settings in a provided map and returns a set of setting names that were removed during the upgrade process."
      ]
    ],
    "com.fsck.k9.preferences.StorageEditor": [
      [
        "putLong(java.lang.String,long)",
        "This method stores a long value in the shared preferences with the given key."
      ],
      [
        "putBoolean(java.lang.String,boolean)",
        "The method sets a boolean value in the preferences editor."
      ],
      [
        "putInt(java.lang.String,int)",
        "The goal of the `putInt` method is to store an integer value associated with a key in the preferences editor."
      ],
      [
        "putString(java.lang.String,java.lang.String)",
        "The goal of the `putString` method is to store a string value associated with a given key in the `changes` map, and to remove the entry if the value is null."
      ],
      [
        "copy(android.content.SharedPreferences)",
        "The method copies values from an input shared preferences instance to the current instance."
      ],
      [
        "commit()",
        "The goal of the `commit()` method is to save the changes made to the preferences and return a boolean indicating success or failure."
      ],
      [
        "remove(java.lang.String)",
        "The `remove` method adds the given key to a list of removals for a StorageEditor object and returns the object."
      ]
    ],
    "com.fsck.k9.preferences.GlobalSettings$SettingsUpgraderV24": [
      [
        "upgrade(java.util.Map)",
        "The goal of this method is to upgrade certain settings in a `Map` object by changing the value of `messageViewTheme` to `com.fsck.k9.K9.Theme.USE_GLOBAL` if `theme` and `messageViewTheme` are not null and have the same value."
      ]
    ],
    "com.fsck.k9.preferences.SettingsImporter": [
      [
        "getImportStreamContents(java.io.InputStream)",
        "This method parses an import `InputStream` and returns information on whether it contains global settings and/or account settings."
      ],
      [
        "importSettings(android.content.Context,java.io.InputStream,boolean,java.util.List,boolean)",
        "The method imports global settings and/or account configurations specified by the arguments from an input stream."
      ]
    ],
    "com.fsck.k9.preferences.IdentitySettings$SignatureSetting": [
      [
        "getDefaultValue()",
        "This method returns the default signature value as a string resource."
      ],
      [
        "fromString(java.lang.String)",
        "The method returns the input string value as is."
      ]
    ],
    "com.fsck.k9.preferences.Settings$SettingsDescription": [
      [
        "getDefaultValue()",
        "The method returns the default value for the preference setting."
      ],
      [
        "fromString(java.lang.String)",
        "This method parses the string representation of a setting's value and returns the internal representation, while throwing an exception if the string contains an invalid value."
      ],
      [
        "toString(java.lang.Object)",
        "The goal of the `toString` method is to convert a setting's internal value to its string representation."
      ],
      [
        "fromPrettyString(java.lang.String)",
        "This method converts the pretty-printed version of a setting's value to the internal representation."
      ],
      [
        "toPrettyString(java.lang.Object)",
        "The goal of the method is to convert a setting value to a pretty-printed string representation."
      ]
    ],
    "com.fsck.k9.preferences.IdentitySettings": [
      [
        "upgrade(int,java.util.Map)",
        "The goal of the `upgrade` method is to upgrade the settings of an identity based on the provided version and a map of validated settings."
      ],
      [
        "convert(java.util.Map)",
        "Converts a map of string-object settings to a map of string-string settings for identity settings."
      ]
    ],
    "com.fsck.k9.preferences.IdentitySettings$OptionalEmailAddressSetting": [
      [
        "fromPrettyString(java.lang.String)",
        "This method converts a string representing an optional email address setting to a corresponding Java string, with the option to return null if the input string is empty."
      ],
      [
        "fromString(java.lang.String)",
        "This method parses a string and validates it as an email address before returning it."
      ],
      [
        "toPrettyString(java.lang.String)",
        "The goal of the method is to return a pretty string representation of the input value, or an empty string if the input value is null."
      ],
      [
        "toString(java.lang.String)",
        "The method returns a non-null string value if the input string value is not null, otherwise it returns null."
      ]
    ],
    "com.fsck.k9.preferences.Storage": [
      [
        "isEmpty()",
        "The goal of this method is to check whether the underlying storage object is empty or not."
      ],
      [
        "contains(java.lang.String)",
        "The method checks if a given key is contained in the storage."
      ],
      [
        "getString(java.lang.String,java.lang.String)",
        "This method retrieves a string value from storage using the provided key and returns it, or returns the default value if the key is not found in storage."
      ],
      [
        "getBoolean(java.lang.String,boolean)",
        "This method retrieves a boolean value stored using the specified key, and if the key is not found it returns a default value."
      ],
      [
        "edit()",
        "The goal of the `edit()` method is to return a new instance of `StorageEditor` configured with the current instance of `Storage`."
      ],
      [
        "getLong(java.lang.String,long)",
        "The goal of this method is to retrieve a long value from the storage, with the specified default value as a fallback."
      ],
      [
        "getAll()",
        "The method `getAll()` returns a map containing all the key-value pairs stored in the \"storage\" object."
      ],
      [
        "getStorage(android.content.Context)",
        "The goal of this method is to provide a way to retrieve the storage instance associated with a given application context, creating a new instance if one does not yet exist."
      ]
    ],
    "com.fsck.k9.preferences.TimePickerPreference": [
      [
        "onTimeChanged(android.widget.TimePicker,int,int)",
        "The goal of the method is to save the selected time to SharedPreferences and notify the listeners about the change."
      ],
      [
        "getTime()",
        "The goal of the `getTime()` method is to retrieve the time as a string in the format \"hh:mm\" of the `TimePickerPreference` object from storage, ensuring that it matches the validation expression."
      ],
      [
        "setDefaultValue(java.lang.Object)",
        "The method sets the default value of the TimePickerPreference to the given object if it passes validation."
      ]
    ],
    "com.fsck.k9.preferences.Settings$StringSetting": [
      [
        "fromString(java.lang.String)",
        "This method simply returns the inputted string value."
      ]
    ],
    "com.fsck.k9.preferences.Settings$FontSizeSetting": [
      [
        "fromString(java.lang.String)",
        "The goal of the method is to parse a String input into an Integer font size and verify that it matches a predefined mapping."
      ]
    ],
    "com.fsck.k9.preferences.GlobalSettings$ThemeSetting": [
      [
        "toString(com.fsck.k9.K9$Theme)",
        "The method converts a K9 Theme value to its corresponding ordinal number and returns it as a string."
      ],
      [
        "fromString(java.lang.String)",
        "This method converts a string representation of a theme to a corresponding enum value or throws an exception if the string cannot be converted."
      ],
      [
        "toPrettyString(com.fsck.k9.K9$Theme)",
        "The `toPrettyString` method returns the string representation of a `K9 Theme` object in a human-readable format for display purposes."
      ],
      [
        "fromPrettyString(java.lang.String)",
        "The goal of the method is to convert a pretty string representation of a theme setting into a K9 theme object."
      ]
    ],
    "com.fsck.k9.preferences.AccountSettings": [
      [
        "upgrade(int,java.util.Map)",
        "This method upgrades the account settings to a specific version using a map of validated settings."
      ],
      [
        "convert(java.util.Map)",
        "The method converts a map with string keys and object values to a map with string keys and string values for account settings."
      ]
    ]
  },
  "com.fsck.k9.provider": {
    "com.fsck.k9.provider.AttachmentProvider": [
      [
        "onCreate()",
        "The `onCreate()` method returns a boolean value indicating whether the provider was successfully created."
      ],
      [
        "update(android.net.Uri,android.content.ContentValues,java.lang.String,java.lang.String[])",
        "The goal of the method is to update attachment information in the Content Provider, but the method is not implemented and throws an exception."
      ],
      [
        "insert(android.net.Uri,android.content.ContentValues)",
        "The method throws an UnsupportedOperationException when attempting to insert content values into the AttachmentProvider."
      ],
      [
        "getAttachmentUri(java.lang.String,long)",
        "The goal of the method is to construct and return the URI for a specific email attachment identified by the account UUID and the attachment ID."
      ],
      [
        "openFile(android.net.Uri,java.lang.String)",
        "This method opens a file from a specified `Uri` with a given mode and returns a `ParcelFileDescriptor`."
      ],
      [
        "delete(android.net.Uri,java.lang.String,java.lang.String[])",
        "The goal of this method is to throw an UnsupportedOperationException."
      ],
      [
        "getType(android.net.Uri)",
        "This method returns the MIME type of a specified attachment Uri."
      ],
      [
        "query(android.net.Uri,java.lang.String[],java.lang.String,java.lang.String[],java.lang.String)",
        "This method retrieves attachment information from the local store for a given email account and attachment ID and returns a cursor containing the requested columns."
      ]
    ],
    "com.fsck.k9.provider.MessageProvider$MessagesQueryHandler": [
      [
        "query(android.net.Uri,java.lang.String[],java.lang.String,java.lang.String[],java.lang.String)",
        "The goal of this method is to retrieve messages from the database based on the given projection."
      ],
      [
        "getPath()",
        "The goal of the method is to return the path of the inbox messages."
      ]
    ],
    "com.fsck.k9.provider.MessageProvider$AccountNumberExtractor": [
      [
        "getField(com.fsck.k9.activity.MessageInfoHolder)",
        "This method extracts the account number from a given MessageInfoHolder object."
      ]
    ],
    "com.fsck.k9.provider.MessageProvider$CountExtractor": [
      [
        "getField(java.lang.Object)",
        "This method returns the count of a given field of a `MessageProvider` object as an integer."
      ]
    ],
    "com.fsck.k9.provider.MessageProvider$DeleteUriExtractor": [
      [
        "getField(com.fsck.k9.activity.MessageInfoHolder)",
        "The method returns a `String` representing the URI of a message to be deleted, based on information stored in a `MessageInfoHolder` object."
      ]
    ],
    "com.fsck.k9.provider.EmailProvider": [
      [
        "query(android.net.Uri,java.lang.String[],java.lang.String,java.lang.String[],java.lang.String)",
        "This method queries the EmailProvider content provider to retrieve data about messages or account statistics and returns a cursor containing the requested data."
      ],
      [
        "delete(android.net.Uri,java.lang.String,java.lang.String[])",
        "The method is responsible for deleting one or more rows based on the provided URI and selection criteria."
      ],
      [
        "getType(android.net.Uri)",
        "The goal of the method is to return the MIME type of the data associated with a given URI."
      ],
      [
        "update(android.net.Uri,android.content.ContentValues,java.lang.String,java.lang.String[])",
        "The goal of this method is to update one or more rows in a database table identified by the given URI, with the given values, selection, and selection arguments."
      ],
      [
        "insert(android.net.Uri,android.content.ContentValues)",
        "The goal of the method `insert` is to add new email data to the email provider."
      ],
      [
        "onCreate()",
        "The `onCreate()` method returns true to indicate that the EmailProvider has been successfully created."
      ]
    ],
    "com.fsck.k9.provider.MessageProvider$AccountColorExtractor": [
      [
        "getField(com.fsck.k9.activity.MessageInfoHolder)",
        "This method retrieves the chip color of a message's account to be used for display purposes."
      ]
    ],
    "com.fsck.k9.provider.MessageProvider$HasAttachmentsExtractor": [
      [
        "getField(com.fsck.k9.activity.MessageInfoHolder)",
        "The `getField()` method returns a Boolean value indicating whether a given email message has attachments or not."
      ]
    ],
    "com.fsck.k9.provider.MessageProvider$MessageInfoHolderRetrieverListener": [
      [
        "searchStats(com.fsck.k9.AccountStats)",
        "The goal of the method is to put the message holders into a queue so that they can be returned to the caller."
      ],
      [
        "listLocalMessagesAddMessages(com.fsck.k9.Account,java.lang.String,java.util.List)",
        "The method adds a list of local email messages to a message info holder."
      ]
    ],
    "com.fsck.k9.provider.DecryptedFileProvider": [
      [
        "onTrimMemory(int)",
        "The goal of the `onTrimMemory(int)` method is to delete old temporary files and unregister a file cleanup receiver when the system is running low on memory."
      ],
      [
        "getFileFactory(android.content.Context)",
        "The goal of this method is to create a file factory that can be used to create temporary decrypted mail files."
      ],
      [
        "getUriForProvidedFile(android.content.Context,java.io.File,java.lang.String,java.lang.String)",
        "This method generates a `Uri` for a provided file, with optional encoding and MIME type parameters."
      ],
      [
        "deleteOldTemporaryFiles(android.content.Context)",
        "The goal of the `deleteOldTemporaryFiles` method is to delete temporary files that are older than a certain threshold and log an error if any file couldn't be deleted."
      ],
      [
        "getType(android.net.Uri)",
        "This method returns the MIME type of a file specified in the given URI."
      ],
      [
        "delete(android.net.Uri,java.lang.String,java.lang.String[])",
        "The goal of the method is to throw an UnsupportedOperationException when called, indicating that the operation is not supported by the provider."
      ],
      [
        "openFile(android.net.Uri,java.lang.String)",
        "The `openFile` method of `DecryptedFileProvider` decodes and returns a `ParcelFileDescriptor` for a specified URI with an optional encoding parameter."
      ]
    ],
    "com.fsck.k9.provider.MessageProvider$ThrottlingQueryHandler": [
      [
        "getPath()",
        "This method returns the path of the delegate object."
      ],
      [
        "query(android.net.Uri,java.lang.String[],java.lang.String,java.lang.String[],java.lang.String)",
        "The goal of the `query` method is to limit the number of concurrent queries to a database by acquiring a semaphore before accessing the database and releasing it after the query is done, while also setting a time limit for the cursor to be closed."
      ]
    ],
    "com.fsck.k9.provider.MessageProvider$SubjectExtractor": [
      [
        "getField(com.fsck.k9.activity.MessageInfoHolder)",
        "The goal of this method is to extract the subject of a message from a given `MessageInfoHolder`."
      ]
    ],
    "com.fsck.k9.provider.MessageProvider$PreviewExtractor": [
      [
        "getField(com.fsck.k9.activity.MessageInfoHolder)",
        "The method returns the preview text of a message for use in displaying message information."
      ]
    ],
    "com.fsck.k9.provider.MessageProvider$IncrementExtractor": [
      [
        "getField(com.fsck.k9.activity.MessageInfoHolder)",
        "The method returns an incremented integer count each time it is called, based on the provided `MessageInfoHolder`."
      ]
    ],
    "com.fsck.k9.provider.MessageProvider$HasStarExtractor": [
      [
        "getField(com.fsck.k9.activity.MessageInfoHolder)",
        "The goal of the `getField` method is to retrieve whether or not a message is flagged by checking if the FLAGGED flag is set on the message."
      ]
    ],
    "com.fsck.k9.provider.MessageProvider$ReverseDateComparator": [
      [
        "compare(com.fsck.k9.activity.MessageInfoHolder,com.fsck.k9.activity.MessageInfoHolder)",
        "The method compares two `MessageInfoHolder` objects based on their `compareDate` field in reverse chronological order."
      ]
    ],
    "com.fsck.k9.provider.AttachmentTempFileProvider": [
      [
        "deleteOldTemporaryFiles(android.content.Context)",
        "The goal of this method is to delete old temporary files from the directory used to temporarily store attachments in K-9 Mail."
      ],
      [
        "getMimeTypeUri(android.net.Uri,java.lang.String)",
        "The `getMimeTypeUri` method adds a MIME type parameter to a content URI and returns a new URI."
      ],
      [
        "getType(android.net.Uri)",
        "The method returns the MIME type of the specified Uri."
      ],
      [
        "onTrimMemory(int)",
        "The method cleans up old temporary attachment files when the device is running out of memory."
      ],
      [
        "createTempUriForContentUri(android.content.Context,android.net.Uri)",
        "The goal of this method is to create a temporary file URI for a content URI in the context of an Android application."
      ],
      [
        "delete(android.net.Uri,java.lang.String,java.lang.String[])",
        "The goal of the method is to throw an `UnsupportedOperationException` exception when called."
      ]
    ],
    "com.fsck.k9.provider.MessageProvider": [
      [
        "update(android.net.Uri,android.content.ContentValues,java.lang.String,java.lang.String[])",
        "The goal of this method is to update a message in the K-9 Mail provider database."
      ],
      [
        "getType(android.net.Uri)",
        "The goal of the method is to return the MIME type of the specified message URI."
      ],
      [
        "onCreate()",
        "The `onCreate()` method initializes the `MessageProvider` and registers query handlers to handle queries from clients."
      ],
      [
        "delete(android.net.Uri,java.lang.String,java.lang.String[])",
        "The method is used to delete a specific message from a given account, folder and message UID in the K9 email app."
      ],
      [
        "insert(android.net.Uri,android.content.ContentValues)",
        "The method logs a new message insertion into the MessageProvider but returns null."
      ],
      [
        "query(android.net.Uri,java.lang.String[],java.lang.String,java.lang.String[],java.lang.String)",
        "This method queries the K-9 mail provider for message data based on the provided URI, projection, selection, selection arguments, and sort order."
      ]
    ],
    "com.fsck.k9.provider.MessageProvider$QueryHandler": [
      [
        "getPath()",
        "The method `getPath()` returns the path that this instance of the `MessageProvider$QueryHandler` interface is able to respond to."
      ],
      [
        "query(android.net.Uri,java.lang.String[],java.lang.String,java.lang.String[],java.lang.String)",
        "This method queries the K-9 mail database for messages according to specified criteria and returns a Cursor that contains the results."
      ]
    ],
    "com.fsck.k9.provider.MessageProvider$FieldExtractor": [
      [
        "getField(java.lang.Object)",
        "The method returns the value of a specific field from an object of type T."
      ]
    ],
    "com.fsck.k9.provider.EmailProvider$SpecialColumnsCursor": [
      [
        "getColumnCount()",
        "This method returns the number of columns the cursor contains."
      ],
      [
        "getDouble(int)",
        "The method retrieves a double value from a specified column index in the cursor."
      ],
      [
        "isNull(int)",
        "The method determines if the value of a specified column index is null by checking the value of that column index in the special column values array or delegating to the super method if it is not a special column index."
      ],
      [
        "getColumnName(int)",
        "This method returns the name of the column at the specified index."
      ],
      [
        "getColumnNames()",
        "The method returns a clone of the column names for the cursor."
      ],
      [
        "getLong(int)",
        "This method returns the long value of a specific column in the cursor, throwing an exception if the column is a special column that can only be retrieved as a string."
      ],
      [
        "getShort(int)",
        "The method retrieves a short value at a specified column index, but throws a runtime exception if the column is a special column that can only be retrieved as a string."
      ],
      [
        "getColumnIndex(java.lang.String)",
        "The method returns the index of a given column name in a cursor's column name array, or falls back to the superclass method if the column name is not found."
      ],
      [
        "getType(int)",
        "The method returns the type of the column at the specified columnIndex, either as a string or an integer."
      ],
      [
        "getInt(int)",
        "The method returns the integer value of the column at the specified index, or throws an exception if it is a special column."
      ],
      [
        "getFloat(int)",
        "This method retrieves a float value from a cursor of special columns in an email provider."
      ],
      [
        "getBlob(int)",
        "The `getBlob(int)` method retrieves the binary data stored in the specified column of the cursor, and maps any special columns to their corresponding column index before returning the data."
      ],
      [
        "getColumnIndexOrThrow(java.lang.String)",
        "The method returns the index of the specified column name or throws an exception if the column name is not found."
      ],
      [
        "getString(int)",
        "The method returns a string value for the given column index, either from the special column values or from the parent cursor."
      ]
    ],
    "com.fsck.k9.provider.MessageProvider$AccountsQueryHandler": [
      [
        "query(android.net.Uri,java.lang.String[],java.lang.String,java.lang.String[],java.lang.String)",
        "The goal of the method is to query all accounts and return a cursor containing specified projections."
      ],
      [
        "getAllAccounts(java.lang.String[])",
        "The `getAllAccounts` method returns a cursor containing information for all email accounts available in the app."
      ],
      [
        "getPath()",
        "The method returns the path string for the \"accounts\" endpoint of the MessageProvider."
      ]
    ],
    "com.fsck.k9.provider.MessageProvider$AccountExtractor": [
      [
        "getField(com.fsck.k9.activity.MessageInfoHolder)",
        "This method retrieves the description of the account associated with a given message."
      ]
    ],
    "com.fsck.k9.provider.MessageProvider$SenderAddressExtractor": [
      [
        "getField(com.fsck.k9.activity.MessageInfoHolder)",
        "This method extracts the sender email address from a `MessageInfoHolder` object."
      ]
    ],
    "com.fsck.k9.provider.MessageProvider$UnreadQueryHandler": [
      [
        "getPath()",
        "The method returns the URI path of the unread messages in a specific account."
      ],
      [
        "query(android.net.Uri,java.lang.String[],java.lang.String,java.lang.String[],java.lang.String)",
        "The `query` method retrieves the number of unread messages for a given email account."
      ]
    ],
    "com.fsck.k9.provider.MessageProvider$IdExtractor": [
      [
        "getField(com.fsck.k9.activity.MessageInfoHolder)",
        "The `getField` method returns the database ID of a message in a `MessageInfoHolder` object."
      ]
    ],
    "com.fsck.k9.provider.AttachmentTempFileProvider$AttachmentTempFileProviderCleanupReceiver": [
      [
        "onReceive(android.content.Context,android.content.Intent)",
        "The goal of the `onReceive` method is to clean up temporary attachment files when the screen is turned off and unregister the file cleanup receiver if all files have been deleted."
      ]
    ],
    "com.fsck.k9.provider.MessageProvider$SenderExtractor": [
      [
        "getField(com.fsck.k9.activity.MessageInfoHolder)",
        "The `getField()` method returns the sender of a message from a given `MessageInfoHolder` object."
      ]
    ],
    "com.fsck.k9.provider.MessageProvider$MonitoredCursor": [
      [
        "unregisterDataSetObserver(android.database.DataSetObserver)",
        "The goal of this method is to unregister a DataSetObserver from the MonitoredCursor's underlying cursor."
      ],
      [
        "isBeforeFirst()",
        "The method checks if the cursor is positioned before the first row."
      ],
      [
        "getInt(int)",
        "The method returns the integer value of the specified column index in the monitored cursor."
      ],
      [
        "moveToPrevious()",
        "The `moveToPrevious()` method moves the cursor to the previous row of data in the monitored message cursor."
      ],
      [
        "getPosition()",
        "This method returns the current position of the cursor."
      ],
      [
        "getColumnNames()",
        "This method returns an array of column names from the underlying cursor after checking if the cursor is closed."
      ],
      [
        "getNotificationUri()",
        "This method returns the notification URI for this cursor."
      ],
      [
        "getColumnCount()",
        "The method returns the number of columns in the cursor's result set."
      ],
      [
        "setNotificationUri(android.content.ContentResolver,android.net.Uri)",
        "This method sets the notification URI for the cursor and checks if the cursor is closed."
      ],
      [
        "getColumnName(int)",
        "The method aims to retrieve the name of a column at the given index in the monitored cursor's underlying cursor."
      ],
      [
        "isNull(int)",
        "The `isNull(int)` method checks if a column value in a database cursor is null."
      ],
      [
        "getString(int)",
        "The method retrieves the value at the specified column index as a string from the underlying database cursor while ensuring that the cursor is not closed."
      ],
      [
        "getColumnIndexOrThrow(java.lang.String)",
        "The method returns the index of the given column name or throws an IllegalArgumentException if the column does not exist."
      ],
      [
        "copyStringToBuffer(int,android.database.CharArrayBuffer)",
        "The goal of the method is to copy the string value at the specified column index from the monitored cursor to an Android database character array buffer."
      ],
      [
        "deactivate()",
        "The `deactivate()` method deactivates the cursor by checking if it is closed and then calling the `deactivate()` method of the cursor."
      ],
      [
        "requery()",
        "The `requery()` method re-executes the query associated with the cursor and returns a boolean indicating if the query was successful."
      ],
      [
        "isLast()",
        "The method `isLast()` checks whether the current position of the cursor is the last position in the result set."
      ],
      [
        "isClosed()",
        "This method checks if the MonitoredCursor instance is closed or the underlying cursor is closed."
      ],
      [
        "getBlob(int)",
        "This method retrieves a blob value from the cursor for the specified column index."
      ],
      [
        "close()",
        "The goal of this method is to close the cursor and release any associated resources if it has not already been closed."
      ],
      [
        "unregisterContentObserver(android.database.ContentObserver)",
        "The method is used to unregister a content observer from the monitored cursor."
      ],
      [
        "registerDataSetObserver(android.database.DataSetObserver)",
        "It registers a DataSetObserver for monitoring changes in the MonitoredCursor's underlying cursor."
      ],
      [
        "getLong(int)",
        "This method returns a `long` value from the specified column index of the monitored cursor, but first checks if the cursor is closed."
      ],
      [
        "getWantsAllOnMoveCalls()",
        "The method returns whether the cursor wants all on move calls."
      ],
      [
        "isAfterLast()",
        "The method checks if the cursor is positioned after the last row and returns a boolean value indicating the same."
      ],
      [
        "isFirst()",
        "The method checks if the cursor is positioned at the first row and returns a boolean value accordingly."
      ],
      [
        "getShort(int)",
        "This method returns the short value of the specified column index from the cursor while checking if the cursor is closed."
      ],
      [
        "moveToNext()",
        "The method moves the cursor to the next row and returns true if the operation was successful, false otherwise."
      ],
      [
        "respond(android.os.Bundle)",
        "The method ensures that the cursor is not closed and then responds to the given extras bundle."
      ],
      [
        "registerContentObserver(android.database.ContentObserver)",
        "Registers a content observer on the underlying cursor to receive notifications about changes to the data."
      ],
      [
        "getFloat(int)",
        "This method returns the float value of the specified column in the cursor."
      ],
      [
        "getCount()",
        "The `getCount()` method returns the number of rows in the cursor."
      ],
      [
        "moveToFirst()",
        "The method moves the cursor to the first row and returns true if the cursor is not empty, otherwise it returns false."
      ],
      [
        "fillWindow(int,android.database.CursorWindow)",
        "The method fills a given cursor window with data from the cursor starting at the specified position."
      ],
      [
        "getType(int)",
        "The goal of this method is to return the type of the data in a specified column of a cursor, after checking that the cursor is not closed."
      ],
      [
        "moveToLast()",
        "The method moves the cursor to the last row of the monitored cursor and returns true if successful."
      ],
      [
        "move(int)",
        "The method moves the cursor by the specified offset and returns a boolean indicating whether the move was successful or not."
      ],
      [
        "moveToPosition(int)",
        "The method moves the cursor to the specified position and returns a boolean indicating whether the operation was successful."
      ],
      [
        "getExtras()",
        "This method returns the extra data from the cursor if it is not closed."
      ],
      [
        "setExtras(android.os.Bundle)",
        "The method sets an extra bundle for the monitored cursor."
      ],
      [
        "getWindow()",
        "The method returns the current CursorWindow of the MonitoredCursor."
      ],
      [
        "getColumnIndex(java.lang.String)",
        "The `getColumnIndex` method returns the index of the named column in a cursor, after checking that the cursor is not closed."
      ],
      [
        "getDouble(int)",
        "This method returns the double value located at a specific column index of the cursor."
      ],
      [
        "onMove(int,int)",
        "The method is used to move the cursor to a new position and return a boolean indicating whether or not the move was successful."
      ]
    ],
    "com.fsck.k9.provider.UnreadWidgetProvider": [
      [
        "updateWidget(android.content.Context,android.appwidget.AppWidgetManager,com.fsck.k9.helper.UnreadWidgetProperties)",
        "This method updates the unread count and title of a widget and sets the click intent to either open the widget configuration activity or launch the associated app depending on whether the widget configuration could be loaded or not."
      ],
      [
        "onUpdate(android.content.Context,android.appwidget.AppWidgetManager,int[])",
        "The `onUpdate` method is called when one or more widgets need to be updated, and it loops through all the app widgets and updates their properties."
      ],
      [
        "onDeleted(android.content.Context,int[])",
        "The method deletes widget configurations for each appWidgetId specified when a widget instance is deleted."
      ],
      [
        "updateUnreadCount(android.content.Context)",
        "The goal of the method is to trigger an update for all unread widgets by broadcasting an intent with updated widget IDs."
      ]
    ],
    "com.fsck.k9.provider.MessageProvider$SendDateExtractor": [
      [
        "getField(com.fsck.k9.activity.MessageInfoHolder)",
        "The `getField` method returns the time at which a message was sent as a `Long`."
      ]
    ],
    "com.fsck.k9.provider.MessageProvider$UriExtractor": [
      [
        "getField(com.fsck.k9.activity.MessageInfoHolder)",
        "The goal of the method is to return the `uri` field of the given `MessageInfoHolder` object as a string."
      ]
    ],
    "com.fsck.k9.provider.EmailProvider$IdTrickeryCursor": [
      [
        "getColumnIndex(java.lang.String)",
        "The goal of this method is to return the index of the given column name while also mapping the column name \"_id\" to \"id\"."
      ],
      [
        "getColumnIndexOrThrow(java.lang.String)",
        "The method returns the index of the specified column name, and replaces \"_id\" with \"id\" if found."
      ]
    ],
    "com.fsck.k9.provider.DecryptedFileProvider$DecryptedFileProviderCleanupReceiver": [
      [
        "onReceive(android.content.Context,android.content.Intent)",
        "The method performs cleanup of temporary files for the DecryptedFileProvider and unregisters the FileCleanupReceiver if all files were deleted."
      ]
    ],
    "com.fsck.k9.provider.MessageProvider$UnreadExtractor": [
      [
        "getField(com.fsck.k9.activity.MessageInfoHolder)",
        "The `getField` method returns a boolean indicating whether a given message is unread based on the `read` flag in `MessageInfoHolder`."
      ]
    ]
  },
  "com.fsck.k9.remotecontrol": {
    "com.fsck.k9.remotecontrol.AccountReceiver": [
      [
        "onReceive(android.content.Context,android.content.Intent)",
        "The goal of the method is to receive a broadcast intent and extract account information from the associated bundle to be passed to the `receptor` object."
      ]
    ],
    "com.fsck.k9.remotecontrol.K9AccountReceptor": [
      [
        "accounts(java.lang.String[],java.lang.String[])",
        "The `accounts` method updates the list of available email accounts with their unique identifiers and descriptions."
      ]
    ],
    "com.fsck.k9.remotecontrol.K9RemoteControl": [
      [
        "set(android.content.Context,android.content.Intent)",
        "The goal of this method is to set a remote control action and broadcast it to the K9 email client with the specified permission."
      ],
      [
        "fetchAccounts(android.content.Context,com.fsck.k9.remotecontrol.K9AccountReceptor)",
        "The goal of the `fetchAccounts` method is to send a broadcast intent to retrieve K9 email accounts and return them to the provided `K9AccountReceptor`."
      ]
    ]
  }
}