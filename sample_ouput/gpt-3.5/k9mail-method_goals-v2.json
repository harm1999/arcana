{
  "com.fsck.k9": {
    "class com.fsck.k9.Throttle$MyTimerTask": [
      [
        "run()",
        "calls the `HandlerRunnable` method of `MyTimerTask` using a `Handler` object."
      ],
      [
        "cancel()",
        "sets a flag indicating the task has been canceled and calls the superclass implementation of the cancel method."
      ]
    ],
    "class com.fsck.k9.Throttle": [
      [
        "cancelScheduledCallback()",
        "cancels a previously scheduled callback if it exists in an instance of the `Throttle` class."
      ],
      [
        "onEvent()",
        "logs information about the throttle event and schedules a timer task if no callback is already scheduled."
      ]
    ],
    "class com.fsck.k9.PRNGFixes": [
      [
        "apply()",
        "applies fixes to the PRNG (Pseudo-Random Number Generator) to ensure secure random number generation."
      ]
    ],
    "interface com.fsck.k9.BaseAccount": [
      [
        "setEmail(java.lang.String)",
        "sets the email address of an account."
      ],
      [
        "getEmail()",
        "returns the email address associated with the account."
      ],
      [
        "getUuid()",
        "returns the UUID (Universally Unique Identifier) of a BaseAccount object in K-9 Mail."
      ],
      [
        "getDescription()",
        "returns the description of the account."
      ],
      [
        "setDescription(java.lang.String)",
        "sets the description of a BaseAccount in K9 (an email client for Android)."
      ]
    ],
    "class com.fsck.k9.Throttle$MyTimerTask$HandlerRunnable": [
      [
        "run()",
        "resets the running timer task and executes the callback function if it has not been canceled."
      ]
    ],
    "class com.fsck.k9.K9": [
      [
        "messageListSenderAboveSubject()",
        "returns a boolean value indicating whether the sender information should be displayed above the subject in the message list."
      ],
      [
        "setDebug(boolean)",
        "sets the debugging mode for the K9 Java class and updates the logging status accordingly."
      ],
      [
        "setContactNameColor(int)",
        "sets the color of contact names in a mail client."
      ],
      [
        "setConfirmDeleteStarred(boolean)",
        "sets the confirmation prompt for deleting starred emails in the K9 email client."
      ],
      [
        "setBackgroundOps(com.fsck.k9.K9$BACKGROUND_OPS)",
        "sets the background operation mode of the K9 email app and returns a boolean indicating whether the mode has changed."
      ],
      [
        "setNotificationDuringQuietTimeEnabled(boolean)",
        "sets the value of a static boolean variable named \"notificationDuringQuietTimeEnabled\" in the K9 class."
      ],
      [
        "getSplitViewMode()",
        "returns the current split view mode of the K9 email client."
      ],
      [
        "setAnimations(boolean)",
        "sets a boolean value indicating whether animations should be enabled in the K9 email client."
      ],
      [
        "setDatabasesUpToDate(boolean)",
        "sets a flag indicating that all account databases are up to date and, if requested, saves the current database version to shared preferences."
      ],
      [
        "setGesturesEnabled(boolean)",
        "enables or disables the use of gestures in the K-9 email application."
      ],
      [
        "useBackgroundAsUnreadIndicator()",
        "returns a boolean value indicating whether the background is being used as an indicator for unread emails in the K9 email client."
      ],
      [
        "isColorizeMissingContactPictures()",
        "returns a boolean value that determines if missing contact pictures should be colorized in K9 email client."
      ],
      [
        "setMessageViewReturnToList(boolean)",
        "sets a flag to determine whether returning to the message list view after viewing a message is enabled or not."
      ],
      [
        "getOpenPgpSupportSignOnly()",
        "returns a boolean value indicating whether the openPGP support is for signing messages only."
      ],
      [
        "setPgpInlineDialogCounter(int)",
        "sets the value of the PGP inline dialog counter variable in the K9 Java class."
      ],
      [
        "registerApplicationAware(com.fsck.k9.K9$ApplicationAware)",
        "registers components to be notified when the K9 instance is ready."
      ],
      [
        "setNotificationQuickDeleteBehaviour(com.fsck.k9.K9$NotificationQuickDelete)",
        "sets the quick delete behavior of notifications in the K9 email app."
      ],
      [
        "setHideUserAgent(boolean)",
        "sets the value of a boolean variable in the K9 class that determines whether or not the user agent is hidden."
      ],
      [
        "setMessageViewArchiveActionVisible(boolean)",
        "sets the visibility of the archive action in the message view of the K9 mail client."
      ],
      [
        "setLockScreenNotificationVisibility(com.fsck.k9.K9$LockScreenNotificationVisibility)",
        "sets the visibility of the lock screen notification for the K9 email application."
      ],
      [
        "setMessageListPreviewLines(int)",
        "sets the number of lines to show for message previews in the K9 email app."
      ],
      [
        "setQuietTimeStarts(java.lang.String)",
        "sets the start time for a quiet time period in the K9 email client."
      ],
      [
        "messageViewShowNext()",
        "returns a boolean value indicating whether to display the next message in the message view."
      ],
      [
        "setHideTimeZone(boolean)",
        "sets whether the time zone information should be hidden or not in the K9 email client."
      ],
      [
        "isMessageViewCopyActionVisible()",
        "returns whether the copy message action is visible in the message view of the K9 email client."
      ],
      [
        "showCorrespondentNames()",
        "returns a boolean value indicating whether the correspondent names should be shown or not."
      ],
      [
        "getPgpSignOnlyDialogCounter()",
        "returns the value of a counter variable for PGP sign-only dialog in the K9 email client."
      ],
      [
        "save(com.fsck.k9.preferences.StorageEditor)",
        "saves the K-9 Mail application preferences to a storage editor."
      ],
      [
        "getQuietTimeEnabled()",
        "returns whether the quiet time feature is enabled in the K9 email client."
      ],
      [
        "setSplitViewMode(com.fsck.k9.K9$SplitViewMode)",
        "sets the split view mode of the email client K9."
      ],
      [
        "getSortType()",
        "returns the current sort type used in the K9 email client."
      ],
      [
        "setMessageViewFixedWidthFont(boolean)",
        "sets a boolean value for whether the font in the message view should be fixed width or not in the K9 email client."
      ],
      [
        "setQuietTimeEnabled(boolean)",
        "sets the value of the static boolean variable \"quietTimeEnabled\" in the \"K9\" class to the provided value."
      ],
      [
        "getK9ThemeResourceId(com.fsck.k9.K9$Theme)",
        "returns the resource ID for the corresponding K9 email client theme."
      ],
      [
        "getK9ThemeResourceId()",
        "returns the resource ID of the current K9 email client theme."
      ],
      [
        "setMessageViewCopyActionVisible(boolean)",
        "sets the visibility of the copy action button in the message view of K9 email client."
      ],
      [
        "getK9Language()",
        "returns the language used in the K9 email client."
      ],
      [
        "getK9MessageViewTheme()",
        "returns the message view theme of K9 based on whether it is set as global or not."
      ],
      [
        "showContactName()",
        "returns a boolean value indicating whether to show the contact name."
      ],
      [
        "gesturesEnabled()",
        "returns the value of a static boolean variable `mGesturesEnabled` in the `K9` class."
      ],
      [
        "setShowContactName(boolean)",
        "sets whether or not to display the contact name in the K9 email client."
      ],
      [
        "wrapFolderNames()",
        "returns the value of the boolean `mWrapFolderNames` in the `K9` class."
      ],
      [
        "setMessageListSenderAboveSubject(boolean)",
        "sets whether to display the sender of an email above or below its subject in the message list in the K9 email client."
      ],
      [
        "getLockScreenNotificationVisibility()",
        "returns the current lock screen notification visibility setting in the K9 email client app."
      ],
      [
        "getFontSizes()",
        "returns the `FontSizes` object of the `K9` class in the `com.fsck.k9` package."
      ],
      [
        "isNotificationDuringQuietTimeEnabled()",
        "returns a boolean value indicating whether the notification during quiet time is enabled or not in the K9 Java class."
      ],
      [
        "measureAccounts()",
        "returns the value of a boolean variable representing whether or not accounts are being measured in the K9 email client."
      ],
      [
        "useFixedMessageViewTheme()",
        "returns a boolean indicating whether K9 email client should use a fixed message view theme."
      ],
      [
        "setSortAscending(com.fsck.k9.Account$SortType,boolean)",
        "sets the sorting order (ascending/descending) for a specific sort type in K9 email client's account."
      ],
      [
        "getBackgroundOps()",
        "returns the background operations of the K9 email client."
      ],
      [
        "setColorizeMissingContactPictures(boolean)",
        "sets the value of a static boolean variable that determines whether K9 email client should colorize missing contact pictures."
      ],
      [
        "confirmSpam()",
        "returns the value of a boolean variable called `mConfirmSpam` which indicates whether a spam message should be confirmed before moving it to the spam folder."
      ],
      [
        "areDatabasesUpToDate()",
        "returns a boolean indicating whether all databases are currently up to date with the current database schema in the K9 email application."
      ],
      [
        "isThreadedViewEnabled()",
        "returns a boolean value indicating whether threaded view is enabled in the K9 email client."
      ],
      [
        "setWrapFolderNames(boolean)",
        "sets the state of the boolean variable `mWrapFolderNames` in the `K9` class to the parameter value passed in."
      ],
      [
        "getK9ComposerTheme()",
        "returns the composer theme used by K9 email client, either the global theme or a specific composer theme if one is set."
      ],
      [
        "setMessageListCheckboxes(boolean)",
        "sets the value of a boolean variable representing whether message list checkboxes are enabled in the email client."
      ],
      [
        "onCreate()",
        "initializes various components and listeners for the K9 email client on Android."
      ],
      [
        "getQuietTimeStarts()",
        "returns the value of a static variable representing the starting time of a quiet period in the K9 email client."
      ],
      [
        "showContactPicture()",
        "returns a boolean value indicating whether to show contact pictures or not in the K9 email application."
      ],
      [
        "messageListCheckboxes()",
        "returns the value of a static boolean variable \"mMessageListCheckboxes\" in the K9 class."
      ],
      [
        "setAutofitWidth(boolean)",
        "sets the value of a boolean variable controlling whether the width of content should be automatically adjusted in an email client program called K9."
      ],
      [
        "getQuietTimeEnds()",
        "returns the end time of the quiet time setting in the K9 email client."
      ],
      [
        "setMessageViewShowNext(boolean)",
        "sets a boolean value for whether to show the next message in the message view."
      ],
      [
        "setChangeContactNameColor(boolean)",
        "sets a boolean value for changing the color of contact names in the K9 email client."
      ],
      [
        "setConfirmDeleteFromNotification(boolean)",
        "sets a boolean value to determine whether or not to confirm deleting from a notification in the K9 email app."
      ],
      [
        "confirmDeleteStarred()",
        "returns a boolean indicating whether confirmation is needed before deleting a starred email message in the K9 email client."
      ],
      [
        "setNotificationHideSubject(com.fsck.k9.K9$NotificationHideSubject)",
        "sets the mode for hiding email subjects in notifications for the K9 email client."
      ],
      [
        "setUseFixedMessageViewTheme(boolean)",
        "sets the use of a fixed message view theme for the K9 Java email client."
      ],
      [
        "autofitWidth()",
        "returns a boolean value indicating whether the width should be automatically adjusted or not."
      ],
      [
        "hideUserAgent()",
        "returns a boolean value indicating whether or not the user agent is hidden."
      ],
      [
        "setMessageViewDeleteActionVisible(boolean)",
        "controls the visibility of the \"delete\" action in the message view of the K9 email client."
      ],
      [
        "checkCachedDatabaseVersion()",
        "checks the cached version of the accounts' databases using SharedPreferences and sets a flag indicating whether the databases are up to date."
      ],
      [
        "isHideSpecialAccounts()",
        "returns the value of a boolean variable called \"mHideSpecialAccounts\" in the static class \"K9\"."
      ],
      [
        "setConfirmMarkAllRead(boolean)",
        "sets the confirmation flag for marking all emails as read in the K-9 email client to either true or false based on the input boolean value."
      ],
      [
        "confirmDelete()",
        "returns a boolean indicating whether or not the confirmation prompt for deleting emails is enabled in the K9 email client app."
      ],
      [
        "isMessageViewArchiveActionVisible()",
        "checks whether the message view archive action is visible in the K9 email app."
      ],
      [
        "getContactNameColor()",
        "returns the contact name color from the K9 email client."
      ],
      [
        "getK9Theme()",
        "gets the current K9 email client theme."
      ],
      [
        "setStartIntegratedInbox(boolean)",
        "sets a boolean value for whether K9 should start with an integrated inbox or not."
      ],
      [
        "countSearchMessages()",
        "returns a boolean value indicating whether or not K9 should count search results."
      ],
      [
        "setMessageViewMoveActionVisible(boolean)",
        "sets the visibility of the move action in the message view of the K-9 mail client."
      ],
      [
        "isDebug()",
        "returns whether the K9 debugging flag is set to true or false."
      ],
      [
        "getNotificationHideSubject()",
        "returns the value of the static variable `sNotificationHideSubject` in the `K9` class."
      ],
      [
        "setQuietTimeEnds(java.lang.String)",
        "sets the end time of the quiet time period for K9 email app."
      ],
      [
        "getPgpInlineDialogCounter()",
        "returns the value of the static variable `sPgpInlineDialogCounter` from the `K9` class in the `com.fsck.k9` package."
      ],
      [
        "setBackgroundOps(java.lang.String)",
        "sets the background operations mode in the K9 email client using the input string."
      ],
      [
        "setConfirmSpam(boolean)",
        "sets the confirmation status for marking an email as spam in the email client K9 to the value of a boolean parameter."
      ],
      [
        "setServicesEnabled(android.content.Context)",
        "enables or disables certain components of the application depending on whether any email accounts are configured."
      ],
      [
        "setHideSpecialAccounts(boolean)",
        "sets a boolean value to hide special accounts in the K9 email application."
      ],
      [
        "isSortAscending(com.fsck.k9.Account$SortType)",
        "returns a boolean value indicating whether the given `sortType` for an email account is set to be sorted in ascending or descending order."
      ],
      [
        "loadPrefs(com.fsck.k9.Preferences)",
        "loads preferences into the static variables of the K9 email client."
      ],
      [
        "setMessageListStars(boolean)",
        "sets the value of a static variable that determines whether or not the message list should display stars."
      ],
      [
        "setOpenPgpSupportSignOnly(boolean)",
        "sets the `openPgpSupportSignOnly` variable of the `K9` class to the value specified as a parameter."
      ],
      [
        "getNotificationQuickDeleteBehaviour()",
        "returns the current NotificationQuickDelete behavior setting in the K9 email client."
      ],
      [
        "showAnimations()",
        "returns the value of a static variable `mAnimations` in the class `com.fsck.k9.K9`."
      ],
      [
        "setUseVolumeKeysForListNavigation(boolean)",
        "sets whether or not the volume keys should be used for list navigation in K9, an email application."
      ],
      [
        "getK9MessageViewThemeSetting()",
        "returns the currently set theme for the K9 email message viewer."
      ],
      [
        "setAttachmentDefaultPath(java.lang.String)",
        "sets the default path for email attachments in the K9 email client to the specified path."
      ],
      [
        "setPgpSignOnlyDialogCounter(int)",
        "sets the value of a static variable that holds a counter for PGP sign-only dialog prompts in the K9 email client."
      ],
      [
        "setThreadedViewEnabled(boolean)",
        "sets the value of the \"sThreadedViewEnabled\" variable to the boolean value specified in the method parameter, thereby enabling or disabling threaded view in the K9 email client."
      ],
      [
        "isMessageViewMoveActionVisible()",
        "returns the visibility state of message view move action in the email client program K-9."
      ],
      [
        "confirmDiscardMessage()",
        "returns the value of the boolean flag mConfirmDiscardMessage."
      ],
      [
        "setOpenPgpProvider(java.lang.String)",
        "sets the OpenPGP provider for the K9 email client."
      ],
      [
        "isMessageViewSpamActionVisible()",
        "returns a boolean value representing whether the spam action is visible in the message view."
      ],
      [
        "useVolumeKeysForNavigationEnabled()",
        "returns a boolean value indicating whether the volume keys can be used for navigation in the K9 email client."
      ],
      [
        "isOpenPgpProviderConfigured()",
        "checks if the OpenPGP provider is configured in the K9 email application."
      ],
      [
        "useVolumeKeysForListNavigationEnabled()",
        "returns the value of the boolean variable \"mUseVolumeKeysForListNavigation\" in the K9 class."
      ],
      [
        "setK9MessageViewThemeSetting(com.fsck.k9.K9$Theme)",
        "sets the theme for the message view in K9 email application."
      ],
      [
        "messageListPreviewLines()",
        "returns the number of preview lines to be displayed in the message list of the email client."
      ],
      [
        "setShowContactPicture(boolean)",
        "sets the value of a boolean variable that determines whether or not to show contact pictures in the email client."
      ],
      [
        "setMessageViewSpamActionVisible(boolean)",
        "sets the visibility of the spam action button in the email message view in the K9 email app to the given boolean value."
      ],
      [
        "getOpenPgpProvider()",
        "returns the OpenPGP provider used by the K9 email client."
      ],
      [
        "setMeasureAccounts(boolean)",
        "sets the measurement of accounts to either true or false for the K9 email client."
      ],
      [
        "confirmDeleteFromNotification()",
        "returns whether or not the user has enabled the confirmation prompt for deleting emails from notifications in the K9 email app."
      ],
      [
        "setConfirmDelete(boolean)",
        "sets a boolean value for confirming deletion in the email client application K9."
      ],
      [
        "messageViewFixedWidthFont()",
        "returns a boolean value indicating whether the fixed-width font is used in the message view of the K9 email application."
      ],
      [
        "isMessageViewDeleteActionVisible()",
        "returns a boolean value indicating whether the \"delete\" action is currently visible in the message view of the K-9 email client."
      ],
      [
        "messageListStars()",
        "returns the value of the `mMessageListStars` boolean variable in the `K9` class."
      ],
      [
        "changeContactNameColor()",
        "returns a boolean value indicating whether the contact name color has been changed."
      ],
      [
        "startIntegratedInbox()",
        "returns the boolean value of K9's integrated inbox status."
      ],
      [
        "setSortType(com.fsck.k9.Account$SortType)",
        "sets the sorting type for an email account in the K9 email client."
      ],
      [
        "setK9ComposerThemeSetting(com.fsck.k9.K9$Theme)",
        "sets the composer theme setting for the K9 email client."
      ],
      [
        "hideTimeZone()",
        "returns a boolean value indicating whether the time zone is hidden or not in the application K9."
      ],
      [
        "getK9ComposerThemeSetting()",
        "returns the composer theme setting of the K9 email application."
      ],
      [
        "setConfirmDiscardMessage(boolean)",
        "sets a boolean value that determines whether the user is prompted to confirm discarding a message in the email client K9."
      ],
      [
        "getAttachmentDefaultPath()",
        "returns the default attachment path as a string."
      ],
      [
        "saveSettingsAsync()",
        "saves the settings of the K9 email client asynchronously."
      ],
      [
        "setCountSearchMessages(boolean)",
        "sets a boolean value for whether or not to count search messages in the K9 email client."
      ],
      [
        "isQuietTime()",
        "checks if the current time falls within the specified quiet time period."
      ],
      [
        "setK9Language(java.lang.String)",
        "sets the language for the K9 email client to the specified language."
      ],
      [
        "setUseBackgroundAsUnreadIndicator(boolean)",
        "sets whether or not to use background as unread indicator in the K9 email client."
      ],
      [
        "setUseVolumeKeysForNavigation(boolean)",
        "sets whether or not the volume keys on the device should be used for navigation in the K9 email app."
      ],
      [
        "setShowCorrespondentNames(boolean)",
        "sets whether or not to show correspondent names in K-9 mail application."
      ],
      [
        "setK9Theme(com.fsck.k9.K9$Theme)",
        "sets the theme of the K-9 email client application, given a specified theme."
      ],
      [
        "messageViewReturnToList()",
        "returns whether the K9 email app should navigate to the message list after viewing a message."
      ],
      [
        "confirmMarkAllRead()",
        "returns a boolean value for the confirmation setting for marking all emails as read in the K9 email client."
      ]
    ],
    "class com.fsck.k9.EmailAddressValidator": [
      [
        "fixText(java.lang.CharSequence)",
        "returns an empty string, without performing any actual text fixing."
      ],
      [
        "isValid(java.lang.CharSequence)",
        "validates if the input text is a valid email address."
      ],
      [
        "isValidAddressOnly(java.lang.CharSequence)",
        "validates if a given text is a valid email address according to a predefined pattern."
      ]
    ],
    "enum com.fsck.k9.Account$SortType": [
      [
        "isDefaultAscending()",
        "returns whether or not the default sorting order for this account's emails is ascending."
      ],
      [
        "getToast(boolean)",
        "returns a toast message based on whether the sort type is ascending or descending."
      ]
    ],
    "class com.fsck.k9.Globals": [
      [
        "getContext()",
        "returns the context of the application or throws an exception if no context is provided."
      ]
    ],
    "class com.fsck.k9.FontSizes": [
      [
        "getMessageViewContentAsPercent()",
        "returns the percentage value of the font size used for the message content in the email message view."
      ],
      [
        "getMessageViewDate()",
        "returns the value of the messageViewDate variable in the FontSizes class."
      ],
      [
        "getFolderStatus()",
        "returns the folder status as an integer value."
      ],
      [
        "setMessageViewContentAsPercent(int)",
        "sets the font size of the message content in an email in percentage based on the input parameter."
      ],
      [
        "getMessageViewBCC()",
        "returns the font size for the blind carbon copy field in an email message view."
      ],
      [
        "setMessageViewSubject(int)",
        "sets the font size for the subject line of an email message in K9 email client."
      ],
      [
        "setMessageListPreview(int)",
        "sets the font size of message list previews in the K9 email app."
      ],
      [
        "getMessageViewAdditionalHeaders()",
        "returns an integer value representing the number of additional headers to display in a message view."
      ],
      [
        "getMessageListDate()",
        "returns the value of the variable `messageListDate`."
      ],
      [
        "getMessageViewCC()",
        "returns the value of the variable `messageViewCC` from the `FontSizes` class."
      ],
      [
        "setMessageListDate(int)",
        "sets the font size of the date displayed in a message list."
      ],
      [
        "setMessageViewTo(int)",
        "sets the message view font size to the specified integer value."
      ],
      [
        "getMessageComposeInput()",
        "returns the value of the `messageComposeInput` variable."
      ],
      [
        "getMessageViewSubject()",
        "returns the font size for the subject line in a message view."
      ],
      [
        "setMessageListSender(int)",
        "sets the value of the variable \"messageListSender\" in the \"FontSizes\" class to the value passed as an argument."
      ],
      [
        "getMessageViewSender()",
        "returns the value of the `messageViewSender` variable."
      ],
      [
        "load(com.fsck.k9.preferences.Storage)",
        "loads font sizes from a storage object and assigns them to various variables in the FontSizes class."
      ],
      [
        "setAccountDescription(int)",
        "sets the account description for a FontSizes object."
      ],
      [
        "setAccountName(int)",
        "sets the value of the variable `accountName` to the provided integer value."
      ],
      [
        "setMessageViewSender(int)",
        "sets the sender font size for the message view."
      ],
      [
        "setMessageListSubject(int)",
        "sets the font size for the subject line in a message list view."
      ],
      [
        "getMessageListPreview()",
        "returns the value of the variable \"messageListPreview\" in the FontSizes class."
      ],
      [
        "getMessageListSender()",
        "returns the current value of the variable \"messageListSender\" in the \"FontSizes\" class."
      ],
      [
        "setMessageViewBCC(int)",
        "sets the value of the `messageViewBCC` variable in the `FontSizes` class to the provided integer parameter."
      ],
      [
        "setViewTextSize(android.widget.TextView,int)",
        "sets the text size of a given TextView to a specified font size in sp (scaled pixels)."
      ],
      [
        "setMessageViewAdditionalHeaders(int)",
        "sets the number of additional headers to display in the message view."
      ],
      [
        "setFolderName(int)",
        "sets the folder name of a font size object to the given integer value."
      ],
      [
        "getMessageViewTo()",
        "returns the value of the private variable `messageViewTo`."
      ],
      [
        "getAccountDescription()",
        "returns the value of the variable \"accountDescription\"."
      ],
      [
        "getMessageListSubject()",
        "returns the messageListSubject integer value."
      ],
      [
        "setMessageComposeInput(int)",
        "sets the value of the messageComposeInput variable in the FontSizes class to the specified integer parameter."
      ],
      [
        "setMessageViewDate(int)",
        "sets the font size for the date displayed in the message view of an email client."
      ],
      [
        "save(com.fsck.k9.preferences.StorageEditor)",
        "saves the font sizes for various components in an email application to the preferences storage editor."
      ],
      [
        "getAccountName()",
        "returns the value of the `accountName` variable as an integer."
      ],
      [
        "getFolderName()",
        "returns the value of the `folderName` variable."
      ],
      [
        "setMessageViewCC(int)",
        "sets the message view CC font size to the specified value."
      ],
      [
        "setFolderStatus(int)",
        "sets the status of a folder in terms of font sizes in the K9 email app."
      ]
    ],
    "class com.fsck.k9.NotificationSetting": [
      [
        "isRingEnabled()",
        "returns a boolean value indicating whether the ringtone is allowed to play or not."
      ],
      [
        "isVibrateEnabled()",
        "returns a boolean value indicating whether vibration is enabled for notifications in the K9 email client."
      ],
      [
        "isLedEnabled()",
        "returns whether the LED notification is enabled or not."
      ],
      [
        "setLed(boolean)",
        "sets the value of the `ledEnabled` boolean variable to the value of the `led` parameter in a thread-safe manner."
      ],
      [
        "setVibratePattern(int)",
        "sets the vibrate pattern for a notification in the K-9 email client."
      ],
      [
        "getVibrateTimes()",
        "returns the value of the variable \"vibrateTimes\" in the NotificationSetting class."
      ],
      [
        "setRingEnabled(boolean)",
        "sets the boolean value for whether or not ringtones are enabled in the notification settings."
      ],
      [
        "getLedColor()",
        "returns the value of the variable \"ledColor\" in a synchronized manner."
      ],
      [
        "getRingtone()",
        "returns the ringtone URI as a string for the notification setting."
      ],
      [
        "setVibrate(boolean)",
        "sets the vibration enabled state of a notification."
      ],
      [
        "getVibration(int,int)",
        "returns a vibration pattern based on the input of pattern and times."
      ],
      [
        "getVibration()",
        "fetches a vibration pattern that is multiplied by the number of times requested."
      ],
      [
        "setVibrateTimes(int)",
        "sets the number of times the device will vibrate for a notification in the K-9 email app."
      ],
      [
        "getVibratePattern()",
        "returns the vibrate pattern set in the notification settings."
      ],
      [
        "setLedColor(int)",
        "sets the LED color for a notification in the K9 email app."
      ],
      [
        "setRingtone(java.lang.String)",
        "sets the ringtone URI for the notification setting."
      ]
    ],
    "class com.fsck.k9.Preferences": [
      [
        "setDefaultAccount(com.fsck.k9.Account)",
        "sets the default account UUID in the preferences storage for a given account."
      ],
      [
        "getAvailableAccounts()",
        "returns a collection of enabled and available email accounts registered on the system using the K9 email app."
      ],
      [
        "loadAccounts()",
        "loads the user's email accounts from storage, creates account objects from their UUIDs, and adds them to a hash map and linked list for later use."
      ],
      [
        "getAccounts()",
        "returns a list of all registered email accounts in the K9 email client application."
      ],
      [
        "newAccount()",
        "creates and adds a new email account to the list of existing accounts."
      ],
      [
        "getAccount(java.lang.String)",
        "returns a K9 email account corresponding to the UUID provided as an argument, after either loading all existing accounts or retrieving the account from memory."
      ],
      [
        "getPreferences(android.content.Context)",
        "returns a synchronized instance of the Preferences class for the given Android application context."
      ],
      [
        "deleteAccount(com.fsck.k9.Account)",
        "deletes an email account and all associated data from the application."
      ],
      [
        "getStorage()",
        "returns an instance of the `Storage` class belonging to the `com.fsck.k9.preferences` package."
      ],
      [
        "getDefaultAccount()",
        "returns the default email account by checking if one is marked as default, and if not, selecting the first available account and marking it as default."
      ]
    ],
    "class com.fsck.k9.Clock": [
      [
        "getTime()",
        "returns the current system time in milliseconds as a long integer data type."
      ]
    ],
    "class com.fsck.k9.Account": [
      [
        "getLocalStore()",
        "returns the LocalStore instance for a specific K9 Account."
      ],
      [
        "addCertificate(com.fsck.k9.activity.setup.AccountSetupCheckSettings$CheckDirection,java.security.cert.X509Certificate)",
        "adds a new certificate for either the incoming or outgoing server to the local key store."
      ],
      [
        "setDisplayCount(int)",
        "sets the number of emails to display for an account, and if the parameter is -1, sets it to the default visible limit."
      ],
      [
        "isReplyAfterQuote()",
        "returns the value of the boolean variable `replyAfterQuote` that indicates whether the account's email client will place the cursor after the quoted text when replying to an email."
      ],
      [
        "getIdentities()",
        "returns a synchronized list of identities associated with an email account in the K-9 email client for Android."
      ],
      [
        "setSignatureBeforeQuotedText(boolean)",
        "sets a boolean variable indicating whether the email signature should be placed before or after the quoted text in an email message."
      ],
      [
        "setIdleRefreshMinutes(int)",
        "sets the number of minutes before the account is considered idle and needs to be refreshed."
      ],
      [
        "goToUnreadMessageSearch()",
        "returns whether the account has a search folder for unread messages."
      ],
      [
        "setSortType(com.fsck.k9.Account$SortType)",
        "sets the sorting type of the email account."
      ],
      [
        "setFolderTargetMode(com.fsck.k9.Account$FolderMode)",
        "sets the folder target mode for a K9 email account."
      ],
      [
        "getStoreUri()",
        "returns the store URI for a specific email account."
      ],
      [
        "getMaxPushFolders()",
        "returns the maximum number of folders that can be pushed in this email account."
      ],
      [
        "setEnabled(boolean)",
        "sets the boolean flag \"isEnabled\" of an instance of the \"com.fsck.k9.Account\" class to the value of the input parameter \"enabled\"."
      ],
      [
        "setExpungePolicy(com.fsck.k9.Account$Expunge)",
        "sets the expunge policy for a given email account in the K9 email client."
      ],
      [
        "limitToDisplayableFolders(com.fsck.k9.search.LocalSearch)",
        "modifies a LocalSearch instance to limit the search to displayable folders based on the current folder display mode of the Account."
      ],
      [
        "hasDraftsFolder()",
        "checks whether an email account has a drafts folder set or not."
      ],
      [
        "setArchiveFolderName(java.lang.String)",
        "sets the name of the archive folder for the email account."
      ],
      [
        "getSearchableFolders()",
        "returns the searchable folders associated with a K-9 email account."
      ],
      [
        "isSortAscending(com.fsck.k9.Account$SortType)",
        "checks if the specified sort type is in ascending order and returns a boolean value."
      ],
      [
        "setInboxFolderName(java.lang.String)",
        "sets the name of the inbox folder for an email account."
      ],
      [
        "setTransportUri(java.lang.String)",
        "sets the transport URI for a K9 email account."
      ],
      [
        "getFolderSyncMode()",
        "returns the folder synchronization mode of a K-9 mail account."
      ],
      [
        "setNotifyContactsMailOnly(boolean)",
        "sets the value of a boolean property `notifyContactsMailOnly` in the `Account` class."
      ],
      [
        "setSyncRemoteDeletions(boolean)",
        "sets the boolean value for syncing remote deletions for a given email account."
      ],
      [
        "setFolderPushMode(com.fsck.k9.Account$FolderMode)",
        "updates the folder push mode of a K9 email account and returns whether the update was successful or not."
      ],
      [
        "getAlwaysBcc()",
        "returns the value of the alwaysBcc variable in the Account class."
      ],
      [
        "setDraftsFolderName(java.lang.String)",
        "sets the name of the drafts folder for the email account."
      ],
      [
        "setSubscribedFoldersOnly(boolean)",
        "sets whether or not the account only shows subscribed folders."
      ],
      [
        "setMessageFormat(com.fsck.k9.Account$MessageFormat)",
        "sets the message format for an email account."
      ],
      [
        "getLastSelectedFolderName()",
        "returns the name of the last selected folder for a K-9 email account."
      ],
      [
        "getQuotePrefix()",
        "returns the quote prefix String for a synchronized instance of the Account Java class in com.fsck.k9."
      ],
      [
        "getStats(android.content.Context)",
        "retrieves and returns the statistics (e.g. unread message count, flagged message count) for a given email account using the provided context."
      ],
      [
        "getSpamFolderName()",
        "returns the name of the spam folder for a specific email account."
      ],
      [
        "syncRemoteDeletions()",
        "returns the state of the variable `syncRemoteDeletions`."
      ],
      [
        "save(com.fsck.k9.Preferences)",
        "saves the account details and settings in the K-9 Mail app preferences."
      ],
      [
        "useCompression(com.fsck.k9.mail.NetworkType)",
        "determines whether the account should use compression for a given network type."
      ],
      [
        "setSpamFolderName(java.lang.String)",
        "sets the name of the spam folder for the email account in the K9 email client."
      ],
      [
        "setAutomaticCheckIntervalMinutes(int)",
        "sets the automatic check interval time for the email account and returns a boolean indicating if the interval has been changed from its previous value."
      ],
      [
        "setGoToUnreadMessageSearch(boolean)",
        "sets a boolean flag that determines whether the account should navigate directly to the search results for unread messages."
      ],
      [
        "setShowPictures(com.fsck.k9.Account$ShowPictures)",
        "sets the value of the \"showPictures\" variable for an instance of the \"com.fsck.k9.Account\" class."
      ],
      [
        "setQuotePrefix(java.lang.String)",
        "sets the quote prefix for an email account."
      ],
      [
        "hashCode()",
        "calculates the hash code value for the `Account` object based on the hash code of its `accountUuid` property."
      ],
      [
        "getRemoteSearchNumResults()",
        "returns the number of results for a remote search in an email account."
      ],
      [
        "setFolderDisplayMode(com.fsck.k9.Account$FolderMode)",
        "sets the display mode of a folder in a K-9 email account and returns whether the display mode was actually changed."
      ],
      [
        "isRemoteSearchFullText()",
        "temporarily disables the full text search feature for remote search in an email account."
      ],
      [
        "isSearchByDateCapable()",
        "returns a boolean value indicating whether the email account associated with the Java class is capable of searching emails by date."
      ],
      [
        "getAccountNumber()",
        "returns the account number of the Java class `com.fsck.k9.Account`."
      ],
      [
        "isPushPollOnConnect()",
        "returns a boolean value indicating whether or not to push poll on connect for the account."
      ],
      [
        "getOutboxFolderName()",
        "returns the name of the outbox folder for the email account."
      ],
      [
        "getFolderPushMode()",
        "returns the folder push mode of an email account."
      ],
      [
        "setSentFolderName(java.lang.String)",
        "sets the name of the sent folder for an email account in the K9 app."
      ],
      [
        "setChipColor(int)",
        "sets the color of a chip associated with an email account and caches the updated chip data."
      ],
      [
        "getLatestOldMessageSeenTime()",
        "returns the timestamp of the latest old message seen by the account."
      ],
      [
        "findIdentity(com.fsck.k9.mail.Address)",
        "searches for a matching email identity within the `identities` list for a given email address."
      ],
      [
        "setEmail(java.lang.String)",
        "sets the email address for the first identity of a K9 email account."
      ],
      [
        "setSortAscending(com.fsck.k9.Account$SortType,boolean)",
        "sets whether the sort order for a specific account sort type is ascending or descending."
      ],
      [
        "getName()",
        "returns the name associated with the first identity in the account."
      ],
      [
        "generateColorChip(boolean,boolean)",
        "generates a color chip based on the message's read and flagged status."
      ],
      [
        "isAnIdentity(com.fsck.k9.mail.Address)",
        "checks if the given email address is already registered as an identity in the account."
      ],
      [
        "getFolderUnreadCount(android.content.Context,java.lang.String)",
        "returns the number of unread messages in a specific folder for a given email account."
      ],
      [
        "getEmail()",
        "returns the email address associated with the first identity of the associated K-9 mail account."
      ],
      [
        "subscribedFoldersOnly()",
        "returns a boolean value representing whether the account should only display subscribed folders."
      ],
      [
        "hasArchiveFolder()",
        "checks if a certain account in a Java program has an archive folder set."
      ],
      [
        "setFolderNotifyNewMailMode(com.fsck.k9.Account$FolderMode)",
        "sets the notification mode for new emails in a specific folder for a K9 email account."
      ],
      [
        "setReplyAfterQuote(boolean)",
        "sets a boolean value used in determining whether to reply after or before the quoted text in an email message."
      ],
      [
        "setLastSelectedFolderName(java.lang.String)",
        "sets the name of the last selected folder for the email account."
      ],
      [
        "getAutomaticCheckIntervalMinutes()",
        "returns the automatic check interval time in minutes for the given email account."
      ],
      [
        "getSignatureUse()",
        "returns the signature use status of the first identity of an email account."
      ],
      [
        "setRingNotified(boolean)",
        "sets the value of the variable `ringNotified` in the `Account` class to the boolean parameter passed to it."
      ],
      [
        "getMessageFormat()",
        "returns the message format of a K-9 mail account."
      ],
      [
        "isNotifyNewMail()",
        "returns a boolean value indicating whether notifications should be sent for new emails in the current account."
      ],
      [
        "setStripSignature(boolean)",
        "sets a boolean value to determine whether the signature should be stripped from outgoing messages for a given email account."
      ],
      [
        "setMarkMessageAsReadOnView(boolean)",
        "sets a boolean value indicating whether or not messages should be marked as read when viewed in the email client."
      ],
      [
        "isDefaultQuotedTextShown()",
        "returns whether the default quoted text is shown in the email replies for the account."
      ],
      [
        "getEarliestPollDate()",
        "calculates and returns the earliest date to poll for messages in an email account based on the maximum age of messages to be polled."
      ],
      [
        "setRemoteSearchFullText(boolean)",
        "sets the value of the boolean flag for fully searching remote emails."
      ],
      [
        "generateAccountNumber(com.fsck.k9.Preferences)",
        "generates a new account number by finding the first unused integer value."
      ],
      [
        "setMessageReadReceipt(boolean)",
        "sets whether a read receipt should be sent for a message in a specific email account."
      ],
      [
        "setCompression(com.fsck.k9.mail.NetworkType,boolean)",
        "sets the compression usage for a specific network type for an email account."
      ],
      [
        "setDefaultQuotedTextShown(boolean)",
        "sets whether the default quoted text is shown in emails for a particular email account."
      ],
      [
        "isStripSignature()",
        "returns a boolean value indicating whether the signature should be stripped from the email or not, based on the current account settings."
      ],
      [
        "setQuoteStyle(com.fsck.k9.Account$QuoteStyle)",
        "sets the quote style of an email account in the K-9 email client."
      ],
      [
        "isAnIdentity(com.fsck.k9.mail.Address[])",
        "checks whether any of the given email addresses are associated with an identity in the account."
      ],
      [
        "isEnabled()",
        "returns a boolean value indicating whether the account is enabled or not."
      ],
      [
        "setSearchableFolders(com.fsck.k9.Account$Searchable)",
        "sets the searchable folders for a K-9 email account."
      ],
      [
        "isSignatureBeforeQuotedText()",
        "returns whether the signature is placed before the quoted text in an email for a particular account."
      ],
      [
        "isNotifyContactsMailOnly()",
        "returns the value of the `notifyContactsMailOnly` boolean variable in the `com.fsck.k9.Account` class."
      ],
      [
        "getFolderNotifyNewMailMode()",
        "returns the folder notification mode for new mail in an email account."
      ],
      [
        "setName(java.lang.String)",
        "sets the name of the first identity associated with the email account."
      ],
      [
        "setIdentities(java.util.List)",
        "sets the list of identities for an email account."
      ],
      [
        "allowRemoteSearch()",
        "returns a boolean value indicating whether remote search is allowed for the specified email account in K-9 email client."
      ],
      [
        "setSignatureUse(boolean)",
        "sets the use of a signature in the email messages for the first identity associated with the account."
      ],
      [
        "getRemoteStore()",
        "returns an instance of a remote email store for a given account using the K9 email application."
      ],
      [
        "hasTrashFolder()",
        "checks if the specified email account has a trash folder set up."
      ],
      [
        "deleteCertificate(java.lang.String,int,com.fsck.k9.activity.setup.AccountSetupCheckSettings$CheckDirection)",
        "deletes any certificate stored for the old host/port if the existing settings for an account have changed."
      ],
      [
        "getLocalStorageProviderId()",
        "returns the ID of the local storage provider for the K9 email Account object."
      ],
      [
        "setAutoExpandFolderName(java.lang.String)",
        "sets the name of the folder that should be automatically expanded in the email account."
      ],
      [
        "hasSpamFolder()",
        "checks if the email account has a spam folder set and returns a boolean value reflecting the same."
      ],
      [
        "setMaximumAutoDownloadMessageSize(int)",
        "sets the maximum size of a message that can be automatically downloaded in the email account."
      ],
      [
        "getQuoteStyle()",
        "returns the quote style of the K9 email account."
      ],
      [
        "getSignature()",
        "returns the signature of the first identity associated with a K-9 email account."
      ],
      [
        "getInboxFolderName()",
        "returns the name of the inbox folder associated with the email account."
      ],
      [
        "setRemoteSearchNumResults(int)",
        "sets the maximum number of search results to retrieve from a remote account and ensures it is not negative."
      ],
      [
        "excludeSpecialFolders(com.fsck.k9.search.LocalSearch)",
        "modifies a LocalSearch instance to exclude special folders (such as Trash, Drafts, Spam, Outbox and Sent) from the search, but includes the Inbox folder."
      ],
      [
        "setPushPollOnConnect(boolean)",
        "sets whether the account should initiate a push poll when connecting or not."
      ],
      [
        "getTrashFolderName()",
        "returns the name of the trash folder for a specific email account."
      ],
      [
        "toString()",
        "returns the description of a K9 email account as a string."
      ],
      [
        "getArchiveFolderName()",
        "returns the name of the archive folder for the K9 email account."
      ],
      [
        "getDescription()",
        "returns the description of a K9 email Account as a string."
      ],
      [
        "getAutoExpandFolderName()",
        "returns the name of the folder that is set to automatically expand in the email account."
      ],
      [
        "setMaximumPolledMessageAge(int)",
        "sets the maximum age of messages that can be polled by the account."
      ],
      [
        "setLocalStorageProviderId(java.lang.String)",
        "sets the local storage provider ID for an email account and attempts to switch to it if it differs from the current ID."
      ],
      [
        "hasSentFolder()",
        "checks if the account has a sent folder set and returns true if it does."
      ],
      [
        "getMaximumAutoDownloadMessageSize()",
        "returns the maximum size of a message that can be automatically downloaded for a specific email account."
      ],
      [
        "getSortType()",
        "returns the sorting type of an email account."
      ],
      [
        "setDescription(java.lang.String)",
        "sets the description property of an object of the `Account` class to a given string value."
      ],
      [
        "getChipColor()",
        "returns the chip color of a K9 email account."
      ],
      [
        "getDeletePolicy()",
        "returns the delete policy of a given email account synced with the K-9 email client."
      ],
      [
        "isMarkMessageAsReadOnView()",
        "returns the value of a boolean variable indicating whether a message should be marked as read when viewed."
      ],
      [
        "setDeletePolicy(com.fsck.k9.Account$DeletePolicy)",
        "sets the delete policy for the email account."
      ],
      [
        "isRingNotified()",
        "returns a boolean value indicating whether a new mail notification has been sent for this account."
      ],
      [
        "getDisplayCount()",
        "returns the display count of a specific email account."
      ],
      [
        "isAlwaysShowCcBcc()",
        "returns whether or not the account is configured to always show CC and BCC fields when composing emails."
      ],
      [
        "getDraftsFolderName()",
        "returns the name of the drafts folder for the given email account."
      ],
      [
        "getExpungePolicy()",
        "returns the current expunge policy for the specified account."
      ],
      [
        "getShowPictures()",
        "returns the `showPictures` value of the `com.fsck.k9.Account` object in a thread-safe manner."
      ],
      [
        "setCryptoKey(long)",
        "sets the PGP crypto key ID for the email account."
      ],
      [
        "isSpecialFolder(java.lang.String)",
        "checks whether a given folder name is a \"special folder\" in an email account."
      ],
      [
        "setNotifySelfNewMail(boolean)",
        "sets whether the account should notify itself when new mail arrives."
      ],
      [
        "move(com.fsck.k9.Preferences,boolean)",
        "moves an email account within the list of saved accounts in the K-9 email client's preferences."
      ],
      [
        "getNotificationSetting()",
        "returns the notification setting of a K9 email account."
      ],
      [
        "getSentFolderName()",
        "returns the name of the sent folder for the email account."
      ],
      [
        "setNotifyNewMail(boolean)",
        "sets a boolean value for whether or not to notify the user of new emails for a specific email account."
      ],
      [
        "setFolderSyncMode(com.fsck.k9.Account$FolderMode)",
        "sets the folder sync mode for a K-9 email account and returns a boolean value indicating if the sync mode has been changed."
      ],
      [
        "setAlwaysBcc(java.lang.String)",
        "sets the email address that should always be blind carbon copied (BCC) when sending emails for a specific email account."
      ],
      [
        "setShowOngoing(boolean)",
        "sets a boolean value to indicate whether ongoing notifications should be shown for the account."
      ],
      [
        "setAlwaysShowCcBcc(boolean)",
        "sets whether the CC and BCC fields should always be displayed when composing emails in a K9 email client account."
      ],
      [
        "getIdleRefreshMinutes()",
        "returns the number of minutes that the account should wait before automatically checking for new emails when it is in idle mode."
      ],
      [
        "isNotifySelfNewMail()",
        "returns a boolean value indicating whether the account should notify itself about new mail or not."
      ],
      [
        "setAllowRemoteSearch(boolean)",
        "sets the value of the boolean variable `allowRemoteSearch` to the given value `val`."
      ],
      [
        "isShowOngoing()",
        "returns a boolean value indicating whether ongoing notifications for synchronization events should be shown for this email account."
      ],
      [
        "getCryptoKey()",
        "returns the PGP crypto key of the account."
      ],
      [
        "setStoreUri(java.lang.String)",
        "sets the store URI for a K9 mail account."
      ],
      [
        "getFolderTargetMode()",
        "returns the folder target mode of a K9 email account."
      ],
      [
        "getTransportUri()",
        "returns the transport URI of a K9 email account."
      ],
      [
        "setSignature(java.lang.String)",
        "sets the signature of the email account to the given string."
      ],
      [
        "getFolderDisplayMode()",
        "returns the folder display mode of a K-9 email client account in a synchronized manner."
      ],
      [
        "equals(java.lang.Object)",
        "checks if the account UUIDs of two Account objects are equal, and returns true if they are."
      ],
      [
        "setLatestOldMessageSeenTime(long)",
        "sets the timestamp of the latest old message seen in the account."
      ],
      [
        "excludeUnwantedFolders(com.fsck.k9.search.LocalSearch)",
        "modifies the given LocalSearch instance by excluding certain unwanted folders (Trash, Spam, and Outbox) and ensuring that the Inbox is always included."
      ],
      [
        "getIdentity(int)",
        "returns a specific identity from a list of identities associated with an email account."
      ],
      [
        "getMaximumPolledMessageAge()",
        "returns the maximum age of the oldest message that has been polled in the account."
      ],
      [
        "isAvailable(android.content.Context)",
        "checks if the storage provider is available for the K9 email client."
      ],
      [
        "getUuid()",
        "returns the UUID (Universal Unique Identifier) of an email account in the K-9 email client."
      ],
      [
        "setTrashFolderName(java.lang.String)",
        "sets the name of the trash folder for the email account."
      ],
      [
        "setMaxPushFolders(int)",
        "sets the maximum number of folders to be pushed for an email account and returns a boolean indicating if the value was changed."
      ],
      [
        "isMessageReadReceiptAlways()",
        "returns the value of the boolean variable `messageReadReceipt`."
      ]
    ],
    "interface com.fsck.k9.K9$ApplicationAware": [
      [
        "initializeComponent(android.app.Application)",
        "initializes a component with the application instance."
      ]
    ],
    "class com.fsck.k9.Identity": [
      [
        "getDescription()",
        "returns the description of an email identity."
      ],
      [
        "setSignature(java.lang.String)",
        "sets the signature for a given email identity."
      ],
      [
        "setEmail(java.lang.String)",
        "sets the email address for an instance of the `Identity` class in a thread-safe manner."
      ],
      [
        "getSignatureUse()",
        "returns the value of the boolean variable `signatureUse`."
      ],
      [
        "getSignature()",
        "returns the signature of an Identity object."
      ],
      [
        "getName()",
        "returns the name of the Identity object represented by the class."
      ],
      [
        "setDescription(java.lang.String)",
        "sets the description for a particular identity object."
      ],
      [
        "setReplyTo(java.lang.String)",
        "sets the \"reply-to\" email address for a specific identity in the K9 email client."
      ],
      [
        "getReplyTo()",
        "returns the reply-to address of the email identity."
      ],
      [
        "setName(java.lang.String)",
        "sets the name of an instance of the class `com.fsck.k9.Identity`."
      ],
      [
        "toString()",
        "returns a string representation of the Identity object, containing its description, name, email, replyTo, and signature."
      ],
      [
        "getEmail()",
        "returns the email address associated with the identity object."
      ],
      [
        "setSignatureUse(boolean)",
        "sets the value of a boolean variable \"signatureUse\" in the Identity class."
      ]
    ],
    "enum com.fsck.k9.Account$DeletePolicy": [
      [
        "preferenceString()",
        "returns the integer value of the DeletePolicy setting as a string."
      ],
      [
        "fromInt(int)",
        "looks up a `DeletePolicy` enum constant based on a specified integer setting value."
      ]
    ]
  },
  "com.fsck.k9.account": {
    "class com.fsck.k9.account.AccountCreator": [
      [
        "getDefaultDeletePolicy(com.fsck.k9.mail.ServerSettings.Type)",
        "returns the default delete policy for an email account based on its server settings type."
      ],
      [
        "getDefaultPort(com.fsck.k9.mail.ConnectionSecurity,com.fsck.k9.mail.ServerSettings.Type)",
        "returns the default port for a given server type and connection security."
      ]
    ]
  },
  "com.fsck.k9.activity": {
    "class com.fsck.k9.activity.FolderList$FolderListAdapter": [
      [
        "getFilter()",
        "returns the filter used by the `FolderListAdapter` class for filtering the list of folders."
      ],
      [
        "getCount()",
        "returns the number of filtered folders in the FolderListAdapter class."
      ],
      [
        "getFolder(java.lang.String)",
        "returns a `FolderInfoHolder` object for the specified folder name, or null if the folder is not found in the list."
      ],
      [
        "isEnabled(int)",
        "enables all items in the FolderListAdapter of the FolderList class."
      ],
      [
        "getItemView(int,android.view.View,android.view.ViewGroup)",
        "returns the view for a given item position in a folder list and populates it with the necessary information."
      ],
      [
        "getView(int,android.view.View,android.view.ViewGroup)",
        "retrieves the view for a specific position in the folder list and logs an error if the position is illegal."
      ],
      [
        "areAllItemsEnabled()",
        "returns true if all items in the FolderListAdapter are enabled."
      ],
      [
        "isItemSelectable(int)",
        "returns true for any given position in the folder list, indicating that the item is selectable."
      ],
      [
        "getFolderIndex(java.lang.String)",
        "returns the index of a given folder name within a filtered list of folders."
      ],
      [
        "setFilter(android.widget.Filter)",
        "sets the Filter for the FolderListAdapter object."
      ],
      [
        "getItem(int)",
        "returns the item at the specified position in the filtered folder list of the FolderListAdapter."
      ],
      [
        "getItemId(int)",
        "returns the hash code of the name of the folder at the specified position in the filtered folder list."
      ],
      [
        "getItem(long)",
        "returns the item in the list at the specified position as a Java object."
      ],
      [
        "hasStableIds()",
        "returns true if the adapter's item IDs are stable across changes to the underlying data."
      ]
    ],
    "class com.fsck.k9.activity.Accounts$AccountsHandler": [
      [
        "progress(boolean)",
        "displays or hides a progress indicator in the menu of the Accounts activity based on a boolean parameter."
      ],
      [
        "dataChanged()",
        "updates the data displayed in the user interface of the K-9 email client app's accounts view."
      ],
      [
        "accountSizeChanged(com.fsck.k9.Account,long,long)",
        "updates the size of an email account and displays a toast message with the account description and the old and new account sizes."
      ],
      [
        "refreshTitle()",
        "refreshes the title of the view on the UI thread by setting a new view title."
      ],
      [
        "progress(int)",
        "updates the progress of an operation in the UI by setting the feature progress value of the window."
      ],
      [
        "workingAccount(com.fsck.k9.Account,int)",
        "displays a Toast message with information about a given email account."
      ]
    ],
    "class com.fsck.k9.activity.MessageCompose": [
      [
        "showContactPicker(int)",
        "shows a contact picker as a subactivity and sets a request code."
      ],
      [
        "onOptionsItemSelected(android.view.MenuItem)",
        "handles click events on menu items in the MessageCompose activity."
      ],
      [
        "onRecipientsChanged()",
        "sets a boolean flag to indicate changes have been made to the recipients of a message being composed."
      ],
      [
        "onMessageBuildCancel()",
        "resets the current message builder and hides the progress bar for composing a message."
      ],
      [
        "saveDraftEventually()",
        "sets a flag indicating that changes have been made to the draft message since the last save."
      ],
      [
        "onClick(android.view.View)",
        "handles clicks on the \"identity\" view and opens a dialog to choose an identity."
      ],
      [
        "onPrepareOptionsMenu(android.view.Menu)",
        "calls the `onPrepareOptionsMenu()` method of the `recipientPresenter` object and returns `true`."
      ],
      [
        "onAttachmentRemoved()",
        "sets a flag indicating that changes have been made to the message since it was last saved, when an attachment is removed in the message compose activity."
      ],
      [
        "onCreate(android.os.Bundle)",
        "creates and initializes the MessageCompose activity."
      ],
      [
        "onProgressCancel(com.fsck.k9.fragment.ProgressDialogFragment)",
        "calls a method in the `attachmentPresenter` object when a progress dialog is cancelled in the message compose activity."
      ],
      [
        "onOpenPgpClickDisable()",
        "calls the `onCryptoPgpClickDisable()` method of the `recipientPresenter` object to disable OpenPGP encryption for the current message compose activity."
      ],
      [
        "performSendAfterChecks()",
        "creates a message builder and sends the message asynchronously if the builder is not null."
      ],
      [
        "onAttachmentAdded()",
        "sets a boolean flag indicating that changes have been made since the last save when an attachment is added to a message being composed."
      ],
      [
        "onRetainNonConfigurationInstance()",
        "saves the current message builder object for possible use across configuration changes, while detaching its callback if it is not null before returning it."
      ],
      [
        "loadLocalMessageForDisplay(com.fsck.k9.mailstore.MessageViewInfo,com.fsck.k9.activity.MessageCompose$Action)",
        "loads a local email message and populates the UI with quoted text and updates the message format for replying or forwarding actions in the MessageCompose activity, while checking if the source message has already been processed."
      ],
      [
        "onFocusChange(android.view.View,boolean)",
        "listens for changes in focus on two specific fields in a message compose activity and calls a method on the recipient presenter if the focus is switched to another non-recipient field."
      ],
      [
        "updateMessageFormat()",
        "updates the format of the message being composed based on various conditions."
      ],
      [
        "onCreateOptionsMenu(android.view.Menu)",
        "creates the options menu for composing a message and disables the save option if there is no drafts folder set for the account."
      ],
      [
        "onOpenPgpSignOnlyChange(boolean)",
        "calls the `onCryptoPgpSignOnlyDisabled()` method of the `recipientPresenter` object when the state of the OpenPGP sign-only option is changed in the message composer."
      ],
      [
        "onMessageBuildSuccess(com.fsck.k9.mail.internet.MimeMessage,boolean)",
        "sends or saves a composed message depending on whether it's a draft or not and finishes the activity afterwards."
      ],
      [
        "onDestroy()",
        "calls the `onActivityDestroy()` method of the `recipientPresenter` object if it is not null, after calling the `onDestroy()` method of the superclass."
      ],
      [
        "launchUserInteractionPendingIntent(android.app.PendingIntent,int)",
        "launches a PendingIntent for user interaction and adds a mask for recipient presenter request code."
      ],
      [
        "onCreateDialog(int)",
        "creates dialog boxes for different message composition actions in the K-9 email client."
      ],
      [
        "onPause()",
        "removes a messaging listener and checks if the current activity is pausing due to a configuration change or if a message is currently being built, and saves the draft if none of these conditions are met."
      ],
      [
        "onMessageBuildException(com.fsck.k9.mail.MessagingException)",
        "handles any exceptions that occur while building or sending a message and displays an error message with the reason for the failure."
      ],
      [
        "onBackPressed()",
        "overrides the default behavior of the back button and prepares the activity to finish without saving changes made to the message being composed."
      ],
      [
        "loadQuotedTextForEdit()",
        "loads the quoted text of a referenced message for editing in a message composing activity."
      ],
      [
        "onProgressCancel(com.fsck.k9.fragment.AttachmentDownloadDialogFragment)",
        "calls a method to cancel the attachment download progress dialog."
      ],
      [
        "onMessageBuildReturnPendingIntent(android.app.PendingIntent,int)",
        "starts a pending intent with a modified request code for message building."
      ],
      [
        "onOpenPgpInlineChange(boolean)",
        "calls a method in the recipient presenter class to update the state of PGP inline encryption."
      ]
    ],
    "class com.fsck.k9.activity.MessageInfoHolder": [
      [
        "equals(java.lang.Object)",
        "checks if the given object is an instance of `MessageInfoHolder` class and whether its message attribute is equal to the message attribute of the current object."
      ],
      [
        "hashCode()",
        "returns the hash code of the `uid` field of the `MessageInfoHolder` class."
      ]
    ],
    "class com.fsck.k9.activity.Search": [
      [
        "onStop()",
        "sets the active state of the `Search` activity to false when the activity is stopped."
      ],
      [
        "onStart()",
        "sets the active state of the `Search` activity to true when the activity starts, and then calls the `onStart()` method of its superclass."
      ],
      [
        "isActive()",
        "returns whether the `isActive` variable of the `com.fsck.k9.activity.Search` class is true or false."
      ],
      [
        "setActive(boolean)",
        "sets the value of a static boolean variable `isActive` in the `Search` class to the specified value."
      ]
    ],
    "interface com.fsck.k9.activity.ColorPickerDialog$OnColorChangedListener": [
      [
        "colorChanged(int)",
        "is called when the user selects a color in the dialog and provides the ARGB value of the selected color."
      ]
    ],
    "abstract class com.fsck.k9.activity.K9PreferenceActivity": [
      [
        "onCreate(android.os.Bundle)",
        "sets the language and theme for a K9 email client preference activity and calls the superclass's `onCreate` method."
      ]
    ],
    "class com.fsck.k9.activity.MessageList$StorageListenerImplementation": [
      [
        "onUnmount(java.lang.String)",
        "checks if the account's local storage provider ID matches the unmounted provider ID, and if so, it runs `onAccountUnavailable()` method on the UI thread."
      ],
      [
        "onMount(java.lang.String)",
        "does nothing when a storage provider is mounted."
      ]
    ],
    "abstract class com.fsck.k9.activity.K9Activity": [
      [
        "dispatchTouchEvent(android.view.MotionEvent)",
        "dispatches touch events to the base activity and returns the superclass method's result."
      ],
      [
        "setupGestureDetector(com.fsck.k9.activity.misc.SwipeGestureDetector$OnSwipeGestureListener)",
        "sets up a swipe gesture detector for the K9 email client activity."
      ],
      [
        "onCreate(android.os.Bundle)",
        "initializes the `mBase` variable of the `K9Activity` class and calls `onCreate` method of its superclass with the `savedInstanceState` parameter."
      ]
    ],
    "class com.fsck.k9.activity.K9ActivityCommon": [
      [
        "getThemeBackgroundColor()",
        "gets the background color of the theme used for the activity."
      ],
      [
        "newInstance(android.app.Activity)",
        "creates a new instance of the K9ActivityCommon class bound to a specified Android Activity."
      ],
      [
        "setupGestureDetector(com.fsck.k9.activity.misc.SwipeGestureDetector$OnSwipeGestureListener)",
        "sets up a swipe gesture detector with a provided listener."
      ],
      [
        "preDispatchTouchEvent(android.view.MotionEvent)",
        "calls the `onTouchEvent` method of an instance of `GestureDetector` if it exists before passing on the `MotionEvent` to the parent class for handling."
      ],
      [
        "setLanguage(android.content.Context,java.lang.String)",
        "changes the current language displayed in the app by setting the configuration locale to the chosen language."
      ]
    ],
    "abstract class com.fsck.k9.activity.AccountList": [
      [
        "onResume()",
        "reloads the list of accounts when the `AccountList` activity is resumed."
      ],
      [
        "onItemClick(android.widget.AdapterView,android.view.View,int,long)",
        "selects a specific email account from a list based on the item's position and passes it to the `onAccountSelected()` method."
      ],
      [
        "populateListView(java.util.List)",
        "creates a list of accounts to display, including special accounts, and assigns it to a new `AccountsAdapter` instance which is then set as the adapter of a `ListView`."
      ],
      [
        "onCreate(android.os.Bundle)",
        "initializes the activity upon creation by setting the content view, initializing the ListView, and setting the result as canceled."
      ]
    ],
    "class com.fsck.k9.activity.LauncherShortcuts": [
      [
        "onCreate(android.os.Bundle)",
        "checks if the intent action is to create a shortcut, and if that is not the case, it finishes the activity immediately."
      ]
    ],
    "class com.fsck.k9.activity.Accounts$PasswordPromptDialog": [
      [
        "onTextChanged(java.lang.CharSequence,int,int,int)",
        "does nothing and is not used in the code."
      ],
      [
        "afterTextChanged(android.text.Editable)",
        "enables or disables the \"OK\" button in a password prompt dialog based on whether the user has specified all necessary passwords."
      ],
      [
        "restore(android.app.Activity)",
        "shows the password prompt dialog for email account authentication in some Android app activity."
      ],
      [
        "show(com.fsck.k9.activity.Accounts)",
        "shows a password prompt dialog for a K-9 email client account in the specified activity."
      ],
      [
        "retain()",
        "retains entered passwords and checkbox state, dismisses a dialog and clears all references to UI objects."
      ],
      [
        "beforeTextChanged(java.lang.CharSequence,int,int,int)",
        "does nothing and is not used."
      ]
    ],
    "class com.fsck.k9.activity.Accounts$AccountClickListener": [
      [
        "onClick(android.view.View)",
        "displays search results in the message list for a specific account in an email app."
      ]
    ],
    "class com.fsck.k9.activity.ColorPickerDialog": [
      [
        "setColor(int)",
        "sets the color that the color picker should highlight as the selected color by ignoring the alpha channel of the given RGB color value."
      ]
    ],
    "class com.fsck.k9.activity.ChooseFolder": [
      [
        "onOptionsItemSelected(android.view.MenuItem)",
        "handles user selections from a menu and sets the display mode or refreshes the folder list accordingly."
      ],
      [
        "onCreateOptionsMenu(android.view.Menu)",
        "creates an options menu for the ChooseFolder activity with a folder search function."
      ],
      [
        "onCreate(android.os.Bundle)",
        "creates and initializes the activity when it is launched, setting up the UI and handling any data passed in through the intent."
      ]
    ],
    "class com.fsck.k9.activity.EditIdentity": [
      [
        "onCreate(android.os.Bundle)",
        "creates and initializes the UI and fields for editing the identity settings of a K9 email account."
      ],
      [
        "onSaveInstanceState(android.os.Bundle)",
        "saves the `mIdentity` object as a serializable item in the `outState` bundle for later use in the `EditIdentity` activity."
      ],
      [
        "onBackPressed()",
        "saves the changes made to an identity and calls the superclass method for handling the standard back button behavior."
      ]
    ],
    "enum com.fsck.k9.activity.MessageCompose$Action": [
      [
        "getTitleResource()",
        "returns the resource ID of the title for a specific action in the MessageCompose class."
      ]
    ],
    "class com.fsck.k9.activity.UnreadWidgetConfiguration": [
      [
        "onActivityResult(int,int,android.content.Intent)",
        "handles the result of an activity launched for choosing an email account or folder in the K-9 Mail app widget configuration, with the specific handling based on the request code passed to the method."
      ],
      [
        "getWidgetProperties(android.content.Context,int)",
        "returns an instance of `UnreadWidgetProperties` based on a given `Context` and `appWidgetId`."
      ],
      [
        "deleteWidgetConfiguration(android.content.Context,int)",
        "removes a widget's configuration data from the shared preferences of the app."
      ],
      [
        "onOptionsItemSelected(android.view.MenuItem)",
        "handles the selection of a menu item and either updates a widget and exits or calls the superclass implementation."
      ],
      [
        "onCreate(android.os.Bundle)",
        "creates the user interface for the unread widget configuration and sets up preference click listeners."
      ],
      [
        "onCreateOptionsMenu(android.view.Menu)",
        "creates a menu for the unread widget configuration activity."
      ]
    ],
    "class com.fsck.k9.activity.EmailAddressList": [
      [
        "onItemClick(android.widget.AdapterView,android.view.View,int,long)",
        "displays a toast message showing the selected email address and sends the selected email address back to the calling activity."
      ],
      [
        "onCreate(android.os.Bundle)",
        "sets up an email address list activity by creating a contact item, setting the layout, creating an adapter for the list view, and setting the activity title."
      ]
    ],
    "class com.fsck.k9.activity.K9PreferenceActivity$PreferenceChangeListener": [
      [
        "onPreferenceChange(android.preference.Preference,java.lang.Object)",
        "updates the summary and value of a preference based on the new value selected by the user."
      ]
    ],
    "class com.fsck.k9.activity.Accounts$AccountsAdapter": [
      [
        "getView(int,android.view.View,android.view.ViewGroup)",
        "gets the view object for an account in the accounts list and sets its content based on the account's information."
      ]
    ],
    "class com.fsck.k9.activity.AccountList$AccountsAdapter": [
      [
        "getView(int,android.view.View,android.view.ViewGroup)",
        "creates and configures a view for showing an email account in a list."
      ]
    ],
    "class com.fsck.k9.activity.FolderList$FolderClickListener": [
      [
        "onClick(android.view.View)",
        "opens the search result for the clicked folder in the K-9 email client's message list activity."
      ]
    ],
    "class com.fsck.k9.activity.Accounts": [
      [
        "onItemLongClick(android.widget.AdapterView,android.view.View,int,long)",
        "handles a long click event on an item in an AdapterView and returns true."
      ],
      [
        "onPrepareDialog(int,android.app.Dialog)",
        "prepares the dialogs for removal, clearing or recreation of an email account by setting appropriate instructions messages based on the selected context account."
      ],
      [
        "onExport(boolean,com.fsck.k9.Account)",
        "allows the user to export account settings and global settings of a specified account in an email application."
      ],
      [
        "onCreateDialog(int)",
        "creates different types of dialogs depending on the value of the id parameter."
      ],
      [
        "onCreate(android.os.Bundle)",
        "creates and initializes the Accounts activity, including loading and displaying accounts, and handling various intent actions."
      ],
      [
        "listAccounts(android.content.Context)",
        "opens the K-9 email client's account list activity."
      ],
      [
        "onResume()",
        "refreshes the account data and adds listeners to the messaging and storage controllers."
      ],
      [
        "onCreateContextMenu(android.view.ContextMenu,android.view.View,android.view.ContextMenu.ContextMenuInfo)",
        "creates a context menu for managing email accounts in the K9 Mail app, with options to move accounts up or down, enable/disable accounts, and hide options for search accounts."
      ],
      [
        "onItemClick(android.widget.AdapterView,android.view.View,int,long)",
        "opens an email account when an item in the account list is clicked."
      ],
      [
        "onCreateOptionsMenu(android.view.Menu)",
        "creates an options menu for the Accounts activity, inflates it from a XML resource, sets the refresh menu item, and returns true."
      ],
      [
        "onPause()",
        "pauses the Accounts activity and removes the listener from the messaging controller and storage manager."
      ],
      [
        "importSettings(android.content.Context)",
        "imports the settings for a K9 mail account from an external source in the Android app."
      ],
      [
        "setProgress(boolean)",
        "sets the progress status of a handler in the Accounts Java class."
      ],
      [
        "onContextItemSelected(android.view.MenuItem)",
        "handles context menu item selections for accounts in the K-9 Mail app."
      ],
      [
        "onExport(android.content.Intent)",
        "starts the process of exporting global settings and account UUIDs to a specified documents URI."
      ],
      [
        "onRetainNonConfigurationInstance()",
        "saves a reference to a currently displayed dialog or a running AsyncTask."
      ],
      [
        "createUnreadSearch(android.content.Context,com.fsck.k9.BaseAccount)",
        "creates a search for unread messages in a specified email account."
      ],
      [
        "onSaveInstanceState(android.os.Bundle)",
        "saves the state of the `Accounts` activity in an `outState` bundle, including selected account UUID, unread message count, account statistics, export settings, and account UUIDs to export."
      ],
      [
        "onOptionsItemSelected(android.view.MenuItem)",
        "handles the selection of items from the Options Menu in the Accounts activity of the K-9 email client and performs corresponding actions based on the selected item."
      ]
    ],
    "class com.fsck.k9.activity.MessageLoaderHelper": [
      [
        "asyncRestartMessageCryptoProcessing()",
        "restarts crypto processing for a message in K-9 Mail application."
      ],
      [
        "onDestroyChangingConfigurations()",
        "cancels callbacks and releases resources for loading messages to prepare for a new instance of the class."
      ],
      [
        "onDestroy()",
        "cancels all loading processes, prevents future callbacks, and destroys all loading state."
      ],
      [
        "asyncStartOrResumeLoadingMessage(com.fsck.k9.activity.MessageReference,android.os.Parcelable)",
        "starts or resumes loading a message asynchronously, with the option to use cached decryption result."
      ],
      [
        "asyncReloadMessage()",
        "starts or resumes loading local email messages asynchronously on the UI thread."
      ],
      [
        "downloadCompleteMessage()",
        "starts downloading the complete message body on the UI thread."
      ],
      [
        "onActivityResult(int,int,android.content.Intent)",
        "handles the result of an activity launched by the `messageCryptoHelper`."
      ]
    ],
    "class com.fsck.k9.activity.ConfirmationDialog": [
      [
        "create(android.app.Activity,int,int,java.lang.String,int,int,java.lang.Runnable)",
        "creates a customized confirmation dialog with specified parameters and an action to perform on confirm button press."
      ],
      [
        "create(android.app.Activity,int,int,java.lang.String,int,int,java.lang.Runnable,java.lang.Runnable)",
        "creates a customized confirmation dialog for an Android app with various fields, such as title, message, confirm and cancel buttons, and actions to be performed when these buttons are clicked."
      ],
      [
        "create(android.app.Activity,int,int,int,int,int,java.lang.Runnable)",
        "creates a customized confirmation dialog with specific text and actions to perform when the user confirms or cancels the action."
      ]
    ],
    "interface com.fsck.k9.activity.AlternateRecipientAdapter$AlternateRecipientListener": [
      [
        "onRecipientChange(com.fsck.k9.view.RecipientSelectView$Recipient,com.fsck.k9.view.RecipientSelectView$Recipient)",
        "triggers an event when the currently selected recipient in a recipient select view is changed to an alternate recipient."
      ],
      [
        "onRecipientRemove(com.fsck.k9.view.RecipientSelectView$Recipient)",
        "listens for the removal of an alternate recipient in the AlternateRecipientAdapter and performs an action with the removed recipient's data."
      ]
    ],
    "class com.fsck.k9.activity.FolderList$FolderListHandler": [
      [
        "accountSizeChanged(long,long)",
        "displays a toast notification with information about a change in the size of an email account."
      ],
      [
        "workingAccount(int)",
        "displays a short message to the user about the currently active email account."
      ],
      [
        "progress(boolean)",
        "shows or hides a loading spinner in the action bar of the FolderList activity based on the boolean argument passed to it."
      ],
      [
        "dataChanged()",
        "updates the UI with any changes made to the data in the FolderList activity."
      ],
      [
        "newFolders(java.util.List)",
        "updates the list of folders displayed in the UI with a new set of folders."
      ],
      [
        "folderLoading(java.lang.String,boolean)",
        "changes the \"loading\" status of a folder in the UI of the K9 email client."
      ],
      [
        "refreshTitle()",
        "refreshes the title and subtitle of the folder list activity with information about the number of unread messages and the current operation."
      ]
    ],
    "abstract class com.fsck.k9.activity.K9ListActivity": [
      [
        "setupGestureDetector(com.fsck.k9.activity.misc.SwipeGestureDetector$OnSwipeGestureListener)",
        "sets up a swipe gesture detector listener for the K9ListActivity."
      ],
      [
        "onCreate(android.os.Bundle)",
        "sets up the common activity data and then calls the superclass's onCreate method."
      ],
      [
        "onResume()",
        "overrides the `onResume()` method of the parent class `Activity` and calls the parent `onResume()` method."
      ],
      [
        "onKeyUp(int,android.view.KeyEvent)",
        "swallows volume key events to avoid audible notification and returns `true`, otherwise it calls the super method `onKeyUp` and returns its result."
      ],
      [
        "onKeyDown(int,android.view.KeyEvent)",
        "allows for list navigation using volume keys and returns true if volume keys are used, otherwise it calls the super method."
      ],
      [
        "dispatchTouchEvent(android.view.MotionEvent)",
        "overrides the `dispatchTouchEvent` method of the superclass `android.app.Activity` in order to pre-dispatch touch events and then delegates the event handling to the superclass implementation."
      ]
    ],
    "class com.fsck.k9.activity.ChooseFolder$ChooseFolderHandler": [
      [
        "handleMessage(android.os.Message)",
        "handles messages sent to the ChooseFolderHandler class, specifically controlling the progress bar and selecting folders for the folder chooser activity."
      ],
      [
        "progress(boolean)",
        "sends a progress message with a boolean value to the message queue."
      ],
      [
        "setSelectedFolder(int)",
        "sets the selected folder by creating and sending a message with the folder position as an argument."
      ]
    ],
    "class com.fsck.k9.activity.ActivityListener": [
      [
        "searchStats(com.fsck.k9.AccountStats)",
        "informs the user of the search status of a specified email account in the K9 email application."
      ],
      [
        "synchronizeMailboxFailed(com.fsck.k9.Account,java.lang.String,java.lang.String)",
        "handles failed synchronization of a mailbox for a K-9 email application account and informs the user of the status."
      ],
      [
        "synchronizeMailboxStarted(com.fsck.k9.Account,java.lang.String)",
        "updates the activity listener with the status of a mailbox synchronization process started for a particular email account and folder."
      ],
      [
        "sendPendingMessagesCompleted(com.fsck.k9.Account)",
        "resets the sendingAccountDescription variable and informs the user of the status of sending pending messages for a specified account."
      ],
      [
        "pendingCommandStarted(com.fsck.k9.Account,java.lang.String)",
        "sets the current processing command title for a given account and informs the user of the status."
      ],
      [
        "sendPendingMessagesFailed(com.fsck.k9.Account)",
        "resets the currently sending account description and informs the user of the status of sending pending messages in case of failure."
      ],
      [
        "getFolderTotal()",
        "returns the total number of folders for the email account being monitored, while ensuring thread safety by using synchronization."
      ],
      [
        "pendingCommandCompleted(com.fsck.k9.Account,java.lang.String)",
        "sets the processingCommandTitle of the account to null and informs the user of the status of the command completion."
      ],
      [
        "pendingCommandsProcessing(com.fsck.k9.Account)",
        "updates the account description and sets the number of completed and total folders, and then informs the user of the current status."
      ],
      [
        "getFolderCompleted()",
        "returns the number of completed tasks in the folder as an integer value, while being thread-safe."
      ],
      [
        "synchronizeMailboxHeadersProgress(com.fsck.k9.Account,java.lang.String,int,int)",
        "updates the progress of synchronizing mailbox headers for a specific folder in an email account and informs the user of the current status."
      ],
      [
        "synchronizeMailboxHeadersFinished(com.fsck.k9.Account,java.lang.String,int,int)",
        "resets the loadingHeaderFolderName, folderCompleted, and folderTotal variables to null and zero respectively and informs the user of the synchronization mailbox headers status."
      ],
      [
        "folderStatusChanged(com.fsck.k9.Account,java.lang.String,int)",
        "informs the user about the status of a folder in an email account, specifically the unread message count."
      ],
      [
        "synchronizeMailboxFinished(com.fsck.k9.Account,java.lang.String,int,int)",
        "updates the user interface after finishing synchronizing a mailbox for a specific email account."
      ],
      [
        "synchronizeMailboxHeadersStarted(com.fsck.k9.Account,java.lang.String)",
        "updates the loading status of the mailbox headers synchronization process for a specific account and folder and informs the user of the updated status."
      ],
      [
        "systemStatusChanged()",
        "informs the user of the current system status."
      ],
      [
        "onPause(android.content.Context)",
        "unregisters a tick receiver when the activity is paused."
      ],
      [
        "sendPendingMessagesStarted(com.fsck.k9.Account)",
        "updates the sendingAccountDescription variable and informs the user of the status of pending messages being sent for a specific account."
      ],
      [
        "informUserOfStatus()",
        "doesn't do anything as it is an empty method."
      ],
      [
        "synchronizeMailboxProgress(com.fsck.k9.Account,java.lang.String,int,int)",
        "updates the progress of synchronizing a mailbox for a specific account and folder, and notifies the user of the current status."
      ],
      [
        "getOperation(android.content.Context)",
        "returns the current operation status of the email app based on various conditions and states."
      ],
      [
        "onResume(android.content.Context)",
        "registers a tickReceiver to receive time tick broadcasts when the activity is resumed."
      ],
      [
        "pendingCommandsFinished(com.fsck.k9.Account)",
        "informs the user of the status of pending commands for a specified account."
      ]
    ],
    "class com.fsck.k9.activity.NotificationDeleteConfirmation": [
      [
        "onPrepareDialog(int,android.app.Dialog)",
        "prepares the contents of a dialog box used to confirm deletion of one or more email messages in an email client app."
      ],
      [
        "onCreateDialog(int)",
        "creates a dialog box for confirming the deletion of a notification."
      ],
      [
        "getIntent(android.content.Context,java.util.List)",
        "returns an `Intent` object with extras to open a `NotificationDeleteConfirmation` activity for a list of `MessageReference` objects."
      ],
      [
        "getIntent(android.content.Context,com.fsck.k9.activity.MessageReference)",
        "returns an intent for a notification delete confirmation screen with a single message reference."
      ],
      [
        "onCreate(android.os.Bundle)",
        "sets the theme, extracts extras, and shows a confirmation dialog for deleting a notification in the K9 email application."
      ]
    ],
    "class com.fsck.k9.activity.ChooseIdentity": [
      [
        "onCreate(android.os.Bundle)",
        "initializes the layout and adapter for the ChooseIdentity activity in the K9 email client."
      ],
      [
        "onResume()",
        "calls the `refreshView()` method when the `ChooseIdentity` activity is resumed."
      ]
    ],
    "class com.fsck.k9.activity.UpgradeDatabases": [
      [
        "onCreate(android.os.Bundle)",
        "checks if the databases have already been upgraded and launches the original activity if they have, otherwise it initializes the layout and sets up a broadcast receiver."
      ],
      [
        "actionUpgradeDatabases(android.content.Context,android.content.Intent)",
        "checks if the account databases need upgrading, and if so, starts the UpgradeDatabases activity and returns true. Otherwise, it returns false."
      ],
      [
        "onResume()",
        "checks if the databases are up to date and if not, registers a broadcast receiver and starts a service to upgrade the databases."
      ],
      [
        "onPause()",
        "unregisters a broadcast receiver when the activity is being paused."
      ]
    ],
    "class com.fsck.k9.activity.Accounts$ImportSelectionDialog": [
      [
        "restore(android.app.Activity)",
        "restores and shows the import selection dialog in the K-9 email client when called from an activity."
      ],
      [
        "show(com.fsck.k9.activity.Accounts)",
        "calls the `show` method of the `Accounts$ImportSelectionDialog` class with a single parameter (`activity`) and a default value of `null` for the second parameter."
      ],
      [
        "show(com.fsck.k9.activity.Accounts,android.util.SparseBooleanArray)",
        "shows a dialog box to allow the user to select which settings and accounts they want to import."
      ],
      [
        "retain()",
        "saves the selection state of each list item, dismisses the dialog, and sets the dialog reference to null."
      ]
    ],
    "class com.fsck.k9.activity.AlternateRecipientAdapter": [
      [
        "getItemId(int)",
        "returns the ID of the item at the specified position in the adapter, which in this case is the same as the position itself."
      ],
      [
        "getCount()",
        "returns the count of alternate recipients in the adapter, including a fixed number of list items."
      ],
      [
        "bindItemView(android.view.View,com.fsck.k9.view.RecipientSelectView$Recipient)",
        "binds data to a recipient view and configures its layout and crypto status view accordingly."
      ],
      [
        "setCurrentRecipient(com.fsck.k9.view.RecipientSelectView$Recipient)",
        "sets the current recipient for the `AlternateRecipientAdapter` object."
      ],
      [
        "getItem(int)",
        "returns a recipient object at a specified position in the adapter, or null if the list of recipients is empty."
      ],
      [
        "bindHeaderView(android.view.View,com.fsck.k9.view.RecipientSelectView$Recipient)",
        "binds a header view for a recipient in a recipient selection view in an email app."
      ],
      [
        "isEnabled(int)",
        "enables all items in the `AlternateRecipientAdapter` except for the header view."
      ],
      [
        "setShowAdvancedInfo(boolean)",
        "sets the value of a boolean variable called \"showAdvancedInfo\" in the \"AlternateRecipientAdapter\" class."
      ],
      [
        "getView(int,android.view.View,android.view.ViewGroup)",
        "returns a view for the recipient selection in the parent view group, adjusting the view if it is null and binding either a header or item view depending on the position."
      ],
      [
        "setAlternateRecipientInfo(java.util.List)",
        "updates the list of alternate recipients and notifies the adapter of the change."
      ],
      [
        "newView(android.view.ViewGroup)",
        "creates a new view for displaying alternate recipient options."
      ]
    ],
    "interface com.fsck.k9.activity.MessageLoaderHelper$MessageLoaderCallbacks": [
      [
        "onDownloadErrorNetworkError()",
        "handles errors that occur during the downloading of a message due to network issues."
      ],
      [
        "onMessageDataLoadFinished(com.fsck.k9.mailstore.LocalMessage)",
        "handles the completion of loading data for a local email message in the K9 email application."
      ],
      [
        "onMessageDataLoadFailed()",
        "handles the failure of loading message data."
      ],
      [
        "onMessageViewInfoLoadFailed(com.fsck.k9.mailstore.MessageViewInfo)",
        "handles the case when loading the information about a message view fails."
      ],
      [
        "startIntentSenderForMessageLoaderHelper(android.content.IntentSender,int,android.content.Intent,int,int,int)",
        "starts an intent sender for a message loader helper with specific parameters and flags."
      ],
      [
        "onDownloadErrorMessageNotFound()",
        "triggers a callback when a download error message is not found."
      ],
      [
        "onMessageViewInfoLoadFinished(com.fsck.k9.mailstore.MessageViewInfo)",
        "handles the completion of loading a message's view info in the K9 email client."
      ],
      [
        "setLoadingProgress(int,int)",
        "sets the loading progress for a message loader with the current and maximum progress values."
      ]
    ],
    "interface com.fsck.k9.activity.K9ActivityCommon$K9ActivityMagic": [
      [
        "setupGestureDetector(com.fsck.k9.activity.misc.SwipeGestureDetector$OnSwipeGestureListener)",
        "sets up a gesture detector with a specified listener for detecting swipe gestures in the activity."
      ]
    ],
    "class com.fsck.k9.activity.UpgradeDatabases$UpgradeDatabaseBroadcastReceiver": [
      [
        "onReceive(android.content.Context,android.content.Intent)",
        "handles upgrade progress and completion for a database upgrade service in the K-9 email client."
      ]
    ],
    "class com.fsck.k9.activity.AlternateRecipientAdapter$RecipientTokenHolder": [
      [
        "setShowAsHeader(boolean)",
        "sets the visibility of the header and item layouts based on a boolean value."
      ]
    ],
    "class com.fsck.k9.activity.FolderList": [
      [
        "onOptionsItemSelected(android.view.MenuItem)",
        "handles menu item selections for the FolderList activity in the K9 email client."
      ],
      [
        "onCreateOptionsMenu(android.view.Menu)",
        "creates and inflates a menu for the FolderList activity, and sets a specific item (check_mail) as the refreshMenuItem."
      ],
      [
        "onKeyDown(int,android.view.KeyEvent)",
        "handles key events for the `FolderList` activity, including shortcuts and display mode changes."
      ],
      [
        "onNewIntent(android.content.Intent)",
        "handles the initialization of the folder list activity when a new intent is received."
      ],
      [
        "onResume()",
        "refreshes the folder list and messages for any open folder, updates message statuses and counts, and adds a listener for account stats in the background when the activity is resumed."
      ],
      [
        "onCreateContextMenu(android.view.ContextMenu,android.view.View,android.view.ContextMenu.ContextMenuInfo)",
        "creates a context menu for a folder list in an Android application with a header title and options based on the folder context."
      ],
      [
        "onCreate(android.os.Bundle)",
        "initializes the FolderList view for the K9 email app, including setting up the action bar, list view, and context menu, and displays a changelog dialog if it's the first app launch."
      ],
      [
        "onSearchRequested()",
        "opens the search bar and initializes a search for emails within a specific account in the K-9 email application."
      ],
      [
        "actionHandleAccountIntent(android.content.Context,com.fsck.k9.Account,boolean)",
        "creates an intent to handle an account action with a given context, account and shortcut status."
      ],
      [
        "onContextItemSelected(android.view.MenuItem)",
        "handles the selection of an item in a context menu for a folder list, performing actions based on the selected item's ID."
      ],
      [
        "onRetainNonConfigurationInstance()",
        "retains the list of folders in the adapter of the FolderList activity during configuration changes."
      ],
      [
        "actionHandleAccount(android.content.Context,com.fsck.k9.Account)",
        "opens the folder list for a specific email account in the K-9 Mail app."
      ],
      [
        "onPause()",
        "removes a listener from the messaging controller and calls a listener method for a folder list adapter when the activity is paused."
      ]
    ],
    "class com.fsck.k9.activity.Accounts$SimpleDialog": [
      [
        "restore(android.app.Activity)",
        "overrides the `restore` method from a superclass and calls the `show` method with a casted `activity` parameter."
      ],
      [
        "retain()",
        "checks if the dialog is not null, dismisses it and sets it to null, and returns true if successful."
      ],
      [
        "show(com.fsck.k9.activity.Accounts)",
        "displays an AlertDialog with a message and an \"Ok\" button, and calls the okayAction method when the button is clicked."
      ]
    ],
    "class com.fsck.k9.activity.MessageReferenceHelper": [
      [
        "toMessageReferenceList(java.util.List)",
        "takes a list of message reference strings, parses each string into a MessageReference object, adds it to a new list, and returns the new list."
      ],
      [
        "toMessageReferenceStringList(java.util.List)",
        "takes a list of `MessageReference` objects and converts them into a list of string representations of their identities."
      ]
    ],
    "class com.fsck.k9.activity.MessageReference": [
      [
        "toIdentityString()",
        "returns an identity string for a message reference object."
      ],
      [
        "withModifiedUid(java.lang.String)",
        "returns a new instance of the MessageReference class with a modified UID value."
      ],
      [
        "equals(java.lang.String,java.lang.String,java.lang.String)",
        "checks if the account UUID, folder name, and unique identifier of a message reference match the given parameters."
      ],
      [
        "equals(java.lang.Object)",
        "checks if the passed object is equal to the current MessageReference by comparing the account UUID, folder name, and UID fields."
      ],
      [
        "hashCode()",
        "calculates and returns a hash code value based on the account UUID, folder name, and UID of a message reference."
      ],
      [
        "withModifiedFlag(com.fsck.k9.mail.Flag)",
        "creates a new instance of MessageReference with a modified mail flag."
      ],
      [
        "getAccountUuid()",
        "returns the UUID of the account associated with a message reference object."
      ],
      [
        "getUid()",
        "returns the value of the `uid` attribute of an instance of the `MessageReference` class."
      ],
      [
        "parse(java.lang.String)",
        "parses a String representation of a MessageReference object and returns a corresponding MessageReference object."
      ],
      [
        "getFlag()",
        "returns the flag of a message reference in the K9 email application."
      ],
      [
        "toString()",
        "returns a string representation of a MessageReference object with its account UUID, folder name, message UID, and flag."
      ],
      [
        "getFolderName()",
        "returns the name of the folder associated with a message reference object."
      ]
    ],
    "class com.fsck.k9.activity.ManageIdentities": [
      [
        "onContextItemSelected(android.view.MenuItem)",
        "handles the user's selection of a context menu item for managing identities."
      ],
      [
        "onResume()",
        "calls the inherited `onResume()` method and then updates the view for managing identities."
      ],
      [
        "onCreateOptionsMenu(android.view.Menu)",
        "creates the options menu for managing identities in the K9 Mail app."
      ],
      [
        "onCreateContextMenu(android.view.ContextMenu,android.view.View,android.view.ContextMenu.ContextMenuInfo)",
        "creates a context menu with a header title and options for managing email identities."
      ],
      [
        "onOptionsItemSelected(android.view.MenuItem)",
        "handles clicks on the options menu items in the ManageIdentities activity, specifically creating a new identity or passing the MenuItem to a superclass method for all other options."
      ],
      [
        "onBackPressed()",
        "saves the identities and then calls the `onBackPressed()` method of the parent class."
      ]
    ],
    "class com.fsck.k9.activity.FolderList$FolderListAdapter$FolderListFilter": [
      [
        "getSearchTerm()",
        "returns the search term used in filtering the folder list."
      ]
    ],
    "class com.fsck.k9.activity.FolderListFilter": [
      [
        "invalidate()",
        "resets the original values of the FolderListFilter to null."
      ]
    ],
    "class com.fsck.k9.activity.MessageList": [
      [
        "shortcutIntent(android.content.Context,java.lang.String)",
        "creates a shortcut intent for a special folder in the K9 email application."
      ],
      [
        "startIntentSenderForResult(android.content.IntentSender,int,android.content.Intent,int,int,int)",
        "overrides the `startIntentSenderForResult` method and adds a `REQUEST_MASK_PENDING_INTENT` to the `requestCode` before calling the super method."
      ],
      [
        "onOptionsItemSelected(android.view.MenuItem)",
        "controls the behavior when a menu item is selected in the MessageList activity of a email client app."
      ],
      [
        "showNextMessageOrReturn()",
        "determines whether to show the next message, return to the message list, or show a placeholder view, depending on the display mode and user preferences."
      ],
      [
        "onForward(com.fsck.k9.activity.MessageReference)",
        "calls the `onForward` method with the specified `messageReference` and a `null` value for the `action` parameter."
      ],
      [
        "onCreate(android.os.Bundle)",
        "initializes and sets up the message list view, initializes the action bar, enables gesture detection, decodes extras, finds and initializes fragments, displays views, and displays a change log dialog if it is the user's first run."
      ],
      [
        "onCompose(com.fsck.k9.Account)",
        "opens the message compose screen for a specific email account in the K-9 Mail app."
      ],
      [
        "setMessageListTitle(java.lang.String)",
        "sets the title of the action bar in the MessageList activity."
      ],
      [
        "updateMenu()",
        "updates the options menu of the MessageList activity."
      ],
      [
        "onCustomKeyDown(int,android.view.KeyEvent)",
        "handles hotkeys for the message list and message view in the K9 email client."
      ],
      [
        "onResume()",
        "checks if the parent class is not an instance of com.fsck.k9.activity.Search, sets Search as inactive, checks if the mAccount is available, and adds a mStorageListener to the StorageManager instance."
      ],
      [
        "setUnreadCount(int)",
        "sets the unread count for the message list in the action bar of the app."
      ],
      [
        "onSwitchComplete(int)",
        "removes the message view fragment if the current displayed child is the first one."
      ],
      [
        "onForward(com.fsck.k9.activity.MessageReference,android.os.Parcelable)",
        "forwards a message with the given reference and decryption result."
      ],
      [
        "onKeyUp(int,android.view.KeyEvent)",
        "swallows volume up and down key events to avoid audible notification in the K9 email app's message list."
      ],
      [
        "onReply(com.fsck.k9.activity.MessageReference,android.os.Parcelable)",
        "calls the actionReply method to initiate a reply to a given message in the K-9 mail app."
      ],
      [
        "onRestoreInstanceState(android.os.Bundle)",
        "restores the state of the MessageList activity when it is recreated."
      ],
      [
        "openMessage(com.fsck.k9.activity.MessageReference)",
        "opens a message in the Message List activity of the K9 email client."
      ],
      [
        "remoteSearchStarted()",
        "removes the action button for remote search and configures the menu."
      ],
      [
        "startSearch(com.fsck.k9.Account,java.lang.String)",
        "starts a search for messages in a given account and folder, allowing for remote search in the case of a single folder search."
      ],
      [
        "actionDisplaySearch(android.content.Context,com.fsck.k9.search.SearchSpecification,boolean,boolean,boolean)",
        "starts an Activity to display search results in the context of the MessageList class."
      ],
      [
        "onReplyAll(com.fsck.k9.activity.MessageReference,android.os.Parcelable)",
        "triggers the \"Reply All\" action for a given message reference in the K-9 Email app."
      ],
      [
        "setProgress(boolean)",
        "shows or hides the progress bar in the message list activity of an email app depending on the boolean value passed as an argument."
      ],
      [
        "messageHeaderViewAvailable(com.fsck.k9.view.MessageHeader)",
        "sets the message header for the action bar within the MessageList activity in the K-9 email client."
      ],
      [
        "onPause()",
        "removes a storage listener when the MessageList activity is paused."
      ],
      [
        "onCreateOptionsMenu(android.view.Menu)",
        "inflates a menu layout for the `MessageList` activity and initializes menu item objects."
      ],
      [
        "onSwipeLeftToRight(android.view.MotionEvent,android.view.MotionEvent)",
        "handles a left to right swipe gesture on the MessageList activity and passes it to the MessageListFragment if the display mode is not set to MESSAGE_VIEW."
      ],
      [
        "setActionBarTitle(java.lang.String)",
        "sets the title of the action bar in the message list activity to the provided string."
      ],
      [
        "onSearchRequested()",
        "overrides the default behavior of the search button on the device to call a search method specific to the `mMessageListFragment` fragment."
      ],
      [
        "showMoreFromSameSender(java.lang.String)",
        "displays more messages from the same sender in the message list of a messaging application."
      ],
      [
        "onBackStackChanged()",
        "updates the fragments, message view, and menu display based on the back stack changes in the MessageList activity."
      ],
      [
        "onReply(com.fsck.k9.activity.MessageReference)",
        "calls the \"onReply\" method with a message reference and a null parameter."
      ],
      [
        "onBackPressed()",
        "checks if the message view is currently displayed and if so, it switches back to the message list; otherwise, it proceeds with the default action for the back button press."
      ],
      [
        "onPrepareOptionsMenu(android.view.Menu)",
        "prepares and configures the options menu for the MessageList activity."
      ],
      [
        "onResendMessage(com.fsck.k9.activity.MessageReference)",
        "resends a message by editing its draft version."
      ],
      [
        "setActionBarSubTitle(java.lang.String)",
        "sets the subtitle of the action bar in the message list activity."
      ],
      [
        "actionDisplaySearch(android.content.Context,com.fsck.k9.search.SearchSpecification,boolean,boolean)",
        "displays a search with options for threading and opening in a new task in the Android email application K-9."
      ],
      [
        "intentDisplaySearch(android.content.Context,com.fsck.k9.search.SearchSpecification,boolean,boolean,boolean)",
        "creates an intent that opens the message list with a specific search query, threading options, and task flags."
      ],
      [
        "enableActionBarProgress(boolean)",
        "enables or disables the progress bar in the action bar depending on whether the check mail button is visible and whether `enable` is true or false."
      ],
      [
        "actionDisplayMessageIntent(android.content.Context,com.fsck.k9.activity.MessageReference)",
        "creates an intent to display a message in the K-9 Mail app."
      ],
      [
        "setMessageListSubTitle(java.lang.String)",
        "sets the subtitle of the message list in the action bar."
      ],
      [
        "showThread(com.fsck.k9.Account,java.lang.String,long)",
        "displays a thread of messages for a given account and folder in the K-9 email application."
      ],
      [
        "dispatchKeyEvent(android.view.KeyEvent)",
        "overrides the dispatchKeyEvent method to handle key events in the MessageList activity."
      ],
      [
        "displayMessageSubject(java.lang.String)",
        "displays the subject of a message in either the message header or the action bar depending on the display mode."
      ],
      [
        "onSaveInstanceState(android.os.Bundle)",
        "saves the state of the MessageList activity into a Bundle, including the display mode, whether the message list was displayed, and the ID of the first back stack."
      ],
      [
        "setActionBarUnread(int)",
        "sets the visibility and text of a view that displays the number of unread messages in the message list activity's action bar."
      ],
      [
        "onReplyAll(com.fsck.k9.activity.MessageReference)",
        "calls the `onReplyAll()` method with a `messageReference` and a `null` value."
      ],
      [
        "onSwipeRightToLeft(android.view.MotionEvent,android.view.MotionEvent)",
        "handles swiping from right to left on the screen in the MessageList activity of the K-9 email client application."
      ],
      [
        "goBack()",
        "determines the appropriate action to take when the \"back\" button is pressed based on the current state of the message list view."
      ],
      [
        "setMessageListProgress(int)",
        "sets the progress of the message list."
      ],
      [
        "disableDeleteAction()",
        "disables the delete action in the menu of the MessageList activity."
      ],
      [
        "onNewIntent(android.content.Intent)",
        "handles a new intent received by the message list activity."
      ]
    ],
    "class com.fsck.k9.activity.FolderInfoHolder": [
      [
        "compareTo(com.fsck.k9.activity.FolderInfoHolder)",
        "compares the name of one `FolderInfoHolder` object with another and returns the result as an integer value."
      ],
      [
        "setMoreMessagesFromFolder(com.fsck.k9.mailstore.LocalFolder)",
        "sets a boolean value indicating if there are more messages in a given email folder in the Android application K-9 Mail."
      ],
      [
        "hashCode()",
        "calculates the hash code for the name of a folder in the email app K9."
      ],
      [
        "populate(android.content.Context,com.fsck.k9.mailstore.LocalFolder,com.fsck.k9.Account,int)",
        "populates the FolderInfoHolder object with information about a LocalFolder and an Account, with an additional unread message count, and then closes the folder."
      ],
      [
        "getDisplayName(android.content.Context,com.fsck.k9.Account,java.lang.String)",
        "returns the localized name for the provided folder if it's a special folder, or the original folder name if it's a non-special folder."
      ],
      [
        "populate(android.content.Context,com.fsck.k9.mailstore.LocalFolder,com.fsck.k9.Account)",
        "populates a FolderInfoHolder object with information about a specific local mailbox folder."
      ],
      [
        "equals(java.lang.Object)",
        "checks if the given object is an instance of `FolderInfoHolder` and if its `name` field is equal to the `name` field of this `FolderInfoHolder` instance."
      ]
    ]
  },
  "com.fsck.k9.activity.compose": {
    "interface com.fsck.k9.activity.compose.PgpEnabledErrorDialog$OnOpenPgpDisableListener": [
      [
        "onOpenPgpClickDisable()",
        "triggers an action when the user clicks to disable OpenPGP encryption in a compose email window."
      ]
    ],
    "class com.fsck.k9.activity.compose.RecipientLoader": [
      [
        "loadInBackground()",
        "loads recipient data from various sources and returns a list of recipients."
      ],
      [
        "deliverResult(java.util.List)",
        "caches and delivers a list of recipients to the recipient loader."
      ]
    ],
    "class com.fsck.k9.activity.compose.PgpInlineDialog": [
      [
        "newInstance(boolean,int)",
        "returns a new instance of the `PgpInlineDialog` class with specified arguments."
      ],
      [
        "onCreateDialog(android.os.Bundle)",
        "creates a dialog box with options for enabling or disabling PGP inline."
      ]
    ],
    "class com.fsck.k9.activity.compose.PgpSignOnlyDialog": [
      [
        "newInstance(boolean,int)",
        "creates a new instance of the PgpSignOnlyDialog class with boolean and integer arguments."
      ],
      [
        "onCreateDialog(android.os.Bundle)",
        "creates an AlertDialog for a PgpSignOnlyDialog that either allows the user to enable or disable OpenPGP message signing."
      ]
    ],
    "interface com.fsck.k9.activity.compose.AttachmentPresenter$AttachmentMvpView": [
      [
        "performSaveAfterChecks()",
        "triggers the save action after performing necessary checks in the AttachmentMvpView of the Compose activity in the K-9 email client."
      ],
      [
        "updateAttachmentView(com.fsck.k9.activity.misc.Attachment)",
        "updates the view for a specific attachment in the attachment presenter."
      ],
      [
        "performSendAfterChecks()",
        "performs a send operation after performing necessary checks but it has some issues that need to be addressed."
      ],
      [
        "showWaitingForAttachmentDialog(com.fsck.k9.activity.compose.AttachmentPresenter$WaitingAction)",
        "shows a waiting dialog for an attachment action in a compose view."
      ],
      [
        "showPickAttachmentDialog(int)",
        "displays a dialog for picking an attachment with a given request code."
      ],
      [
        "dismissWaitingForAttachmentDialog()",
        "dismisses a waiting dialog for an attachment."
      ],
      [
        "removeAttachmentView(com.fsck.k9.activity.misc.Attachment)",
        "removes a view displaying a given email attachment."
      ],
      [
        "addAttachmentView(com.fsck.k9.activity.misc.Attachment)",
        "adds an attachment view to the attachment presenter."
      ],
      [
        "showMissingAttachmentsPartialMessageWarning()",
        "displays a warning message if the composed message is missing some attachments."
      ]
    ],
    "class com.fsck.k9.activity.compose.ComposeCryptoStatus": [
      [
        "getSendErrorStateOrNull()",
        "checks for any send error state in the ComposeCryptoStatus."
      ],
      [
        "isPgpInlineModeEnabled()",
        "returns whether PGP inline mode is enabled or not in the ComposeCryptoStatus activity in the K-9 Mail app."
      ],
      [
        "getOpenPgpKeyId()",
        "returns the OpenPGP key ID as a Long value."
      ],
      [
        "isEncryptionEnabled()",
        "checks if encryption is enabled based on the state of the crypto provider, the encryption mode, and if encryption is mutually possible and not disabled."
      ],
      [
        "getRecipientAddresses()",
        "returns an array of recipient email addresses for a ComposeCryptoStatus object."
      ],
      [
        "isProviderStateOk()",
        "returns a boolean value indicating whether the crypto provider state is \"OK\" for composing an email."
      ],
      [
        "isSigningEnabled()",
        "checks if signing is enabled in the current compose crypto mode or if encryption is enabled."
      ],
      [
        "shouldUsePgpMessageBuilder()",
        "determines if the PGP message builder should be used based on the current crypto provider state."
      ],
      [
        "hasRecipients()",
        "checks if there are any recipient addresses present in an email being composed within the ComposeCryptoStatus class."
      ]
    ],
    "class com.fsck.k9.activity.compose.IdentityAdapter": [
      [
        "hasStableIds()",
        "returns whether the adapter's item IDs are stable across changes to the data set."
      ],
      [
        "getItemId(int)",
        "returns the ID of the item at a specific position in the adapter's data set."
      ],
      [
        "getView(int,android.view.View,android.view.ViewGroup)",
        "returns a `View` for a specific position in a list of either email account or identity information, creating or reusing `Holder` objects as needed."
      ],
      [
        "getViewTypeCount()",
        "returns the number of different types of views that can be displayed by the adapter."
      ],
      [
        "getItem(int)",
        "returns an object from the `mItems` list at the specified `position` index."
      ],
      [
        "getCount()",
        "returns the size of the `mItems` list."
      ],
      [
        "isEnabled(int)",
        "checks whether an item at a certain position is an instance of a IdentityContainer in a list of items."
      ],
      [
        "getItemViewType(int)",
        "returns the type of view that should be displayed at a given position in the `IdentityAdapter` based on whether the item at that position is an instance of `com.fsck.k9.Account`."
      ]
    ],
    "interface com.fsck.k9.activity.compose.RecipientPresenter$RecipientsChangedListener": [
      [
        "onRecipientsChanged()",
        "handles a change in the list of recipients in the Compose email screen."
      ]
    ],
    "class com.fsck.k9.activity.compose.PgpEncryptDescriptionDialog": [
      [
        "newInstance(int)",
        "creates a new instance of the PgpEncryptDescriptionDialog with specified arguments."
      ],
      [
        "onCreateDialog(android.os.Bundle)",
        "creates a dialog box for describing OpenPGP encryption, including a button to confirm and dismiss the dialog."
      ]
    ],
    "class com.fsck.k9.activity.compose.PgpEnabledErrorDialog": [
      [
        "newInstance(boolean,int)",
        "creates a new instance of the `PgpEnabledErrorDialog` class with specific arguments."
      ],
      [
        "onCreateDialog(android.os.Bundle)",
        "creates and returns a dialog that shows an error message related to OpenPGP and offers options for the user to dismiss or disable OpenPGP."
      ]
    ],
    "class com.fsck.k9.activity.compose.RecipientAdapter": [
      [
        "setContactPhotoOrPlaceholder(android.content.Context,android.widget.ImageView,com.fsck.k9.view.RecipientSelectView$Recipient)",
        "sets the contact photo of a recipient or a placeholder image if no photo exists, using a provided context, image view and recipient object."
      ],
      [
        "getView(int,android.view.View,android.view.ViewGroup)",
        "creates a view or reuses an existing one, gets a recipient object from the adapter's data set at the specified position, and binds the recipient data to the view before returning it."
      ],
      [
        "getItem(int)",
        "returns a recipient from the `recipients` list based on the specified position, or `null` if the `recipients` list is `null`."
      ],
      [
        "getFilter()",
        "returns a new filter for the recipient adapter which publishes any changes made to the recipient list."
      ],
      [
        "getCount()",
        "returns the number of recipients in the `recipients` list or 0 if the list is null."
      ],
      [
        "getItemId(int)",
        "returns the ID of the item at the specified position in the adapter, which in this case is simply the position itself."
      ],
      [
        "setHighlight(java.lang.String)",
        "sets the highlight string to be used in the recipient list view."
      ],
      [
        "setRecipients(java.util.List)",
        "sets the recipients for the recipient adapter and notifies any observers of the change."
      ],
      [
        "setShowAdvancedInfo(boolean)",
        "sets the value of the boolean showAdvancedInfo variable in the RecipientAdapter class."
      ]
    ],
    "interface com.fsck.k9.activity.compose.PgpSignOnlyDialog$OnOpenPgpSignOnlyChangeListener": [
      [
        "onOpenPgpSignOnlyChange(boolean)",
        "handles a change in the OpenPGP sign-only setting in the compose activity."
      ]
    ],
    "class com.fsck.k9.activity.compose.ComposeCryptoStatus$ComposeCryptoStatusBuilder": [
      [
        "setCryptoMode(com.fsck.k9.activity.compose.RecipientPresenter$CryptoMode)",
        "sets the `cryptoMode` field of a `ComposeCryptoStatus` builder object to the provided `cryptoMode` value and returns the builder object itself."
      ],
      [
        "build()",
        "builds a ComposeCryptoStatus object by setting its properties based on values set in the builder."
      ],
      [
        "setCryptoProviderState(com.fsck.k9.activity.compose.RecipientPresenter$CryptoProviderState)",
        "sets the `cryptoProviderState` property of a `ComposeCryptoStatusBuilder` object and returns the builder itself."
      ],
      [
        "setRecipients(java.util.List)",
        "sets a list of recipients for a ComposeCryptoStatusBuilder object."
      ],
      [
        "setEnablePgpInline(boolean)",
        "sets the value of a boolean variable called \"enablePgpInline\" and returns the instance of the ComposeCryptoStatusBuilder."
      ],
      [
        "setOpenPgpKeyId(java.lang.Long)",
        "sets the OpenPGP key ID used for encryption and signing in a ComposeCryptoStatus builder object."
      ],
      [
        "setPreferEncryptMutual(boolean)",
        "sets the preference for mutual encryption in the ComposeCryptoStatusBuilder object."
      ]
    ],
    "class com.fsck.k9.activity.compose.MessageActions": [
      [
        "getActionReplyIntent(android.content.Context,com.fsck.k9.activity.MessageReference)",
        "returns an intent for composing a reply to a specified email message and adding necessary extras, such as the message reference, to the intent."
      ],
      [
        "actionForward(android.content.Context,com.fsck.k9.activity.MessageReference,android.os.Parcelable)",
        "opens a new message compose window with a forward of the given message in the specified Android context."
      ],
      [
        "getActionReplyIntent(android.content.Context,com.fsck.k9.activity.MessageReference,boolean,android.os.Parcelable)",
        "gets an intent for composing a new message as a reply to a given message, with an option for reply all."
      ],
      [
        "actionCompose(android.content.Context,com.fsck.k9.Account)",
        "opens a new message composition screen for a specified account or the default account."
      ],
      [
        "actionEditDraft(android.content.Context,com.fsck.k9.activity.MessageReference)",
        "opens the message compose activity to edit a saved draft message."
      ],
      [
        "actionReply(android.content.Context,com.fsck.k9.activity.MessageReference,boolean,android.os.Parcelable)",
        "opens the compose screen to create a new email message as a reply to a given message reference."
      ]
    ],
    "interface com.fsck.k9.activity.compose.PgpInlineDialog$OnOpenPgpInlineChangeListener": [
      [
        "onOpenPgpInlineChange(boolean)",
        "triggers when the user changes the PGP inline option in a compose email dialog."
      ]
    ],
    "class com.fsck.k9.activity.compose.RecipientMvpView": [
      [
        "showCryptoSpecialMode(com.fsck.k9.activity.compose.RecipientMvpView$CryptoSpecialModeDisplayType)",
        "displays or hides a special mode indicator for the recipient view in the K-9 email client, based on the given `cryptoSpecialModeDisplayType`."
      ],
      [
        "showNoRecipientsError()",
        "displays an error message when there are no recipients entered in the \"To\" field of a Compose message."
      ],
      [
        "recipientCcTryPerformCompletion()",
        "tries to perform an autocomplete action for the CC email recipient field."
      ],
      [
        "recipientToTryPerformCompletion()",
        "tries to perform a completion action on the recipient view."
      ],
      [
        "getCcRecipients()",
        "returns a list of recipients included in the CC field of an email message being composed in the K-9 email client."
      ],
      [
        "getToRecipients()",
        "returns a list of recipients selected as \"To\" in a view used for composing emails in the K-9 email client."
      ],
      [
        "getBccRecipients()",
        "returns a list of BCC recipients selected in the recipient select view for email composition."
      ],
      [
        "recipientBccHasUncompletedText()",
        "checks if the BCC recipient field in an email composition has any uncompleted text."
      ],
      [
        "setCryptoProvider(java.lang.String)",
        "sets the OpenPGP provider to be used for cryptographic operations in the recipient views of an email composing activity."
      ],
      [
        "requestFocusOnCcField()",
        "requests focus on the CC field in the compose email screen of the K9 email client application."
      ],
      [
        "showErrorOpenPgpIncompatible()",
        "displays a toast message indicating an OpenPGP incompatibility error in the recipient view of an email composition activity."
      ],
      [
        "getToAddresses()",
        "returns a list of email addresses from the \"To\" field of a composed email message."
      ],
      [
        "showOpenPgpEncryptExplanationDialog()",
        "displays a dialog explaining OpenPGP encryption to the user."
      ],
      [
        "launchUserInteractionPendingIntent(android.app.PendingIntent,int)",
        "launches a user interaction pending intent with a given request code."
      ],
      [
        "showToUncompletedError()",
        "displays an error message for incomplete recipient information in the \"To\" field of an email compose view."
      ],
      [
        "setBccVisibility(boolean)",
        "sets the visibility of the Bcc field and divider based on a boolean value."
      ],
      [
        "showErrorIsSignOnly()",
        "displays a Toast message notifying the user that the recipient can only receive signed emails and not encrypted ones."
      ],
      [
        "showErrorInlineAttach()",
        "displays a toast message with an error related to cryptography and inline attachments."
      ],
      [
        "getCcAddresses()",
        "returns a list of mail addresses that are included in the cc field of a composed email."
      ],
      [
        "recipientToHasUncompletedText()",
        "checks whether the \"to\" recipient field has any incomplete text in it."
      ],
      [
        "onClick(android.view.View)",
        "handles click events for various views in the RecipientMvpView and calls the corresponding presenter method."
      ],
      [
        "onFocusChange(android.view.View,boolean)",
        "calls a method in the presenter class based on which recipient field gains focus."
      ],
      [
        "recipientBccTryPerformCompletion()",
        "attempts to perform auto-completion for the BCC recipient field."
      ],
      [
        "isCcVisible()",
        "checks if the carbon copy (cc) recipient field is currently visible in an email composition view."
      ],
      [
        "getBccAddresses()",
        "returns a list of email addresses that are included in the Blind Carbon Copy (BCC) field of a composed email."
      ],
      [
        "setRecipientTokensShowCryptoEnabled(boolean)",
        "enables or disables displaying the cryptography status of email recipients in the compose view of the K-9 email application."
      ],
      [
        "showErrorContactNoAddress()",
        "displays a toast message indicating that a contact's address could not be found."
      ],
      [
        "showErrorNoKeyConfigured()",
        "displays a toast message indicating that no encryption key has been configured for email recipient."
      ],
      [
        "showErrorOpenPgpUserInteractionRequired()",
        "displays a Toast message notifying the user that OpenPGP user interaction is required for successful email encryption."
      ],
      [
        "setLoaderManager(android.app.LoaderManager)",
        "sets the loader manager for the recipient views in the compose activity."
      ],
      [
        "requestFocusOnBccField()",
        "requests focus on the BCC field of the email composition view."
      ],
      [
        "setFontSizes(com.fsck.k9.FontSizes,int)",
        "sets the font size of recipient fields (To, Cc, and Bcc) in an email composition view."
      ],
      [
        "setRecipientExpanderVisibility(boolean)",
        "sets the visibility of the BCC expander in the recipient view of an email compose activity."
      ],
      [
        "showContactPicker(int)",
        "displays a contact picker dialog to allow the user to select a contact and returns the result to the calling activity."
      ],
      [
        "showErrorOpenPgpConnection()",
        "displays a Toast message with an error message related to an OpenPGP connection in the K-9 Mail application."
      ],
      [
        "addTextChangedListener(android.text.TextWatcher)",
        "adds a text watcher to three different text fields (to, cc, and bcc) in the recipient view of an email compose screen."
      ],
      [
        "recipientCcHasUncompletedText()",
        "checks whether the \"Cc\" field of an email composition has any incomplete text."
      ],
      [
        "showOpenPgpInlineDialog(boolean)",
        "displays an OpenPGP inline dialog in the compose recipient view."
      ],
      [
        "showCcUncompletedError()",
        "sets an error on the `ccView` to show an incomplete recipient error message."
      ],
      [
        "addRecipients(com.fsck.k9.mail.Message.RecipientType,com.fsck.k9.view.RecipientSelectView$Recipient[])",
        "adds recipients of a certain type (To, Cc, or Bcc) to the compose view."
      ],
      [
        "showErrorOpenPgpRetrieveStatus()",
        "displays a toast with an error message related to retrieving OpenPGP status for a recipient in the Compose activity of the K9 email client app."
      ],
      [
        "requestFocusOnToField()",
        "requests focus on the \"To\" field in the compose email view."
      ],
      [
        "showBccUncompletedError()",
        "displays an error message on the Bcc recipient view if it is incomplete."
      ],
      [
        "showCryptoStatus(com.fsck.k9.activity.compose.RecipientMvpView$CryptoStatusDisplayType)",
        "shows or hides a view displaying information about the encryption status of a recipient in the email composition interface."
      ],
      [
        "showOpenPgpSignOnlyDialog(boolean)",
        "displays a pop-up dialog for signing an email using OpenPGP encryption without encryption of the message itself."
      ],
      [
        "isBccVisible()",
        "checks whether the blind carbon copy (bcc) recipient field is currently visible on the recipient view."
      ],
      [
        "setPresenter(com.fsck.k9.activity.compose.RecipientPresenter)",
        "sets the presenter and listeners for adding/removing/changed tokens for the recipient views."
      ],
      [
        "showOpenPgpEnabledErrorDialog(boolean)",
        "displays a dialog box to the user notifying them that OpenPGP encryption is enabled."
      ],
      [
        "setCcVisibility(boolean)",
        "sets the visibility of the CC field in the recipient view based on the boolean value passed as a parameter."
      ]
    ],
    "class com.fsck.k9.activity.compose.RecipientPresenter": [
      [
        "onPrepareOptionsMenu(android.view.Menu)",
        "updates the visibility of menu items based on the current state of OpenPGP encryption and signing and the availability of a contact picker."
      ],
      [
        "initFromSendOrViewIntent(android.content.Intent)",
        "initializes the recipient fields of an email composer or viewer based on the email, cc, and bcc values provided in an incoming Intent."
      ],
      [
        "onSwitchAccount(com.fsck.k9.Account)",
        "updates the account information and recipient visibility settings, and sets up the cryptography provider."
      ],
      [
        "builderSetProperties(com.fsck.k9.message.PgpMessageBuilder,com.fsck.k9.activity.compose.ComposeCryptoStatus)",
        "sets various properties of a PgpMessageBuilder object based on the recipient addresses and crypto status provided."
      ],
      [
        "onMenuSetPgpInline(boolean)",
        "handles the user's selection to enable or disable PGP inline encryption and shows a dialog if necessary."
      ],
      [
        "getBccAddresses()",
        "returns a list of email addresses that are in the blind carbon copy (BCC) field of the email message being composed."
      ],
      [
        "getCcAddresses()",
        "returns a list of email addresses for recipients who should be copied on a message being composed."
      ],
      [
        "getCurrentCachedCryptoStatus()",
        "returns the current cached crypto status of the ComposeCryptoStatus in the RecipientPresenter class."
      ],
      [
        "addBccAddresses(com.fsck.k9.mail.Address[])",
        "adds BCC recipients to the email being composed and updates the visibility of the BCC field accordingly."
      ],
      [
        "onCryptoModeChanged(com.fsck.k9.activity.compose.RecipientPresenter$CryptoMode)",
        "updates the current cryptographic mode and asynchronously updates the cryptographic status."
      ],
      [
        "initFromTrustIdAction(java.lang.String)",
        "(no description)"
      ],
      [
        "onNonRecipientFieldFocused()",
        "checks if the account is set to always show CC/BCC fields and hides them if they are currently empty and the focus is on a non-recipient field."
      ],
      [
        "shouldSaveRemotely()",
        "determines if the recipient's encryption status should be saved remotely based on whether cached crypto status is null or encryption is disabled."
      ],
      [
        "builderSetProperties(com.fsck.k9.message.MessageBuilder)",
        "sets the recipient properties (To, Cc, Bcc) of a message builder object, throwing an exception if it is a PgpMessageBuilder without a ComposeCryptoStatus argument."
      ],
      [
        "initFromReplyToMessage(com.fsck.k9.mail.Message,boolean)",
        "initializes the recipient fields in the Compose activity based on the recipients of a reply-to message, and enables PGP encryption based on various criteria."
      ],
      [
        "checkRecipientsOkForSending()",
        "checks if all recipients for an email are correctly entered before allowing it to be sent."
      ],
      [
        "onCryptoPgpClickDisable()",
        "changes the encryption mode for the recipient to \"No Choice\" when the user clicks on the \"disable\" button for PGP encryption."
      ],
      [
        "onRestoreInstanceState(android.os.Bundle)",
        "restores the state of the recipient view in the compose screen of an email client."
      ],
      [
        "onMenuAddFromContacts()",
        "opens a contact picker when a user wants to add a recipient from their contacts."
      ],
      [
        "showPgpSendError(com.fsck.k9.activity.compose.ComposeCryptoStatus$SendErrorState)",
        "displays a specific error message based on the `sendErrorState` parameter passed to it."
      ],
      [
        "onCryptoPgpInlineChanged(boolean)",
        "updates the `cryptoEnablePgpInline` boolean value and asynchronously updates the crypto status based on whether PGP inline encryption is enabled or disabled."
      ],
      [
        "onSaveInstanceState(android.os.Bundle)",
        "saves the current state of various recipient-related variables and flags to an instance of the `Bundle` class."
      ],
      [
        "initFromMailto(com.fsck.k9.helper.MailTo)",
        "initializes the recipient fields in the compose screen with email addresses parsed from a `mailto` URI."
      ],
      [
        "initFromDraftMessage(com.fsck.k9.mail.Message)",
        "(no description)"
      ],
      [
        "onPgpPermissionCheckResult(android.content.Intent)",
        "handles the result of a PGP permission check and sets the state of the cryptographic provider accordingly."
      ],
      [
        "onActivityDestroy()",
        "unbinds from the OpenPGP service if it is currently bound and sets the connection variable to null when the activity is destroyed."
      ],
      [
        "onSwitchIdentity(com.fsck.k9.Identity)",
        "does not currently perform any action on switching email identities."
      ],
      [
        "onMenuSetEnableEncryption(boolean)",
        "changes the recipient's encryption mode based on whether or not encryption is enabled and the recipient's current encryption status."
      ],
      [
        "asyncUpdateCryptoStatus()",
        "updates the encrypted status of the recipients of a message being composed asynchronously."
      ],
      [
        "onActivityResult(int,int,android.content.Intent)",
        "handles the result of an activity launched with an intent, depending on the request code."
      ],
      [
        "onMenuSetSignOnly(boolean)",
        "handles the action of enabling or disabling \"sign only\" mode for OpenPGP encryption in the recipient presenter of an email compose screen."
      ],
      [
        "getToAddresses()",
        "returns a list of email addresses intended for the \"To\" field in an email message."
      ],
      [
        "onCryptoPgpSignOnlyDisabled()",
        "disables PGP signing and sets the crypto mode to \"no choice\"."
      ],
      [
        "isForceTextMessageFormat()",
        "returns a boolean value indicating whether the PGP inline encryption is enabled for text message format."
      ]
    ],
    "class com.fsck.k9.activity.compose.AttachmentPresenter": [
      [
        "addAttachment(android.net.Uri,java.lang.String)",
        "adds an attachment to an email being composed in an Android app and starts loading it with a unique ID."
      ],
      [
        "checkOkForSendingOrDraftSaving()",
        "checks if it is okay to send or save a draft email with attachments in the \"AttachmentPresenter\" class of an Android email application called K-9."
      ],
      [
        "processMessageToForward(com.fsck.k9.mailstore.MessageViewInfo)",
        "loads non-inline attachments for a message to be forwarded and shows a warning if some attachments are missing."
      ],
      [
        "loadNonInlineAttachments(com.fsck.k9.mailstore.MessageViewInfo)",
        "loads non-inline attachments from a given email message and adds them as attachments to the attachment presenter while ensuring that all parts are available."
      ],
      [
        "onClickRemoveAttachment(android.net.Uri)",
        "(no description)"
      ],
      [
        "onRestoreInstanceState(android.os.Bundle)",
        "restores the state of the AttachmentPresenter class from a saved instance state bundle."
      ],
      [
        "onClickAddAttachment(com.fsck.k9.activity.compose.RecipientPresenter)",
        "shows a pick attachment dialog and handles errors related to attaching files in the email composer."
      ],
      [
        "onActivityResult(int,int,android.content.Intent)",
        "handles the result of an attachment request."
      ],
      [
        "createAttachmentList()",
        "creates a list of attachments."
      ],
      [
        "onSaveInstanceState(android.os.Bundle)",
        "saves the state of the AttachmentPresenter object into a Bundle object."
      ],
      [
        "attachmentProgressDialogCancelled()",
        "resets the attachment presenter's waiting action to none if the attachment progress dialog is cancelled."
      ]
    ],
    "interface com.fsck.k9.activity.compose.AttachmentPresenter$AttachmentsChangedListener": [
      [
        "onAttachmentAdded()",
        "notifies the listener that an attachment has been added to the compose screen."
      ],
      [
        "onAttachmentRemoved()",
        "is called when an attachment is removed from the email draft in the Compose activity."
      ]
    ]
  },
  "com.fsck.k9.activity.loader": {
    "class com.fsck.k9.activity.loader.AttachmentContentLoader": [
      [
        "loadInBackground()",
        "loads an attachment into memory by retrieving its input stream, saving it to a temporary file, and returning the resulting attachment."
      ]
    ],
    "class com.fsck.k9.activity.loader.AttachmentInfoLoader": [
      [
        "loadInBackground()",
        "loads attachment metadata (name, size, content type) from a URI and returns an `Attachment` object with the loaded metadata."
      ]
    ]
  },
  "com.fsck.k9.activity.misc": {
    "class com.fsck.k9.activity.misc.ContactPictureLoader$FallbackGlideModelLoader": [
      [
        "getResourceFetcher(com.fsck.k9.activity.misc.ContactPictureLoader$FallbackGlideParams,int,int)",
        "returns a `DataFetcher` object to fetch a contact picture using Glide library with fallback parameters if necessary."
      ]
    ],
    "class com.fsck.k9.activity.misc.ContactPictureLoader$FallbackGlideBitmapDecoder": [
      [
        "decode(com.fsck.k9.activity.misc.ContactPictureLoader$FallbackGlideParams,int,int)",
        "decodes a fallback contact picture by drawing text and background color on a bitmap."
      ],
      [
        "getId()",
        "returns a string representation of the ID for a fallback contact photo."
      ]
    ],
    "class com.fsck.k9.activity.misc.ContactPictureLoader": [
      [
        "loadContactPicture(com.fsck.k9.view.RecipientSelectView$Recipient,android.widget.ImageView)",
        "loads a contact's picture into an ImageView widget based on a recipient's information."
      ],
      [
        "loadContactPicture(com.fsck.k9.mail.Address,android.widget.ImageView)",
        "loads the contact picture of a given email address into a specified `ImageView` using a helper method that retrieves the photo URI."
      ]
    ],
    "class com.fsck.k9.activity.misc.ContactPictureLoader$FallbackGlideParams": [
      [
        "getId()",
        "returns a string identifier for a contact picture, based on the contact's email address and display name."
      ]
    ],
    "interface com.fsck.k9.activity.misc.SwipeGestureDetector$OnSwipeGestureListener": [
      [
        "onSwipeRightToLeft(android.view.MotionEvent,android.view.MotionEvent)",
        "triggers when a swipe gesture is detected from right to left and passes the motion events involved in the swipe to the listener implementing the interface."
      ],
      [
        "onSwipeLeftToRight(android.view.MotionEvent,android.view.MotionEvent)",
        "handles a swipe gesture from left to right and passes information on the motion events."
      ]
    ],
    "class com.fsck.k9.activity.misc.Attachment": [
      [
        "createAttachment(android.net.Uri,int,java.lang.String)",
        "creates an instance of the `Attachment` class with a given URI, loader ID, and content type."
      ],
      [
        "deriveWithLoadComplete(java.lang.String)",
        "creates a new instance of the `Attachment` class with the specified `absolutePath` and sets its state to `COMPLETE`."
      ],
      [
        "writeToParcel(android.os.Parcel,int)",
        "writes the object's data to a Parcel for possible serialization and transfer between processes."
      ],
      [
        "describeContents()",
        "returns a bitmask indicating the types of special objects contained in the Parcelable."
      ],
      [
        "deriveWithLoadCancelled()",
        "creates a new instance of the `Attachment` class with a `LoadingState` of `CANCELLED` and returns it, but throws an exception if the current state is not `METADATA`."
      ],
      [
        "deriveWithMetadataLoaded(java.lang.String,java.lang.String,long)",
        "creates a new instance of the `Attachment` class with metadata loaded."
      ]
    ],
    "abstract class com.fsck.k9.activity.misc.ExtendedAsyncTask": [
      [
        "restore(android.app.Activity)",
        "reconnects an asynchronous task to a new activity instance after the activity has been restarted due to a configuration change and shows a new progress dialog."
      ],
      [
        "retain()",
        "detaches the AsyncTask from the Activity it was bound to and potentially retains it for later use."
      ]
    ],
    "class com.fsck.k9.activity.misc.SwipeGestureDetector": [
      [
        "onFling(android.view.MotionEvent,android.view.MotionEvent,float,float)",
        "(no description)"
      ],
      [
        "onDown(android.view.MotionEvent)",
        "saves the last MotionEvent when the user touches the screen and returns whether the touch event is supported or not by the superclass."
      ]
    ],
    "interface com.fsck.k9.activity.misc.NonConfigurationInstance": [
      [
        "restore(android.app.Activity)",
        "connects a retained NonConfigurationInstance to a new Activity instance after a configuration change and creates a new progress dialog."
      ],
      [
        "retain()",
        "determines whether or not this instance should be retained during an activity restart due to a configuration change and cleans up resources if necessary."
      ]
    ]
  },
  "com.fsck.k9.activity.setup": {
    "class com.fsck.k9.activity.setup.OpenPgpAppSelectDialog": [
      [
        "onDismissApgDialog()",
        "shows the OpenPGP app selection dialog fragment when the APG dialog is dismissed."
      ],
      [
        "onCreate(android.os.Bundle)",
        "creates and sets the theme for an OpenPGP app selection dialog and shows the fragment if saved instance state is null."
      ],
      [
        "onSelectProvider(java.lang.String)",
        "selects an OpenPGP provider and saves the choice in the application's settings."
      ]
    ],
    "class com.fsck.k9.activity.setup.OpenPgpAppSelectDialog$ApgDeprecationDialogFragment": [
      [
        "onCreateDialog(android.os.Bundle)",
        "creates a dialog box for displaying a warning message about the deprecation of Apg."
      ],
      [
        "onDismiss(android.content.DialogInterface)",
        "dismisses a dialog box and calls a method in the parent activity."
      ]
    ],
    "class com.fsck.k9.activity.setup.AccountSetupOptions": [
      [
        "onCreate(android.os.Bundle)",
        "sets up the options for a mail account, including setting the frequency of mail checks, display count, and push notifications based on the user's preferences."
      ],
      [
        "actionOptions(android.content.Context,com.fsck.k9.Account,boolean)",
        "opens the options screen for a specific email account in the K-9 email app."
      ],
      [
        "onClick(android.view.View)",
        "calls the `onDone()` method when the \"next\" button is clicked in the AccountSetupOptions activity."
      ]
    ],
    "class com.fsck.k9.activity.setup.AuthTypeAdapter": [
      [
        "getAuthPosition(com.fsck.k9.mail.AuthType)",
        "returns the position of a specific authentication type in the AuthTypeAdapter."
      ],
      [
        "useInsecureText(boolean)",
        "sets the text label for the `AuthType.PLAIN` option presented to users either as \"Normal password\" (if `true`) or \"Password, transmitted insecurely\" (if `false`)."
      ],
      [
        "get(android.content.Context)",
        "creates an adapter to display a list of authentication types as a spinner dropdown in an Android app."
      ]
    ],
    "class com.fsck.k9.activity.setup.OpenPgpAppSelectDialog$OpenPgpProviderEntry": [
      [
        "toString()",
        "returns the `simpleName` value as a string representation of the `OpenPgpProviderEntry` object when called."
      ]
    ],
    "class com.fsck.k9.activity.setup.AccountSetupAccountType": [
      [
        "actionSelectAccountType(android.content.Context,com.fsck.k9.Account,boolean)",
        "launches an intent to select the type of email account and sets relevant extras."
      ],
      [
        "onClick(android.view.View)",
        "handles clicks on different buttons corresponding to different email account types, sets up the store and SMTP transport, or sets up the DAV protocol, and then navigates to the incoming email settings page."
      ],
      [
        "onCreate(android.os.Bundle)",
        "sets up click listeners for the different account types and retrieves the account details from the intent extras."
      ]
    ],
    "class com.fsck.k9.activity.setup.AccountSetupOutgoing": [
      [
        "onCheckedChanged(android.widget.CompoundButton,boolean)",
        "sets the visibility of a view based on the state of a compound button and calls a method to validate fields."
      ],
      [
        "onSaveInstanceState(android.os.Bundle)",
        "saves the state of the outgoing email account setup process including the account UUID and the current positions of the security and authentication type views."
      ],
      [
        "onActivityResult(int,int,android.content.Intent)",
        "handles the result of an activity that was started for setting up an outgoing email account and either saves the account settings or opens further options."
      ],
      [
        "actionOutgoingSettings(android.content.Context,com.fsck.k9.Account,boolean)",
        "starts the outgoing email server settings activity for a specified account and allows the option to make it the default account."
      ],
      [
        "actionEditOutgoingSettings(android.content.Context,com.fsck.k9.Account)",
        "opens the outgoing email settings screen for a given email account in the K-9 email client app."
      ],
      [
        "onCreate(android.os.Bundle)",
        "sets up the outgoing email settings for a K9 email account."
      ],
      [
        "intentActionEditOutgoingSettings(android.content.Context,com.fsck.k9.Account)",
        "creates an intent to edit outgoing settings for a specific email account in the K-9 email client."
      ],
      [
        "onClick(android.view.View)",
        "listens for a click event on a button with a specific ID and executes the `onNext()` method when that button is clicked."
      ]
    ],
    "class com.fsck.k9.activity.setup.AccountSettings": [
      [
        "onCreateDialog(int)",
        "creates a color picker dialog for the account or LED and sets the chosen color for the corresponding settings."
      ],
      [
        "onPrepareDialog(int,android.app.Dialog)",
        "preps the color picker dialog by setting the previously selected color for the account and the notification LED, respectively."
      ],
      [
        "actionSettings(android.content.Context,com.fsck.k9.Account)",
        "launches an activity that displays the settings for a specific email account in the K-9 Mail app."
      ],
      [
        "onChooseLedColor()",
        "displays a dialog to choose a LED color for an email account."
      ],
      [
        "onChooseChipColor()",
        "displays a color picker dialog for the user to choose a chip color for their account in the K-9 email app."
      ],
      [
        "onActivityResult(int,int,android.content.Intent)",
        "handles the result of an activity launched for selecting an auto expand folder or a PGP crypto key."
      ],
      [
        "onChooseAutoExpandFolder()",
        "starts an activity for choosing the auto-expand folder for a specific email account."
      ],
      [
        "onCreate(android.os.Bundle)",
        "(no description)"
      ]
    ],
    "class com.fsck.k9.activity.setup.SpinnerOption": [
      [
        "toString()",
        "overrides the default `toString()` method to return the value of the `label` variable as a string."
      ],
      [
        "setSpinnerOptionValue(android.widget.Spinner,java.lang.Object)",
        "sets the selection of a Spinner based on the value provided."
      ]
    ],
    "class com.fsck.k9.activity.setup.FolderSettings": [
      [
        "onPause()",
        "saves folder settings before the activity is paused and logs an error if the save fails."
      ],
      [
        "actionSettings(android.content.Context,com.fsck.k9.Account,java.lang.String)",
        "starts an activity for managing settings for a specific folder in a K9 email account."
      ],
      [
        "onCreate(android.os.Bundle)",
        "creates and sets up preferences for folder settings based on the provided folder name and account UUID."
      ]
    ],
    "class com.fsck.k9.activity.setup.AccountSetupCheckSettings": [
      [
        "onDestroy()",
        "sets two boolean instance variables to true and calls the `onDestroy()` method of the superclass."
      ],
      [
        "actionCheckSettings(android.app.Activity,com.fsck.k9.Account,com.fsck.k9.activity.setup.AccountSetupCheckSettings$CheckDirection)",
        "starts an activity to check the settings for a given email account."
      ],
      [
        "onClick(android.view.View)",
        "handles the onClick event for a cancel button in the AccountSetupCheckSettings activity."
      ],
      [
        "doPositiveClick(int)",
        "handles a positive click on a specific type of dialog in the account setup process and finishes the activity."
      ],
      [
        "onCreate(android.os.Bundle)",
        "sets up the UI and executes a task to check email account settings for a specific direction (incoming or outgoing)."
      ],
      [
        "dialogCancelled(int)",
        "handles the event of a dialog being cancelled in the AccountSetupCheckSettings class."
      ],
      [
        "onActivityResult(int,int,android.content.Intent)",
        "(no description)"
      ],
      [
        "doNegativeClick(int)",
        "handles a negative click response for a specific dialog in the `AccountSetupCheckSettings` activity, setting a flag to false and finishing the activity."
      ]
    ],
    "class com.fsck.k9.activity.setup.AccountSetupComposition": [
      [
        "onBackPressed()",
        "saves the current settings and then calls the `onBackPressed()` method of the superclass."
      ],
      [
        "onCreate(android.os.Bundle)",
        "sets up the UI for composing an email by populating the account name, email, always BCC, and signature fields with the account information stored in the app's preferences."
      ],
      [
        "onActivityResult(int,int,android.content.Intent)",
        "saves the account preferences and finishes the activity once it receives a result from another activity."
      ],
      [
        "onSaveInstanceState(android.os.Bundle)",
        "saves the UUID of a specified account in the bundle for an Android activity for possible restoration in the future."
      ],
      [
        "actionEditCompositionSettings(android.app.Activity,com.fsck.k9.Account)",
        "opens the activity for editing the composition settings of a given email account."
      ]
    ],
    "class com.fsck.k9.activity.setup.ConnectionSecurityAdapter": [
      [
        "get(android.content.Context,com.fsck.k9.mail.ConnectionSecurity[])",
        "creates a Spinner adapter for ConnectionSecurity options based on the given array of ConnectionSecurity items and a Context."
      ],
      [
        "getConnectionSecurityPosition(com.fsck.k9.mail.ConnectionSecurity)",
        "returns the position of a specified connection security option within the adapter."
      ],
      [
        "get(android.content.Context)",
        "returns a new instance of a ConnectionSecurityAdapter with the list of available ConnectionSecurity values."
      ]
    ],
    "class com.fsck.k9.activity.setup.WelcomeMessage": [
      [
        "onCreate(android.os.Bundle)",
        "creates and sets up the layout for the welcome message screen in the K-9 email client setup wizard."
      ],
      [
        "onClick(android.view.View)",
        "handles click events for two different buttons in a setup activity, either creating a new account or importing settings and then finishing the activity."
      ],
      [
        "showWelcomeMessage(android.content.Context)",
        "opens the welcome message activity in the K-9 email client app."
      ]
    ],
    "class com.fsck.k9.activity.setup.AccountSetupIncoming": [
      [
        "actionIncomingSettings(android.app.Activity,com.fsck.k9.Account,boolean)",
        "starts an activity to set up the incoming settings for a K9 email account."
      ],
      [
        "onSaveInstanceState(android.os.Bundle)",
        "saves the state of the AccountSetupIncoming activity to a Bundle."
      ],
      [
        "intentActionEditIncomingSettings(android.content.Context,com.fsck.k9.Account)",
        "returns an intent to edit incoming settings for a given K-9 email client account."
      ],
      [
        "onClick(android.view.View)",
        "responds to the user clicking on the next button during the setup process for an incoming email account, calling the onNext() method if the next button was clicked and handling any exceptions that may occur by calling the failure() method."
      ],
      [
        "actionEditIncomingSettings(android.app.Activity,com.fsck.k9.Account)",
        "starts an activity to edit incoming server settings for a given email account in the K9 email client app."
      ],
      [
        "onActivityResult(int,int,android.content.Intent)",
        "handles the result of a previous activity and updates the account settings accordingly."
      ],
      [
        "onCreate(android.os.Bundle)",
        "creates and initializes the user interface and sets up the account settings for an incoming email server."
      ]
    ],
    "class com.fsck.k9.activity.setup.FontSizeSettings": [
      [
        "actionEditSettings(android.content.Context)",
        "starts the FontSizeSettings activity with the given application context."
      ],
      [
        "onCreate(android.os.Bundle)",
        "sets up a preferences screen for adjusting font sizes in various parts of the application and initializes the preference values based on the current font sizes."
      ],
      [
        "onBackPressed()",
        "saves the settings and invokes the default behavior for handling the back button press."
      ]
    ],
    "class com.fsck.k9.activity.setup.AccountSetupNames": [
      [
        "onClick(android.view.View)",
        "handles the \"onClick\" event for the \"done\" button, executing the \"onNext\" method when the button is clicked."
      ],
      [
        "onCreate(android.os.Bundle)",
        "sets up the layout and initializes the fields and listeners for the AccountSetupNames activity."
      ],
      [
        "actionSetNames(android.content.Context,com.fsck.k9.Account)",
        "opens a new activity for setting the display name and description of a K-9 email account."
      ]
    ],
    "class com.fsck.k9.activity.setup.SliderPreference": [
      [
        "setValue(float)",
        "sets the value of the SliderPreference, clamping the input to a range of [0, 1], persisting the value if necessary, and notifying any listeners if the value has changed."
      ],
      [
        "getValue()",
        "returns the value of a float variable named \"mValue\" in the SliderPreference class."
      ],
      [
        "getSummary()",
        "returns a summary based on the current value of the SliderPreference, either from a predefined list of summaries or the default summary of its superclass if no summaries were defined."
      ],
      [
        "setSummary(int)",
        "sets the summary text of the SliderPreference to an array of strings obtained from a resource ID, and if there is an exception, it sets the summary to a string resource ID instead."
      ],
      [
        "setSummary(java.lang.CharSequence)",
        "sets the summary of the SliderPreference widget and resets the internal summaries cache."
      ],
      [
        "setSummary(java.lang.CharSequence[])",
        "sets an array of summary texts for a SliderPreference object."
      ]
    ],
    "class com.fsck.k9.activity.setup.ConnectionSecurityHolder": [
      [
        "toString()",
        "returns a string representation of the connection security type, either from a resource ID or by name."
      ]
    ],
    "class com.fsck.k9.activity.setup.Prefs": [
      [
        "actionPrefs(android.content.Context)",
        "(no description)"
      ],
      [
        "onCreate(android.os.Bundle)",
        "(no description)"
      ]
    ],
    "class com.fsck.k9.activity.setup.OpenPgpAppSelectDialog$OpenPgpAppSelectFragment": [
      [
        "onDismiss(android.content.DialogInterface)",
        "calls the `onSelectProvider()` method with a selected package name when the dialog is dismissed."
      ],
      [
        "onCreateDialog(android.os.Bundle)",
        "creates a dialog box for selecting an OpenPGP provider app and populates it with a list of apps to choose from."
      ],
      [
        "onCreate(android.os.Bundle)",
        "sets the selected package name for OpenPGP provider by calling the method `getOpenPgpProvider()` from K9 class."
      ]
    ],
    "class com.fsck.k9.activity.setup.AuthTypeHolder": [
      [
        "toString()",
        "returns a string representation of an `AuthTypeHolder` object, either from a resource ID or the name of the authentication type."
      ],
      [
        "setInsecure(boolean)",
        "sets the value of the Boolean variable \"insecure\" in the AuthTypeHolder class to the provided boolean value."
      ]
    ],
    "class com.fsck.k9.activity.setup.AccountSetupBasics": [
      [
        "onSaveInstanceState(android.os.Bundle)",
        "saves the state of the account setup basics activity, including the account UUID, provider, and whether incoming email has been checked."
      ],
      [
        "afterTextChanged(android.text.Editable)",
        "calls the `validateFields()` method after the text within an `EditText` field is changed."
      ],
      [
        "onActivityResult(int,int,android.content.Intent)",
        "checks the incoming and outgoing settings of an email account and saves them if they are successful, and then sets the account names and finishes the setup process."
      ],
      [
        "beforeTextChanged(java.lang.CharSequence,int,int,int)",
        "is invoked when the text in an EditText is about to be changed, but it does not perform any action in this implementation."
      ],
      [
        "onClick(android.view.View)",
        "handles the click events of two buttons (next and manual setup) and calls different methods depending on which button was clicked."
      ],
      [
        "onCreate(android.os.Bundle)",
        "sets up the basic elements and listeners for the Account Setup Basics activity in a K-9 email client."
      ],
      [
        "onCreateDialog(int)",
        "creates a dialog box depending on the specified ID and if a provider note is available."
      ],
      [
        "onTextChanged(java.lang.CharSequence,int,int,int)",
        "responds to changes in the text input of a certain field."
      ],
      [
        "actionNewAccount(android.content.Context)",
        "opens the \"New Account\" screen in the K-9 email app when called."
      ],
      [
        "onClientCertificateChanged(java.lang.String)",
        "calls the `validateFields()` method when a client certificate alias is changed in the `AccountSetupBasics` activity."
      ],
      [
        "onCheckedChanged(android.widget.CompoundButton,boolean)",
        "calls several methods to update view visibility, validate field inputs, and display a client certificate spinner if a checkbox is checked in the `AccountSetupBasics` Java class."
      ]
    ]
  },
  "com.fsck.k9.autocrypt": {
    "class com.fsck.k9.autocrypt.AutocryptHeaderParser": [
      [
        "getInstance()",
        "returns a singleton instance of the AutocryptHeaderParser class."
      ]
    ],
    "class com.fsck.k9.autocrypt.AutocryptOperations": [
      [
        "addAutocryptPeerUpdateToIntentIfPresent(com.fsck.k9.mail.Message,android.content.Intent)",
        "checks if a message has a valid Autocrypt header and if so, adds the header data to an intent used for updating Autocrypt peers."
      ],
      [
        "getInstance()",
        "returns a singleton instance of the AutocryptOperations class with an AutocryptHeaderParser object as a parameter."
      ],
      [
        "addAutocryptHeaderToMessage(com.fsck.k9.mail.Message,byte[],java.lang.String,boolean)",
        "adds an Autocrypt header to a given email message."
      ],
      [
        "hasAutocryptHeader(com.fsck.k9.mail.Message)",
        "checks if the given email message has an Autocrypt header."
      ]
    ],
    "class com.fsck.k9.autocrypt.AutocryptOpenPgpApiInteractor": [
      [
        "getInstance()",
        "returns a new instance of the `AutocryptOpenPgpApiInteractor` class."
      ],
      [
        "getKeyMaterialFromApi(org.openintents.openpgp.util.OpenPgpApi,long,java.lang.String)",
        "retrieves key material from an OpenPGP API given a key ID and user ID."
      ]
    ],
    "class com.fsck.k9.autocrypt.AutocryptHeader": [
      [
        "hashCode()",
        "calculates the hash code of an Autocrypt header object based on its key data, address, parameters, and a boolean flag indicating whether mutual encryption is preferred."
      ],
      [
        "equals(java.lang.Object)",
        "returns true if the object being compared is equal to the current object, based on certain conditions and criteria."
      ]
    ]
  },
  "com.fsck.k9.cache": {
    "class com.fsck.k9.cache.TemporaryAttachmentStore": [
      [
        "getFileForWriting(android.content.Context,java.lang.String)",
        "creates a temporary attachment directory in the given context and returns a File object for writing a specified attachment with a sanitized filename."
      ],
      [
        "getFile(android.content.Context,java.lang.String)",
        "returns a temporary attachment file for a given attachment name in the specified context."
      ]
    ],
    "class com.fsck.k9.cache.EmailProviderCacheCursor": [
      [
        "getPosition()",
        "returns the position of the cursor in the email provider cache, taking into account any hidden rows."
      ],
      [
        "moveToNext()",
        "moves the cursor to the next position in the cache and returns a boolean indicating whether or not the move was successful."
      ],
      [
        "moveToPosition(int)",
        "overrides the default `moveToPosition` method of the superclass to correctly handle hidden rows in the cursor."
      ],
      [
        "moveToLast()",
        "moves the cursor to the last position in the cache of email providers."
      ],
      [
        "isLast()",
        "checks if the cursor is currently positioned at the last row of the email provider cache and takes into account any hidden rows."
      ],
      [
        "getInt(int)",
        "returns an integer value for a column index from either a message or thread root in an email provider cache cursor."
      ],
      [
        "moveToFirst()",
        "moves the cursor to the first row of the email provider cache."
      ],
      [
        "move(int)",
        "moves the cursor by the specified offset."
      ],
      [
        "moveToPrevious()",
        "moves the cursor to the previous position in the email provider cache."
      ],
      [
        "getCount()",
        "returns the number of rows in the cursor excluding the hidden rows."
      ]
    ],
    "class com.fsck.k9.cache.EmailProviderCache": [
      [
        "getCache(java.lang.String,android.content.Context)",
        "returns an instance of the EmailProviderCache class for a specific account UUID and context, creating a new instance if one does not already exist."
      ],
      [
        "setValueForThreads(java.util.List,java.lang.String,java.lang.String)",
        "sets a value for a specified column in the email provider cache for a list of thread IDs."
      ],
      [
        "removeValueForThreads(java.util.List,java.lang.String)",
        "removes a specified column value for a list of thread root ids from a thread cache map in the EmailProviderCache class, and removes the map from the cache if it is empty."
      ],
      [
        "hideMessages(java.util.List)",
        "hides a list of local email messages from the user interface and caches the hidden message IDs and folder IDs to be used for future operations."
      ],
      [
        "removeValueForMessages(java.util.List,java.lang.String)",
        "removes a specified column value for a list of email message IDs from the email provider cache."
      ],
      [
        "setValueForMessages(java.util.List,java.lang.String,java.lang.String)",
        "sets a specific value for a given column name in the cache of email messages with the provided message IDs."
      ],
      [
        "getValueForThread(java.lang.Long,java.lang.String)",
        "(no description)"
      ],
      [
        "getValueForMessage(java.lang.Long,java.lang.String)",
        "returns the value of a specified column for a given email message ID from the cache of an email provider."
      ],
      [
        "unhideMessages(java.util.List)",
        "unhides a list of email messages by removing them from the cache of hidden messages if they are currently marked as hidden in their respective folders."
      ],
      [
        "isMessageHidden(java.lang.Long,long)",
        "checks if a message with a given ID is hidden in a specific folder."
      ]
    ]
  },
  "com.fsck.k9.controller": {
    "interface com.fsck.k9.controller.ProgressBodyFactory$ProgressListener": [
      [
        "updateProgress(int)",
        "updates the progress of a task being executed and takes an integer parameter to indicate the current progress."
      ]
    ],
    "class com.fsck.k9.controller.MessagingControllerPushReceiver": [
      [
        "pushError(java.lang.String,java.lang.Exception)",
        "notifies the user of a certificate problem and logs an error message along with a given string and exception."
      ],
      [
        "messagesArrived(com.fsck.k9.mail.Folder,java.util.List)",
        "calls the `messagesArrived` method of the `MessagingController` class with the given account, folder, messages and a boolean value."
      ],
      [
        "messagesRemoved(com.fsck.k9.mail.Folder,java.util.List)",
        "calls the `messagesArrived` method of the `controller` object for the specified `account`, `folder`, and `messages`, with the `isRemove` parameter set to `true`."
      ],
      [
        "sleep(com.fsck.k9.mail.power.TracingPowerManager.TracingWakeLock,long)",
        "puts the thread to sleep for a specified amount of time and releases the wake lock after a timeout period."
      ],
      [
        "getPushState(java.lang.String)",
        "gets the push state of a specified folder in a messaging account using the LocalFolder class from the K9 email client library."
      ],
      [
        "syncFolder(com.fsck.k9.mail.Folder)",
        "synchronizes an email folder using a messaging listener and waits for the synchronization to complete before continuing."
      ],
      [
        "authenticationFailed()",
        "calls the `handleAuthenticationFailure()` method of the `controller` object with the `account` and `true` parameters when authentication fails."
      ],
      [
        "getContext()",
        "returns the context of the MessagingControllerPushReceiver Java class."
      ],
      [
        "messagesFlagsChanged(com.fsck.k9.mail.Folder,java.util.List)",
        "notifies the messaging controller that the flags of one or more messages in a specific folder have changed."
      ],
      [
        "setPushActive(java.lang.String,boolean)",
        "sets the push notification state for a specified email folder in the messaging controller."
      ]
    ],
    "class com.fsck.k9.controller.MemorizingMessagingListener": [
      [
        "setPushActive(com.fsck.k9.Account,java.lang.String,boolean)",
        "sets the pushing state of a memory object based on the active status of a push on a specified account and folder."
      ],
      [
        "pendingCommandsFinished(com.fsck.k9.Account)",
        "marks the processing state of pending commands for a specific email account as finished in the memory of the messaging listener."
      ],
      [
        "synchronizeMailboxFinished(com.fsck.k9.Account,java.lang.String,int,int)",
        "updates the memory object with the syncing state, total number of messages in the mailbox, and number of new messages after synchronization has finished for a specific account and folder."
      ],
      [
        "synchronizeMailboxStarted(com.fsck.k9.Account,java.lang.String)",
        "updates the state of a mailbox synchronization in the given account and folder using a memory object."
      ],
      [
        "pendingCommandStarted(com.fsck.k9.Account,java.lang.String)",
        "synchronizes and updates the processing command title of a messaging listener's memory for a given account."
      ],
      [
        "synchronizeMailboxFailed(com.fsck.k9.Account,java.lang.String,java.lang.String)",
        "updates the synchronizing state and failure message for a specific mailbox of a given account in K9 email app."
      ],
      [
        "sendPendingMessagesStarted(com.fsck.k9.Account)",
        "updates the sending state and resets the folder completion progress for a given email account."
      ],
      [
        "pendingCommandsProcessing(com.fsck.k9.Account)",
        "sets the processing state of the memory for a given email account to \"started\" and resets counters for the number of completed and total folders."
      ],
      [
        "synchronizeMailboxProgress(com.fsck.k9.Account,java.lang.String,int,int)",
        "updates the progress of synchronizing a mailbox folder for a given account."
      ],
      [
        "sendPendingMessagesCompleted(com.fsck.k9.Account)",
        "sets the sending state of an email account's pending messages to \"finished\"."
      ],
      [
        "pendingCommandCompleted(com.fsck.k9.Account,java.lang.String)",
        "resets the processing command title stored in the account's memory once the pending command has been completed."
      ],
      [
        "sendPendingMessagesFailed(com.fsck.k9.Account)",
        "sets the sending state of pending messages for a given email account to \"failed\" in the memory of a messaging listener."
      ]
    ],
    "abstract class com.fsck.k9.controller.SimpleMessagingListener": [
      [
        "setPushActive(com.fsck.k9.Account,java.lang.String,boolean)",
        "sets whether push notifications are enabled for a specific folder in a specific account."
      ],
      [
        "messageUidChanged(com.fsck.k9.Account,java.lang.String,java.lang.String,java.lang.String)",
        "responds to changes in the UID of a message within a specified email folder for a given email account."
      ],
      [
        "sendPendingMessagesFailed(com.fsck.k9.Account)",
        "handles the failure of sending pending messages for a specified email account."
      ],
      [
        "pendingCommandsProcessing(com.fsck.k9.Account)",
        "overrides the `pendingCommandsProcessing` method of the `SimpleMessagingListener` class to perform actions related to pending commands for a specific email account."
      ],
      [
        "sendPendingMessagesCompleted(com.fsck.k9.Account)",
        "overrides the `sendPendingMessagesCompleted` method from the parent class to handle the event of completed pending message sending for a given email account."
      ],
      [
        "listFoldersFailed(com.fsck.k9.Account,java.lang.String)",
        "handles a failed attempt to list folders for a particular email account in the K9 email client."
      ],
      [
        "remoteSearchServerQueryComplete(java.lang.String,int,int)",
        "receives the results of a remote search for messages in a specific folder and processes the retrieved data."
      ],
      [
        "checkMailStarted(android.content.Context,com.fsck.k9.Account)",
        "overrides the `checkMailStarted` method defined in the `SimpleMessagingListener` class and takes a `Context` and `Account` as parameters."
      ],
      [
        "pendingCommandStarted(com.fsck.k9.Account,java.lang.String)",
        "overrides the `pendingCommandStarted` method from a superclass to handle pending commands for a given email `account` and `commandTitle`."
      ],
      [
        "loadAttachmentFailed(com.fsck.k9.Account,com.fsck.k9.mail.Message,com.fsck.k9.mail.Part,java.lang.String)",
        "handles the event of failing to load an attachment in an email message."
      ],
      [
        "checkMailFinished(android.content.Context,com.fsck.k9.Account)",
        "provides a hook for performing actions after the email account has finished checking for new messages."
      ],
      [
        "remoteSearchFinished(java.lang.String,int,int,java.util.List)",
        "handles the results of a remote search performed on a specific email folder."
      ],
      [
        "remoteSearchFailed(java.lang.String,java.lang.String)",
        "handles a failed remote search operation for a specific email folder."
      ],
      [
        "synchronizeMailboxStarted(com.fsck.k9.Account,java.lang.String)",
        "is triggered when email synchronization begins for a specific folder in a particular email account."
      ],
      [
        "synchronizeMailboxNewMessage(com.fsck.k9.Account,java.lang.String,com.fsck.k9.mail.Message)",
        "handles the synchronization of a new email message in a specified mailbox for a given email account."
      ],
      [
        "accountSizeChanged(com.fsck.k9.Account,long,long)",
        "listens for changes to the size of an email account and doesn't perform any action in response."
      ],
      [
        "synchronizeMailboxHeadersFinished(com.fsck.k9.Account,java.lang.String,int,int)",
        "is a placeholder method that gets called when the mailbox header synchronization is finished."
      ],
      [
        "sendPendingMessagesStarted(com.fsck.k9.Account)",
        "overrides the `sendPendingMessagesStarted` method of the `SimpleMessagingListener` abstract class to indicate that sending of pending messages has started for the specified email account."
      ],
      [
        "synchronizeMailboxFailed(com.fsck.k9.Account,java.lang.String,java.lang.String)",
        "is an empty implementation of a method that gets called when synchronizing a mailbox in an email account fails."
      ],
      [
        "enableProgressIndicator(boolean)",
        "allows enabling or disabling a progress indicator in a messaging listener."
      ],
      [
        "synchronizeMailboxProgress(com.fsck.k9.Account,java.lang.String,int,int)",
        "provides progress information during mailbox synchronization for a specified account and folder."
      ],
      [
        "synchronizeMailboxFinished(com.fsck.k9.Account,java.lang.String,int,int)",
        "handles the event when mailbox synchronization is completed for a specific email account and folder."
      ],
      [
        "accountStatusChanged(com.fsck.k9.BaseAccount,com.fsck.k9.AccountStats)",
        "handles changes to the status of a messaging account and its associated statistics."
      ],
      [
        "messageDeleted(com.fsck.k9.Account,java.lang.String,com.fsck.k9.mail.Message)",
        "handles the event of a message being deleted from a specific folder in a specific email account."
      ],
      [
        "pendingCommandsFinished(com.fsck.k9.Account)",
        "overrides the `pendingCommandsFinished` method from the superclass to handle pending commands finishing for a specific email account."
      ],
      [
        "listFoldersStarted(com.fsck.k9.Account)",
        "overrides the `listFoldersStarted()` method from the parent abstract class `SimpleMessagingListener`."
      ],
      [
        "folderStatusChanged(com.fsck.k9.Account,java.lang.String,int)",
        "tracks changes in the status of message folders for a specified email account."
      ],
      [
        "emptyTrashCompleted(com.fsck.k9.Account)",
        "overrides the `emptyTrashCompleted` method of the `SimpleMessagingListener` class to handle the event when the trash folder of a specific account has been emptied."
      ],
      [
        "loadMessageRemoteFailed(com.fsck.k9.Account,java.lang.String,java.lang.String,java.lang.Throwable)",
        "handles an error that occurs when trying to load a message from a remote server."
      ],
      [
        "synchronizeMailboxHeadersProgress(com.fsck.k9.Account,java.lang.String,int,int)",
        "reports the progress of synchronizing mailbox headers in a specific folder for a specific email account."
      ],
      [
        "synchronizeMailboxHeadersStarted(com.fsck.k9.Account,java.lang.String)",
        "overrides the `synchronizeMailboxHeadersStarted` method of the `SimpleMessagingListener` class and takes in an `Account` object and a folder name as parameters."
      ],
      [
        "listFolders(com.fsck.k9.Account,java.util.List)",
        "lists the folders in a given email account using the K9 email client."
      ],
      [
        "listFoldersFinished(com.fsck.k9.Account)",
        "overrides the `listFoldersFinished` method from the `SimpleMessagingListener` abstract class to perform a specific action for a given `Account`."
      ],
      [
        "loadAttachmentFinished(com.fsck.k9.Account,com.fsck.k9.mail.Message,com.fsck.k9.mail.Part)",
        "handles the completion of loading an email attachment for a specific account and message."
      ],
      [
        "systemStatusChanged()",
        "overrides the `systemStatusChanged()` method inherited from the `MessagingListener` class."
      ],
      [
        "synchronizeMailboxRemovedMessage(com.fsck.k9.Account,java.lang.String,com.fsck.k9.mail.Message)",
        "handles the removal of a message from a mailbox during mailbox synchronization for a specific email account."
      ],
      [
        "loadMessageRemoteFinished(com.fsck.k9.Account,java.lang.String,java.lang.String)",
        "handles the notification that a remote message has finished loading for a specific account, folder, and unique ID."
      ],
      [
        "remoteSearchStarted(java.lang.String)",
        "overrides the abstract method `remoteSearchStarted` in the `SimpleMessagingListener` class and takes a folder string as a parameter to indicate that a remote search has started."
      ],
      [
        "updateProgress(int)",
        "overrides the abstract method `updateProgress(int)` from the parent class and leaves the implementation empty."
      ],
      [
        "pendingCommandCompleted(com.fsck.k9.Account,java.lang.String)",
        "is called when a pending command for a specified email account has been completed."
      ],
      [
        "listLocalMessagesAddMessages(com.fsck.k9.Account,java.lang.String,java.util.List)",
        "adds a list of local messages to a specific folder for a given email account."
      ],
      [
        "searchStats(com.fsck.k9.AccountStats)",
        "overrides the `searchStats` method from the `SimpleMessagingListener` class to perform a specific action with a given `AccountStats` object."
      ]
    ],
    "class com.fsck.k9.controller.PendingCommandSerializer": [
      [
        "unserialize(long,java.lang.String,java.lang.String)",
        "deserializes a pending command object from JSON data and sets its database ID."
      ],
      [
        "serialize(com.fsck.k9.controller.MessagingControllerCommands$PendingCommand)",
        "serializes a given `PendingCommand` object into a JSON string using a `JsonAdapter` instance retrieved from a map of adapters based on the `PendingCommand`'s command name."
      ],
      [
        "getInstance()",
        "returns an instance of the `PendingCommandSerializer` class."
      ]
    ],
    "class com.fsck.k9.controller.MessagingControllerCommands$PendingMoveOrCopy": [
      [
        "create(java.lang.String,java.lang.String,boolean,java.util.Map)",
        "creates a new instance of the `PendingMoveOrCopy` class with the given source folder, destination folder, flag for copy/move, and UID map."
      ],
      [
        "create(java.lang.String,java.lang.String,boolean,java.util.List)",
        "creates a new instance of `PendingMoveOrCopy` with the given source folder, destination folder, boolean flag, and list of uids."
      ],
      [
        "getCommandName()",
        "returns the name of a messaging controller command for a pending move or copy operation."
      ],
      [
        "execute(com.fsck.k9.controller.MessagingController,com.fsck.k9.Account)",
        "calls the `processPendingMoveOrCopy` method of the `MessagingController` class with the current `PendingMoveOrCopy` and `Account` as parameters."
      ]
    ],
    "class com.fsck.k9.controller.MessagingControllerCommands$PendingEmptyTrash": [
      [
        "create()",
        "creates a new instance of the `PendingEmptyTrash` class."
      ],
      [
        "execute(com.fsck.k9.controller.MessagingController,com.fsck.k9.Account)",
        "executes the process of emptying the trash for a specific email account using the K-9 Mail client."
      ],
      [
        "getCommandName()",
        "returns the name of the command to empty the trash in an email messaging controller."
      ]
    ],
    "class com.fsck.k9.controller.MessagingControllerCommands$PendingMarkAllAsRead": [
      [
        "create(java.lang.String)",
        "creates a new instance of the class `PendingMarkAllAsRead` with the provided folder name."
      ],
      [
        "execute(com.fsck.k9.controller.MessagingController,com.fsck.k9.Account)",
        "executes the pending mark all as read command by processing it with the messaging controller and the specified account."
      ],
      [
        "getCommandName()",
        "returns the name of the command \"mark all as read\" in the messaging controller commands."
      ]
    ],
    "abstract class com.fsck.k9.controller.MessagingControllerCommands$PendingCommand": [
      [
        "getCommandName()",
        "returns the name of the command that is pending in the messaging controller."
      ],
      [
        "execute(com.fsck.k9.controller.MessagingController,com.fsck.k9.Account)",
        "executes a pending command on a messaging controller for a specific account."
      ]
    ],
    "interface com.fsck.k9.controller.MessagingListener": [
      [
        "synchronizeMailboxNewMessage(com.fsck.k9.Account,java.lang.String,com.fsck.k9.mail.Message)",
        "synchronizes a new message in a specified mailbox/folder for a given email account."
      ],
      [
        "pendingCommandsProcessing(com.fsck.k9.Account)",
        "notifies the listener that pending commands are being processed for a given email account."
      ],
      [
        "setPushActive(com.fsck.k9.Account,java.lang.String,boolean)",
        "sets the push notification feature to active or inactive for a specific folder in a K-9 email account."
      ],
      [
        "pendingCommandsFinished(com.fsck.k9.Account)",
        "notifies the listener when all pending IMAP commands have been completed for a given email account."
      ],
      [
        "listFoldersFailed(com.fsck.k9.Account,java.lang.String)",
        "is called when listing the folders of an email account fails, and it provides the account and an error message as parameters."
      ],
      [
        "loadMessageRemoteFinished(com.fsck.k9.Account,java.lang.String,java.lang.String)",
        "notifies the listener when a remote message has finished loading in the specified account and folder with a given unique identifier."
      ],
      [
        "loadAttachmentFailed(com.fsck.k9.Account,com.fsck.k9.mail.Message,com.fsck.k9.mail.Part,java.lang.String)",
        "notifies the listener that an attempt to load an email attachment has failed."
      ],
      [
        "synchronizeMailboxHeadersFinished(com.fsck.k9.Account,java.lang.String,int,int)",
        "notifies the listener when header synchronization has finished for a specific mailbox in K9 email client."
      ],
      [
        "checkMailStarted(android.content.Context,com.fsck.k9.Account)",
        "notifies when the process of checking email has started for a specific email account in the K-9 Mail client."
      ],
      [
        "loadMessageRemoteFailed(com.fsck.k9.Account,java.lang.String,java.lang.String,java.lang.Throwable)",
        "triggers when there is a failure in loading a remote email message, providing the account, folder, unique ID, and error information."
      ],
      [
        "messageUidChanged(com.fsck.k9.Account,java.lang.String,java.lang.String,java.lang.String)",
        "notifies the listener that the UID for a message has changed in a specific folder of a specific account."
      ],
      [
        "remoteSearchServerQueryComplete(java.lang.String,int,int)",
        "notifies the listener that a remote search server query has been completed for a specific folder and provides information about the number of results and maximum number of results."
      ],
      [
        "folderStatusChanged(com.fsck.k9.Account,java.lang.String,int)",
        "notifies the listener that the status of a folder (i.e. the number of unread messages) in a particular email account has changed."
      ],
      [
        "listFoldersStarted(com.fsck.k9.Account)",
        "notifies the `MessagingListener` interface implementation that a folder listing operation has started for the specified account."
      ],
      [
        "enableProgressIndicator(boolean)",
        "enables or disables a progress indicator for messaging tasks."
      ],
      [
        "synchronizeMailboxRemovedMessage(com.fsck.k9.Account,java.lang.String,com.fsck.k9.mail.Message)",
        "synchronizes the removal of a message from a specific folder in a K9 email account."
      ],
      [
        "synchronizeMailboxHeadersProgress(com.fsck.k9.Account,java.lang.String,int,int)",
        "reports the progress of synchronizing mailbox headers to the listener for a specific account and folder."
      ],
      [
        "emptyTrashCompleted(com.fsck.k9.Account)",
        "notifies that the trash folder of a specific email account has been successfully emptied."
      ],
      [
        "systemStatusChanged()",
        "notifies the listener when the system status changes."
      ],
      [
        "loadAttachmentFinished(com.fsck.k9.Account,com.fsck.k9.mail.Message,com.fsck.k9.mail.Part)",
        "notifies the listener when an attachment loading process has finished."
      ],
      [
        "synchronizeMailboxProgress(com.fsck.k9.Account,java.lang.String,int,int)",
        "synchronizes the progress of updating a mailbox for a specific account and folder."
      ],
      [
        "sendPendingMessagesCompleted(com.fsck.k9.Account)",
        "notifies the listener when sending pending messages has been completed for a specific email account."
      ],
      [
        "synchronizeMailboxHeadersStarted(com.fsck.k9.Account,java.lang.String)",
        "notifies when mailbox headers synchronization has started for a given account and folder."
      ],
      [
        "remoteSearchFinished(java.lang.String,int,int,java.util.List)",
        "notifies the listener that a remote search for messages in a specific folder has finished and provides the number of results, the maximum number of results, and any extra results found."
      ],
      [
        "synchronizeMailboxStarted(com.fsck.k9.Account,java.lang.String)",
        "notifies the listener that mailbox synchronization has started for a particular account and folder."
      ],
      [
        "searchStats(com.fsck.k9.AccountStats)",
        "accepts and processes statistics related to a search operation in a messaging account."
      ],
      [
        "pendingCommandCompleted(com.fsck.k9.Account,java.lang.String)",
        "notifies when a pending command has been completed for a given email account with the specified command title."
      ],
      [
        "messageDeleted(com.fsck.k9.Account,java.lang.String,com.fsck.k9.mail.Message)",
        "notifies the listener that a message has been deleted from a specified folder in an email account."
      ],
      [
        "checkMailFinished(android.content.Context,com.fsck.k9.Account)",
        "notifies the messaging listener that checking email has finished for a given account in the K-9 email client."
      ],
      [
        "remoteSearchStarted(java.lang.String)",
        "notifies listeners that a remote search has started for a specific folder."
      ],
      [
        "updateProgress(int)",
        "updates the progress of a messaging operation."
      ],
      [
        "listFolders(com.fsck.k9.Account,java.util.List)",
        "lists the folders associated with a K9 email account."
      ],
      [
        "remoteSearchFailed(java.lang.String,java.lang.String)",
        "(no description)"
      ],
      [
        "listFoldersFinished(com.fsck.k9.Account)",
        "notifies when the process of listing folders for a specific email account has finished."
      ],
      [
        "sendPendingMessagesStarted(com.fsck.k9.Account)",
        "notifies when sending pending messages has started for a specific account in an email client application."
      ],
      [
        "accountSizeChanged(com.fsck.k9.Account,long,long)",
        "notifies when the size of an email account has changed."
      ],
      [
        "synchronizeMailboxFailed(com.fsck.k9.Account,java.lang.String,java.lang.String)",
        "notifies the listener that synchronizing a mailbox has failed for a specific account and folder with a given error message."
      ],
      [
        "sendPendingMessagesFailed(com.fsck.k9.Account)",
        "notifies the listener that sending pending messages for the specified account has failed."
      ],
      [
        "synchronizeMailboxFinished(com.fsck.k9.Account,java.lang.String,int,int)",
        "notifies when a mailbox synchronization has finished and provides information on the number of total messages in the mailbox and the number of new messages."
      ],
      [
        "accountStatusChanged(com.fsck.k9.BaseAccount,com.fsck.k9.AccountStats)",
        "notifies the implementation of changes to the status of an email account, including its statistics."
      ],
      [
        "listLocalMessagesAddMessages(com.fsck.k9.Account,java.lang.String,java.util.List)",
        "adds local messages to a list of messages for a specific account and folder in the K-9 email client."
      ],
      [
        "pendingCommandStarted(com.fsck.k9.Account,java.lang.String)",
        "notifies the listener that a pending command has started for a specific account."
      ]
    ],
    "interface com.fsck.k9.controller.MessagingController$MessageActor": [
      [
        "act(com.fsck.k9.Account,com.fsck.k9.mailstore.LocalFolder,java.util.List)",
        "takes an account, message folder, and list of messages as input and performs an action on those messages within the given account and folder."
      ]
    ],
    "class com.fsck.k9.controller.MessagingControllerCommands$PendingAppend": [
      [
        "getCommandName()",
        "returns the name of the append command for the MessagingControllerCommands class."
      ],
      [
        "create(java.lang.String,java.lang.String)",
        "creates a new instance of the class `PendingAppend` with the provided folder name and UID."
      ],
      [
        "execute(com.fsck.k9.controller.MessagingController,com.fsck.k9.Account)",
        "executes a pending append operation using a messaging controller and an account."
      ]
    ],
    "class com.fsck.k9.controller.MessagingController$Command": [
      [
        "compareTo(com.fsck.k9.controller.MessagingController$Command)",
        "compares two MessagingController commands based on their priority and sequence number."
      ]
    ],
    "class com.fsck.k9.controller.UidReverseComparator": [
      [
        "compare(com.fsck.k9.mail.Message,com.fsck.k9.mail.Message)",
        "compares two email messages based on their UID in reverse order."
      ]
    ],
    "class com.fsck.k9.controller.MessagingController": [
      [
        "getAccountStats(android.content.Context,com.fsck.k9.Account,com.fsck.k9.controller.MessagingListener)",
        "gets the email account statistics asynchronously and notifies the messaging listener."
      ],
      [
        "copyMessage(com.fsck.k9.Account,java.lang.String,com.fsck.k9.activity.MessageReference,java.lang.String)",
        "copies a message from a source folder to a destination folder in the context of a specific email account."
      ],
      [
        "listFoldersSynchronous(com.fsck.k9.Account,boolean,com.fsck.k9.controller.MessagingListener)",
        "lists local and remote folders for a given email account, calling a callback function for local folders and caching the remote folder list for future use."
      ],
      [
        "getPushers()",
        "returns a collection of Pusher objects stored in the pushers map."
      ],
      [
        "getId(com.fsck.k9.mail.Message)",
        "returns the ID of a given email message, either by retrieving its database ID if it is a LocalMessage or returning an invalid ID if it is not."
      ],
      [
        "isCopyCapable(com.fsck.k9.activity.MessageReference)",
        "checks if a message reference is capable of being copied."
      ],
      [
        "moveMessage(com.fsck.k9.Account,java.lang.String,com.fsck.k9.activity.MessageReference,java.lang.String)",
        "moves a single email message from a source folder to a destination folder for a specified email account using the `moveMessages` method of the `MessagingController` class."
      ],
      [
        "copyMessagesInThread(com.fsck.k9.Account,java.lang.String,java.util.List,java.lang.String)",
        "copies a list of email messages from one folder to another within the same email thread."
      ],
      [
        "isCopyCapable(com.fsck.k9.Account)",
        "checks if an email account is capable of copying messages between different email servers."
      ],
      [
        "recreate(com.fsck.k9.Account,com.fsck.k9.controller.MessagingListener)",
        "recreates the local store for a given email account and updates its size and status, while notifying any messaging listeners of the changes."
      ],
      [
        "checkMail(android.content.Context,com.fsck.k9.Account,boolean,boolean,com.fsck.k9.controller.MessagingListener)",
        "checks mail for one or multiple accounts and notifies listeners of the start and finish."
      ],
      [
        "debugClearMessagesLocally(java.util.List)",
        "clears the local data for a list of messages for debugging purposes."
      ],
      [
        "expunge(com.fsck.k9.Account,java.lang.String)",
        "runs a background task to expunge or permanently delete all deleted messages in a specified email folder for a given email account in the K-9 Mail Android app."
      ],
      [
        "markAllMessagesRead(com.fsck.k9.Account,java.lang.String)",
        "marks all messages in a specified folder of a specified email account as read."
      ],
      [
        "setupPushing(com.fsck.k9.Account)",
        "sets up pushing for a given email account by checking folder modes and starting a pusher if conditions are met."
      ],
      [
        "getSearchAccountStatsSynchronous(com.fsck.k9.search.SearchAccount,com.fsck.k9.controller.MessagingListener)",
        "collects the number of unread and flagged messages for a given search across multiple email accounts and returns an AccountStats object containing that information."
      ],
      [
        "deleteMessage(com.fsck.k9.activity.MessageReference,com.fsck.k9.controller.MessagingListener)",
        "deletes a specific message using its reference and calls a MessagingListener to handle the action."
      ],
      [
        "getCheckMailListener()",
        "returns the `com.fsck.k9.controller.MessagingListener` instance assigned to the `checkMailListener` attribute."
      ],
      [
        "setFlagForThreads(com.fsck.k9.Account,java.util.List,com.fsck.k9.mail.Flag,boolean)",
        "sets a flag for a list of email threads in a specified mail account, updating both the cache and the remote server in a separate thread."
      ],
      [
        "loadSearchResults(com.fsck.k9.Account,java.lang.String,java.util.List,com.fsck.k9.controller.MessagingListener)",
        "loads search results based on the specified account, folder, messages, and listener."
      ],
      [
        "saveDraft(com.fsck.k9.Account,com.fsck.k9.mail.Message,long,boolean)",
        "saves a draft message to a local store and, optionally, remotely."
      ],
      [
        "isMoveCapable(com.fsck.k9.activity.MessageReference)",
        "checks if a message is capable of being moved."
      ],
      [
        "sendAlternate(android.content.Context,com.fsck.k9.Account,com.fsck.k9.mailstore.LocalMessage)",
        "creates and sends an alternate version of a message in a new email, with quoted text, recipients, and subject pre-filled."
      ],
      [
        "getListeners(com.fsck.k9.controller.MessagingListener)",
        "returns a set of all the messaging listeners, including a new listener if one is provided."
      ],
      [
        "deleteMessages(java.util.List,com.fsck.k9.controller.MessagingListener)",
        "deletes a list of email messages and updates the messaging listener."
      ],
      [
        "isMoveCapable(com.fsck.k9.Account)",
        "determines whether an email account is capable of performing email message moves."
      ],
      [
        "systemStatusChanged()",
        "notifies all messaging listeners about a change in the system status."
      ],
      [
        "searchLocalMessages(com.fsck.k9.search.LocalSearch,com.fsck.k9.controller.MessagingListener)",
        "searches for all messages in any local account that match a specific query and executes the search in a separate thread."
      ],
      [
        "cancelNotificationForMessage(com.fsck.k9.Account,com.fsck.k9.activity.MessageReference)",
        "removes a new mail notification for a specific email message in the K-9 Mail app."
      ],
      [
        "setCheckMailListener(com.fsck.k9.controller.MessagingListener)",
        "sets a listener for checking email in a messaging controller."
      ],
      [
        "listFolders(com.fsck.k9.Account,boolean,com.fsck.k9.controller.MessagingListener)",
        "lists local and remote folders available for a given account and executes a callback for each folder."
      ],
      [
        "removeListener(com.fsck.k9.controller.MessagingListener)",
        "removes a messaging listener from the list of listeners for this messaging controller."
      ],
      [
        "sendPendingMessages(com.fsck.k9.Account,com.fsck.k9.controller.MessagingListener)",
        "attempts to send any messages in the Outbox for a specific email account in a background thread."
      ],
      [
        "compact(com.fsck.k9.Account,com.fsck.k9.controller.MessagingListener)",
        "compacts the local mail store of a given account and notifies listeners of the new size."
      ],
      [
        "messagesArrived(com.fsck.k9.Account,com.fsck.k9.mail.Folder,java.util.List,boolean)",
        "downloads new email messages and updates the local email folder when new messages arrive for a specific email account through a push notification."
      ],
      [
        "deleteAccount(com.fsck.k9.Account)",
        "deletes a K-9 Mail account and removes it from the list of accounts being monitored for new mail notifications."
      ],
      [
        "loadMessageRemote(com.fsck.k9.Account,java.lang.String,java.lang.String,com.fsck.k9.controller.MessagingListener)",
        "loads a message from a remote email server for a specific account, folder, and message UID, while also accepting a listener for handling messaging events, and puts it into a queue for a synchronous load."
      ],
      [
        "clearFolder(com.fsck.k9.Account,java.lang.String,com.fsck.k9.activity.ActivityListener)",
        "clears a specific folder in an email account for the K-9 email client."
      ],
      [
        "getFolderUnreadMessageCount(com.fsck.k9.Account,java.lang.String,com.fsck.k9.controller.MessagingListener)",
        "retrieves the number of unread messages in a specified folder for a given email account and notifies a messaging listener."
      ],
      [
        "addListener(com.fsck.k9.controller.MessagingListener)",
        "adds a messaging listener to the messaging controller and refreshes it."
      ],
      [
        "loadMessage(com.fsck.k9.Account,java.lang.String,java.lang.String)",
        "loads a message from a local store for a given account, folder and UID, and performs various actions on the message before returning it."
      ],
      [
        "setFlag(com.fsck.k9.Account,java.util.List,com.fsck.k9.mail.Flag,boolean)",
        "sets a specified flag for a list of email messages in a given email account asynchronously and also updates it in the cache."
      ],
      [
        "refreshListener(com.fsck.k9.controller.MessagingListener)",
        "refreshes a messaging listener by calling the `refreshOther` method of a `MemorizingMessagingListener` object."
      ],
      [
        "deleteDraft(com.fsck.k9.Account,long)",
        "deletes a draft email message from a specific email account."
      ],
      [
        "loadMoreMessages(com.fsck.k9.Account,java.lang.String,com.fsck.k9.controller.MessagingListener)",
        "loads more messages for a given email account and folder using the account's local store and handles exceptions if any."
      ],
      [
        "moveMessagesInThread(com.fsck.k9.Account,java.lang.String,java.util.List,java.lang.String)",
        "moves a group of messages in a thread from a source folder to a destination folder for a specified email account."
      ],
      [
        "searchRemoteMessages(java.lang.String,java.lang.String,java.lang.String,java.util.Set,java.util.Set,com.fsck.k9.controller.MessagingListener)",
        "searches for remote messages in a specified email account and folder, based on a query and specified flag criteria, and returns a future task that executes the search operation asynchronously."
      ],
      [
        "emptyTrash(com.fsck.k9.Account,com.fsck.k9.controller.MessagingListener)",
        "empties the trash folder for a given email account and notifies listeners of the completion."
      ],
      [
        "sendMessage(com.fsck.k9.Account,com.fsck.k9.mail.Message,com.fsck.k9.controller.MessagingListener)",
        "sends the given message by storing it in the Outbox and attempting to send it through the sendPendingMessages command."
      ],
      [
        "notifyUserIfCertificateProblem(com.fsck.k9.Account,java.lang.Exception,boolean)",
        "checks if an exception is a certificate validation exception, and if it is and needs user attention, it shows a notification about the certificate error."
      ],
      [
        "loadMessageRemotePartial(com.fsck.k9.Account,java.lang.String,java.lang.String,com.fsck.k9.controller.MessagingListener)",
        "loads a partial email message from a remote email server using a specified account, folder, and unique ID, and notifies a messaging listener of the progress."
      ],
      [
        "loadAttachment(com.fsck.k9.Account,com.fsck.k9.mailstore.LocalMessage,com.fsck.k9.mail.Part,com.fsck.k9.controller.MessagingListener)",
        "loads an attachment from a remote email server and saves it locally for a specified user account."
      ],
      [
        "clearAllPending(com.fsck.k9.Account)",
        "clears all pending commands for a specified email account."
      ],
      [
        "synchronizeMailbox(com.fsck.k9.Account,java.lang.String,com.fsck.k9.controller.MessagingListener,com.fsck.k9.mail.Folder)",
        "starts a background synchronization of a specified folder for a given email account."
      ],
      [
        "moveMessages(com.fsck.k9.Account,java.lang.String,java.util.List,java.lang.String)",
        "moves a list of messages from one folder to another folder in a given email account."
      ],
      [
        "stopAllPushing()",
        "stops all instances of email push notifications that are currently active in the app."
      ],
      [
        "copyMessages(com.fsck.k9.Account,java.lang.String,java.util.List,java.lang.String)",
        "copies a list of email messages from one folder to another within the same email account in a background thread."
      ],
      [
        "getInstance(android.content.Context)",
        "returns an instance of the MessagingController class and initializes it if it hasn't been already."
      ],
      [
        "setFlag(com.fsck.k9.Account,java.lang.String,java.lang.String,com.fsck.k9.mail.Flag,boolean)",
        "sets or removes a flag for a message in a specified folder for a specified account."
      ],
      [
        "setFlag(com.fsck.k9.Account,java.lang.String,java.util.List,com.fsck.k9.mail.Flag,boolean)",
        "sets or removes a flag for a set of messages in a specific folder for a given email account."
      ],
      [
        "cancelNotificationsForAccount(com.fsck.k9.Account)",
        "cancels all new mail notifications for a specific K-9 Mail account."
      ],
      [
        "deleteThreads(java.util.List)",
        "deletes threads of messages grouped by account and folder in a background thread."
      ],
      [
        "sendPendingMessages(com.fsck.k9.controller.MessagingListener)",
        "sends any pending messages for all available accounts, using a provided messaging listener."
      ],
      [
        "clear(com.fsck.k9.Account,com.fsck.k9.controller.MessagingListener)",
        "clears all messages and updates account statistics for a given email account in the background using a messaging listener."
      ],
      [
        "getListeners()",
        "returns a set of messaging listeners assigned to the MessagingController class in Java."
      ],
      [
        "clearCertificateErrorNotifications(com.fsck.k9.Account,com.fsck.k9.activity.setup.AccountSetupCheckSettings$CheckDirection)",
        "clears any certificate error notifications for a specific email account and check direction (incoming or outgoing)."
      ],
      [
        "getSearchAccountStats(com.fsck.k9.search.SearchAccount,com.fsck.k9.controller.MessagingListener)",
        "asynchronously retrieves statistics for a search account and passes them to a messaging listener."
      ]
    ],
    "class com.fsck.k9.controller.MessagingControllerCommands$PendingExpunge": [
      [
        "getCommandName()",
        "returns the name of the command for expunging pending messages."
      ],
      [
        "create(java.lang.String)",
        "creates a new instance of `PendingExpunge` with the given `folderName`."
      ],
      [
        "execute(com.fsck.k9.controller.MessagingController,com.fsck.k9.Account)",
        "calls the `processPendingExpunge` method of the `MessagingController` with the passed `PendingExpunge` object and `Account` object as parameters."
      ]
    ],
    "class com.fsck.k9.controller.MessagingControllerCommands$PendingSetFlag": [
      [
        "create(java.lang.String,boolean,com.fsck.k9.mail.Flag,java.util.List)",
        "creates a new instance of a pending set flag command for a specified email folder with a given set of flags."
      ],
      [
        "getCommandName()",
        "returns the name of the command for setting a flag in a messaging controller."
      ],
      [
        "execute(com.fsck.k9.controller.MessagingController,com.fsck.k9.Account)",
        "executes the pending set flag command through the messaging controller for a specified account."
      ]
    ]
  },
  "com.fsck.k9.crypto": {
    "class com.fsck.k9.crypto.MessageCryptoStructureDetector": [
      [
        "findPrimaryEncryptedOrSignedPart(com.fsck.k9.mail.Part,java.util.List)",
        "finds the primary encrypted or signed part within a given email message, and if found, returns it or else it returns a null value."
      ],
      [
        "getSignatureData(com.fsck.k9.mail.Part)",
        "extracts the signature data from a multipart-signed email message part."
      ],
      [
        "isMultipartSignedOpenPgpProtocol(com.fsck.k9.mail.Part)",
        "checks if a given email message part is a multipart/signed OpenPGP protocol."
      ],
      [
        "isPartPgpInlineEncrypted(com.fsck.k9.mail.Part)",
        "checks if a given email message part is encrypted using PGP in inline format."
      ],
      [
        "findMultipartEncryptedParts(com.fsck.k9.mail.Part)",
        "finds all the parts within a given email that are encrypted using multipart encryption and returns a list of those parts."
      ],
      [
        "isMultipartEncryptedOpenPgpProtocol(com.fsck.k9.mail.Part)",
        "checks if a given email message part is a multipart/encrypted OpenPGP protocol."
      ],
      [
        "isPartMultipartEncrypted(com.fsck.k9.mail.Part)",
        "checks whether a given email message part is a multipart encrypted message according to specific criteria."
      ],
      [
        "findMultipartSignedParts(com.fsck.k9.mail.Part,com.fsck.k9.ui.crypto.MessageCryptoAnnotations)",
        "finds all the multipart signed parts in a given email message."
      ],
      [
        "findPgpInlineParts(com.fsck.k9.mail.Part)",
        "finds all parts of an email that are encrypted or signed using PGP inline encryption/signature and returns them in a list."
      ]
    ],
    "class com.fsck.k9.crypto.OpenPgpApiHelper": [
      [
        "buildUserId(com.fsck.k9.Identity)",
        "builds a user ID string for use with the OpenPgp API's EXTRA_ACCOUNT_NAME parameter, based on the display name and email address of a given identity object."
      ]
    ]
  },
  "com.fsck.k9.fragment": {
    "class com.fsck.k9.fragment.MessageListFragment": [
      [
        "dialogCancelled(int)",
        "calls the `doNegativeClick()` method when a dialog is cancelled."
      ],
      [
        "onCreateView(android.view.LayoutInflater,android.view.ViewGroup,android.os.Bundle)",
        "inflates and initializes the layout for the message list fragment, including setting up pull to refresh functionality."
      ],
      [
        "onSwipeRightToLeft(android.view.MotionEvent,android.view.MotionEvent)",
        "handles a right-to-left swipe gesture as an un-select action in the MessageListFragment of the K9 email client."
      ],
      [
        "onContextItemSelected(android.view.MenuItem)",
        "handles selected items in a context menu in a message list fragment and executes different actions based on the chosen menu item."
      ],
      [
        "isFirst(com.fsck.k9.activity.MessageReference)",
        "checks whether the given message is the first message in the message list or not."
      ],
      [
        "isOutbox()",
        "checks if the current folder is the outbox folder for the account."
      ],
      [
        "onMoveUp()",
        "moves the selected item or the first visible item in a listview up by one position."
      ],
      [
        "onCreate(android.os.Bundle)",
        "initializes the `MessageListFragment`, sets some preferences, and creates a cache broadcast receiver."
      ],
      [
        "onAttach(android.app.Activity)",
        "attaches the activity context and listener to the MessageListFragment."
      ],
      [
        "onCycleSort()",
        "cycles through the available sort types for a message list and sets the new sort type."
      ],
      [
        "isLoadFinished()",
        "checks if the loading process for the cursor is finished in the MessageListFragment."
      ],
      [
        "isCheckMailSupported()",
        "determines whether checking mail is supported based on account and folder modes."
      ],
      [
        "isMarkAllAsReadSupported()",
        "checks if marking all messages as read is supported in the current single account and folder mode."
      ],
      [
        "openPrevious(com.fsck.k9.activity.MessageReference)",
        "opens the previous message in a message list based on a given message reference."
      ],
      [
        "selectAll()",
        "selects all messages in the message list."
      ],
      [
        "onActivityCreated(android.os.Bundle)",
        "initializes the MessageListFragment by setting up a cursor loader for each email account and initializing message sorting settings."
      ],
      [
        "confirmMarkAllAsRead()",
        "prompts for user confirmation before marking all messages as read in a message list."
      ],
      [
        "onItemClick(android.widget.AdapterView,android.view.View,int,long)",
        "handles item clicks in the message list view."
      ],
      [
        "onActivityResult(int,int,android.content.Intent)",
        "handles the result of choosing a folder to move or copy messages to."
      ],
      [
        "isManualSearch()",
        "returns a boolean value indicating whether the search being performed is a manual search or not."
      ],
      [
        "onDestroyView()",
        "saves the state of the message list view before the fragment is destroyed."
      ],
      [
        "onSearchRequested()",
        "starts a search for messages in the current folder of a specific email account using a listener."
      ],
      [
        "newInstance(com.fsck.k9.search.LocalSearch,boolean,boolean)",
        "creates a new instance of the `MessageListFragment` class with the specified search, display type, and threading settings as arguments."
      ],
      [
        "onLoaderReset(android.content.Loader)",
        "resets the loader by clearing the selected items and swapping out the cursor adapter."
      ],
      [
        "isSingleAccountMode()",
        "returns a boolean value indicating whether the fragment is in single account mode or not."
      ],
      [
        "onLoadFinished(android.content.Loader,android.database.Cursor)",
        "populates and updates the message list UI based on the data returned from a database cursor."
      ],
      [
        "onCompose()",
        "opens a compose window for a specific email account or a default account if there is no query string."
      ],
      [
        "openNext(com.fsck.k9.activity.MessageReference)",
        "opens the next message from the current message reference in the message list."
      ],
      [
        "checkMail()",
        "checks for new emails and synchronizes mailboxes for one or more accounts, and sends pending messages for the current account if in single account and single folder mode."
      ],
      [
        "doPositiveClick(int)",
        "handles the positive button click for different types of confirmation dialogs in the message list fragment and executes appropriate actions based on the dialog IDs."
      ],
      [
        "onOptionsItemSelected(android.view.MenuItem)",
        "handles the selection and execution of various options in the menu of a message list fragment."
      ],
      [
        "onRemoteSearch()",
        "checks for network connectivity before initiating a remote search and displays a toast message if there is no network."
      ],
      [
        "isLast(com.fsck.k9.activity.MessageReference)",
        "checks if a given message is the last message in the message list fragment."
      ],
      [
        "onCreateLoader(int,android.os.Bundle)",
        "creates a loader for loading messages from the given account with the given search query."
      ],
      [
        "onPause()",
        "unregisters a local broadcast receiver, pauses the activity listener and removes the messaging controller listener."
      ],
      [
        "isRemoteSearch()",
        "returns a boolean value indicating whether a remote search has been performed or not."
      ],
      [
        "onSwipeLeftToRight(android.view.MotionEvent,android.view.MotionEvent)",
        "handles a left-to-right swipe as a select action in a message list fragment in an Android app."
      ],
      [
        "setActiveMessage(com.fsck.k9.activity.MessageReference)",
        "marks a message as active and reloads the message list with a modified query that includes the active message and redraws the list."
      ],
      [
        "onReverseSort()",
        "calls the `changeSort()` method with the current `sortType` as its parameter."
      ],
      [
        "onResume()",
        "refreshes messages for the currently open folder and updates message count and read status."
      ],
      [
        "isAccountExpungeCapable()",
        "checks if the email account associated with the current MessageListFragment is capable of expunging messages."
      ],
      [
        "isRemoteSearchAllowed()",
        "determines if remote searching is allowed for the current message list based on various factors including whether the search is manual, if remote searching has already been performed, and if the message list is in single folder mode."
      ],
      [
        "onToggleFlagged()",
        "toggles the flagged status of a message in the message list."
      ],
      [
        "toggleMessageSelect()",
        "calls the method `toggleMessageSelect(int position)` with the position of the currently selected item in the `listView` as its argument to toggle the selection state of the message."
      ],
      [
        "isSingleFolderMode()",
        "returns the value of the boolean variable `singleFolderMode`."
      ],
      [
        "onSendPendingMessages()",
        "sends any unsent or pending messages for the specified email account."
      ],
      [
        "onCopy()",
        "copies the content of a selected message in the MessageListFragment."
      ],
      [
        "doNegativeClick(int)",
        "handles negative button clicks in a message list fragment and nullifies a reference to active messages in cases where spam or delete confirmation dialogs are dismissed."
      ],
      [
        "isRemoteFolder()",
        "determines if the current folder being viewed is a remote folder or not."
      ],
      [
        "onCreateContextMenu(android.view.ContextMenu,android.view.View,android.view.ContextMenu.ContextMenuInfo)",
        "creates a context menu for a list of messages and sets various options like marking as read, copying, moving, flagging or archiving depending on the account capabilities."
      ],
      [
        "changeSort(com.fsck.k9.Account$SortType)",
        "(no description)"
      ],
      [
        "onMoveDown()",
        "moves the selection of the list view down one position."
      ],
      [
        "updateTitle()",
        "updates the title and progress of the window in the MessageListFragment based on whether the search is manual or not."
      ],
      [
        "updateFooter(java.lang.String)",
        "updates the footer text in a MessageListFragment if the footerView is not null."
      ],
      [
        "onMove()",
        "gets the currently selected message and moves it."
      ],
      [
        "onStop()",
        "performs cleanup tasks when leaving a remote search result screen, including cancelling any remote search in progress and closing the associated folder."
      ],
      [
        "onToggleRead()",
        "toggles the read status of a message in the message list by calling the `onToggleFlag()` method with the `Flag.SEEN` flag and the `READ_COLUMN` projection info."
      ],
      [
        "onSaveInstanceState(android.os.Bundle)",
        "saves various states and information related to the MessageListFragment instance into a Bundle."
      ],
      [
        "isInitialized()",
        "returns a boolean value indicating whether the MessageListFragment is initialized or not."
      ],
      [
        "onArchive()",
        "archives a selected message in the message list."
      ],
      [
        "onExpunge()",
        "calls the `onExpunge()` method with the current account and folder name, if the current folder is not null."
      ],
      [
        "onDelete()",
        "deletes the currently selected email message(s) if any."
      ]
    ],
    "class com.fsck.k9.fragment.MessageListFragmentComparators$SenderComparator": [
      [
        "compare(android.database.Cursor,android.database.Cursor)",
        "compares the sender addresses obtained from two cursor objects and returns an integer value indicating their order in ascending or descending order."
      ]
    ],
    "class com.fsck.k9.fragment.ProgressDialogFragment": [
      [
        "onCancel(android.content.DialogInterface)",
        "calls the `onProgressCancel` method of the activity's `CancelListener` if the activity is not null and instance of `CancelListener`, and then calls the superclass method `onCancel`."
      ],
      [
        "onCreateDialog(android.os.Bundle)",
        "creates a progress dialog with a title and message, sets it to be indeterminate, and returns the dialog."
      ],
      [
        "newInstance(java.lang.String,java.lang.String)",
        "creates a new instance of the `ProgressDialogFragment` class with specified title and message arguments."
      ]
    ],
    "class com.fsck.k9.fragment.AttachmentDownloadDialogFragment": [
      [
        "onDestroyView()",
        "removes a messaging listener and then calls the superclass method `onDestroyView()`."
      ],
      [
        "onCreateDialog(android.os.Bundle)",
        "creates and displays a progress dialog to show the progress of an attachment download."
      ],
      [
        "onCancel(android.content.DialogInterface)",
        "calls the `onProgressCancel` method of an `AttachmentDownloadCancelListener` if the cancel button is pressed on the `AttachmentDownloadDialogFragment`, and then calls the `onCancel` method of the parent class."
      ],
      [
        "newInstance(int,java.lang.String)",
        "creates a new instance of the `AttachmentDownloadDialogFragment` class with the specified size and message arguments."
      ]
    ],
    "class com.fsck.k9.fragment.MessageListFragmentComparators$ArrivalComparator": [
      [
        "compare(android.database.Cursor,android.database.Cursor)",
        "compares the arrival time of two email messages using their respective cursors."
      ]
    ],
    "interface com.fsck.k9.fragment.ProgressDialogFragment$CancelListener": [
      [
        "onProgressCancel(com.fsck.k9.fragment.ProgressDialogFragment)",
        "handles the event of the progress dialog being cancelled."
      ]
    ],
    "class com.fsck.k9.fragment.MessageListFragment$MessageListActivityListener": [
      [
        "synchronizeMailboxFailed(com.fsck.k9.Account,java.lang.String,java.lang.String)",
        "handles the event of the mailbox synchronization failing for a specific account and folder."
      ],
      [
        "synchronizeMailboxFinished(com.fsck.k9.Account,java.lang.String,int,int)",
        "handles the completion of mailbox synchronization for a specific account and folder within the K-9 Mail app."
      ],
      [
        "folderStatusChanged(com.fsck.k9.Account,java.lang.String,int)",
        "updates the unread message count for a specific folder in a specific account and notifies any super classes that the folder status has changed."
      ],
      [
        "remoteSearchFailed(java.lang.String,java.lang.String)",
        "displays a toast message with a remote search error if the remote search fails in the message list fragment."
      ],
      [
        "remoteSearchStarted(java.lang.String)",
        "shows progress and updates the footer message when a remote search is started in the specified folder."
      ],
      [
        "remoteSearchFinished(java.lang.String,int,int,java.util.List)",
        "handles the finishing of a remote search for messages and updates the UI accordingly."
      ],
      [
        "synchronizeMailboxStarted(com.fsck.k9.Account,java.lang.String)",
        "updates the UI to show progress and loading status when synchronizing a mailbox for a specific account and folder."
      ],
      [
        "enableProgressIndicator(boolean)",
        "enables or disables a progress indicator in the MessageListFragment's MessageListActivityListener class."
      ],
      [
        "remoteSearchServerQueryComplete(java.lang.String,int,int)",
        "updates the user interface of the message list activity listener with information about a remote search server query and sets the progress indicator."
      ],
      [
        "informUserOfStatus()",
        "calls the `refreshTitle()` method of the `handler` object to inform the user of the current status."
      ]
    ],
    "class com.fsck.k9.fragment.MessageListAdapter": [
      [
        "newView(android.content.Context,android.database.Cursor,android.view.ViewGroup)",
        "creates a new view for a message list item with various UI elements and sets their properties based on the provided arguments and class parameters."
      ],
      [
        "bindView(android.view.View,android.content.Context,android.database.Cursor)",
        "populates the view for a message in a message list with information from a cursor and the corresponding email account."
      ]
    ],
    "class com.fsck.k9.fragment.MessageListFragmentComparators$FlaggedComparator": [
      [
        "compare(android.database.Cursor,android.database.Cursor)",
        "compares two cursor objects based on whether or not they are flagged."
      ]
    ],
    "class com.fsck.k9.fragment.MessageListFragmentComparators$SubjectComparator": [
      [
        "compare(android.database.Cursor,android.database.Cursor)",
        "compares the subjects of two message list cursors for sorting purposes."
      ]
    ],
    "class com.fsck.k9.fragment.MessageListFragmentComparators$AttachmentComparator": [
      [
        "compare(android.database.Cursor,android.database.Cursor)",
        "compares two Cursors based on whether they have attachments or not and returns the difference."
      ]
    ],
    "class com.fsck.k9.fragment.MessageListFragmentComparators$UnreadComparator": [
      [
        "compare(android.database.Cursor,android.database.Cursor)",
        "compares two cursors based on whether or not they represent unread messages and returns the result."
      ]
    ],
    "class com.fsck.k9.fragment.MessageListHandler": [
      [
        "folderLoading(java.lang.String,boolean)",
        "sends a message to the MessageListHandler with information about whether a folder is currently being loaded or not."
      ],
      [
        "updateFooter(java.lang.String)",
        "updates the footer of a message list fragment with a given message."
      ],
      [
        "remoteSearchFinished()",
        "sends a message with the code `ACTION_REMOTE_SEARCH_FINISHED` to the `MessageListHandler`."
      ],
      [
        "goBack()",
        "sends a message to the message list handler to go back."
      ],
      [
        "refreshTitle()",
        "sends a message to refresh the title of the message list fragment."
      ],
      [
        "restoreListPosition()",
        "restores the position of a message list in a message list fragment."
      ],
      [
        "openMessage(com.fsck.k9.activity.MessageReference)",
        "opens a message in the message list view."
      ],
      [
        "handleMessage(android.os.Message)",
        "handles different types of messages sent to the MessageListHandler class in the K-9 email client, either by performing an action on the associated MessageListFragment or discarding irrelevant ones."
      ],
      [
        "progress(boolean)",
        "sends a message to the current instance of the MessageListHandler class to update the progress status based on a boolean value passed as a parameter."
      ]
    ],
    "interface com.fsck.k9.fragment.AttachmentDownloadDialogFragment$AttachmentDownloadCancelListener": [
      [
        "onProgressCancel(com.fsck.k9.fragment.AttachmentDownloadDialogFragment)",
        "handles the cancelling of an attachment download progress in a fragment dialog."
      ]
    ],
    "class com.fsck.k9.fragment.ConfirmationDialogFragment": [
      [
        "onClick(android.content.DialogInterface,int)",
        "handles the click events for positive, negative, and neutral buttons in a confirmation dialog fragment."
      ],
      [
        "newInstance(int,java.lang.String,java.lang.String,java.lang.String,java.lang.String)",
        "creates a new instance of a confirmation dialog fragment with specified parameters."
      ],
      [
        "onAttach(android.app.Activity)",
        "sets a listener for the confirmation dialog fragment in the attached activity and catches any exceptions."
      ],
      [
        "newInstance(int,java.lang.String,java.lang.String,java.lang.String)",
        "returns a new instance of the `ConfirmationDialogFragment` class with the specified `dialogId`, `title`, `message`, and `cancelText` parameters."
      ],
      [
        "onCreateDialog(android.os.Bundle)",
        "creates a confirmation dialog with specified attributes and buttons, and returns the dialog."
      ],
      [
        "onCancel(android.content.DialogInterface)",
        "calls the `dialogCancelled` method of the listener when the dialog is cancelled."
      ]
    ],
    "class com.fsck.k9.fragment.MessageViewHolder": [
      [
        "onClick(android.view.View)",
        "handles click events on certain views in the message view holder and toggles message selection or flagging based on the view clicked and the position of the message in the adapter."
      ]
    ],
    "class com.fsck.k9.fragment.MessageListFragmentComparators$ComparatorChain": [
      [
        "compare(java.lang.Object,java.lang.Object)",
        "compares two objects using a chain of comparators until a non-zero result is obtained."
      ]
    ],
    "interface com.fsck.k9.fragment.ConfirmationDialogFragment$ConfirmationDialogFragmentListener": [
      [
        "doNegativeClick(int)",
        "handles the negative button click event in a confirmation dialog."
      ],
      [
        "dialogCancelled(int)",
        "notifies the listener that the confirmation dialog with the specified ID has been cancelled."
      ],
      [
        "doPositiveClick(int)",
        "handles the positive button click event in a confirmation dialog and passes the dialog ID as a parameter."
      ]
    ],
    "class com.fsck.k9.fragment.MessageListFragmentComparators$DateComparator": [
      [
        "compare(android.database.Cursor,android.database.Cursor)",
        "compares the date column values of two cursors and returns -1, 0, or 1 depending on whether the first cursor's date is earlier, the same, or later than the second cursor's date."
      ]
    ],
    "class com.fsck.k9.fragment.MessageListFragmentComparators$ReverseIdComparator": [
      [
        "compare(android.database.Cursor,android.database.Cursor)",
        "compares two database cursors based on their \"_id\" column values in reverse order."
      ]
    ],
    "interface com.fsck.k9.fragment.MessageListFragment$MessageListFragmentListener": [
      [
        "updateMenu()",
        "(no description)"
      ],
      [
        "setUnreadCount(int)",
        "sets the number of unread messages in the message list."
      ],
      [
        "setMessageListTitle(java.lang.String)",
        "sets the title for the message list."
      ],
      [
        "onForward(com.fsck.k9.activity.MessageReference)",
        "calls for the forwarding of a specific email message."
      ],
      [
        "startSearch(com.fsck.k9.Account,java.lang.String)",
        "starts a search for messages in a specific folder of a K9 email account."
      ],
      [
        "onReplyAll(com.fsck.k9.activity.MessageReference)",
        "triggers an action to reply to all recipients of a specified email message."
      ],
      [
        "showThread(com.fsck.k9.Account,java.lang.String,long)",
        "displays a threaded view of email messages for a given account, folder, and root id."
      ],
      [
        "showMoreFromSameSender(java.lang.String)",
        "displays more emails from the same sender in the message list fragment."
      ],
      [
        "enableActionBarProgress(boolean)",
        "enables or disables the progress spinner in the action bar."
      ],
      [
        "setMessageListProgress(int)",
        "sets the level of progress for the message list."
      ],
      [
        "goBack()",
        "navigates the user back to the previous screen or view."
      ],
      [
        "remoteSearchStarted()",
        "notifies the listener that a remote search has been started."
      ],
      [
        "setMessageListSubTitle(java.lang.String)",
        "sets the sub-title of the message list in a fragment listener."
      ],
      [
        "onResendMessage(com.fsck.k9.activity.MessageReference)",
        "triggers a request to resend a message identified by a given reference."
      ],
      [
        "openMessage(com.fsck.k9.activity.MessageReference)",
        "opens a message using its reference."
      ],
      [
        "onCompose(com.fsck.k9.Account)",
        "triggers the compose action for a specified email account within a message list fragment."
      ],
      [
        "onReply(com.fsck.k9.activity.MessageReference)",
        "listens to a reply event and passes the MessageReference parameter to the implementing class."
      ]
    ],
    "class com.fsck.k9.fragment.MessageListFragment$ActionModeCallback": [
      [
        "showMarkAsRead(boolean)",
        "shows or hides the \"Mark as read\" and \"Mark as unread\" options in the action mode menu based on the value of the boolean parameter."
      ],
      [
        "onCreateActionMode(android.view.ActionMode,android.view.Menu)",
        "creates an action mode for the message list fragment and inflates a menu for it with context capabilities."
      ],
      [
        "showFlag(boolean)",
        "shows or hides the \"flag\" and \"unflag\" options in the action mode menu based on the boolean value passed to it."
      ],
      [
        "showSelectAll(boolean)",
        "shows or hides the \"select all\" option in the action mode toolbar depending on the input parameter \"show\"."
      ],
      [
        "onDestroyActionMode(android.view.ActionMode)",
        "destroys the action mode and resets all the associated variables and selection state."
      ],
      [
        "onPrepareActionMode(android.view.ActionMode,android.view.Menu)",
        "preparares the action mode and sets visible menu options based on the current account context."
      ],
      [
        "onActionItemClicked(android.view.ActionMode,android.view.MenuItem)",
        "handles the click events for various items in the action mode of the MessageListFragment, such as deleting messages or marking them as read."
      ]
    ],
    "class com.fsck.k9.fragment.MessageListFragmentComparators$ReverseComparator": [
      [
        "compare(java.lang.Object,java.lang.Object)",
        "compares two objects by calling the compare method of another comparator (mDelegate) with their arguments reversed."
      ]
    ]
  },
  "com.fsck.k9.helper": {
    "class com.fsck.k9.helper.MergeCursor": [
      [
        "getColumnName(int)",
        "returns the column name for a given column index in a MergeCursor object."
      ],
      [
        "getDouble(int)",
        "returns the double value of the data at the specified column index in the active cursor of the MergeCursor object."
      ],
      [
        "getWantsAllOnMoveCalls()",
        "returns whether the active cursor wants all on move calls or not."
      ],
      [
        "getCount()",
        "returns the total number of items in all cursors combined, while caching the count to improve performance."
      ],
      [
        "isBeforeFirst()",
        "checks if the current position of the cursor is before the first row in the result set."
      ],
      [
        "getColumnIndexOrThrow(java.lang.String)",
        "returns the index of a given column name or throws an exception if the column does not exist."
      ],
      [
        "moveToPosition(int)",
        "moves the cursor to a specified position within a limit and returns a Boolean whether it was successful."
      ],
      [
        "moveToPrevious()",
        "moves the cursor to the previous position based on a comparison with other cursors in the merge cursor."
      ],
      [
        "moveToFirst()",
        "moves the cursor to the first position in the MergeCursor object."
      ],
      [
        "isFirst()",
        "checks if the current position of the cursor is the first position in the merged cursor dataset."
      ],
      [
        "isClosed()",
        "returns a boolean value indicating whether the active cursor is closed or not."
      ],
      [
        "getPosition()",
        "returns the current index position of the cursor."
      ],
      [
        "move(int)",
        "moves the cursor to a new position based on an offset value."
      ],
      [
        "setNotificationUri(android.content.ContentResolver,android.net.Uri)",
        "sets a notification URI for all cursors in a list within the MergeCursor object."
      ],
      [
        "isNull(int)",
        "checks if a specified column value in the current active cursor is null."
      ],
      [
        "registerContentObserver(android.database.ContentObserver)",
        "registers a content observer for each cursor in the list of cursors."
      ],
      [
        "getFloat(int)",
        "returns the float value of a specified column from a cursor."
      ],
      [
        "respond(android.os.Bundle)",
        "throws a runtime exception as it is not implemented."
      ],
      [
        "registerDataSetObserver(android.database.DataSetObserver)",
        "registers a dataset observer with each cursor in the MergeCursor's list of cursors."
      ],
      [
        "unregisterContentObserver(android.database.ContentObserver)",
        "unregisters a content observer from all the cursors contained in the MergeCursor."
      ],
      [
        "getColumnIndex(java.lang.String)",
        "returns the index of a column identified by its name in the currently active cursor."
      ],
      [
        "setExtras(android.os.Bundle)",
        "sets the extras for the active cursor in the MergeCursor using an Android Bundle."
      ],
      [
        "getType(int)",
        "returns the data type of the specified column from the active cursor of a MergeCursor object."
      ],
      [
        "getShort(int)",
        "returns a short value at the specified column index from the active cursor in a MergeCursor object."
      ],
      [
        "copyStringToBuffer(int,android.database.CharArrayBuffer)",
        "copies a string value from a specified column index of a cursor to a character array buffer."
      ],
      [
        "getBlob(int)",
        "returns the blob data at the specified column index from the active cursor in the MergeCursor instance."
      ],
      [
        "unregisterDataSetObserver(android.database.DataSetObserver)",
        "unregisters a given data set observer from all the cursors that are merged together in a MergeCursor object."
      ],
      [
        "requery()",
        "requeries all the cursors in the MergeCursor instance and returns a boolean indicating whether the requerying was successful."
      ],
      [
        "moveToNext()",
        "moves the cursor to the next row in the database by comparing multiple cursors and determining the smallest value according to a specified comparator."
      ],
      [
        "close()",
        "closes each cursor contained in the MergeCursor object."
      ],
      [
        "getNotificationUri()",
        "returns a null value as the notification URI."
      ],
      [
        "getString(int)",
        "returns a String value at the specified column index from the active cursor of a MergeCursor object."
      ],
      [
        "getColumnNames()",
        "returns an array of column names from the active cursor of the MergeCursor instance."
      ],
      [
        "getExtras()",
        "throws a runtime exception as it is not implemented."
      ],
      [
        "getInt(int)",
        "returns an integer value from the active cursor at a given column index."
      ],
      [
        "isAfterLast()",
        "determines if the cursor is positioned after the last row of the merged cursor result."
      ],
      [
        "isLast()",
        "returns true if the current position in the merge cursor is at the last row, false otherwise."
      ],
      [
        "deactivate()",
        "deactivates all the cursors in the list stored within the MergeCursor object."
      ],
      [
        "moveToLast()",
        "moves the cursor to the last position of the MergeCursor object."
      ],
      [
        "getLong(int)",
        "returns a long value from the active cursor at the specified column index."
      ],
      [
        "getColumnCount()",
        "returns the number of columns in the active cursor of the MergeCursor object."
      ]
    ],
    "class com.fsck.k9.helper.EmailHelper": [
      [
        "getDomainFromEmailAddress(java.lang.String)",
        "returns the domain part of an email address."
      ]
    ],
    "class com.fsck.k9.helper.IdentityHelper": [
      [
        "getRecipientIdentityFromMessage(com.fsck.k9.Account,com.fsck.k9.mail.Message)",
        "finds the identity of the recipient of a given email message belonging to a specific email account."
      ]
    ],
    "class com.fsck.k9.helper.MergeCursorWithUniqueId": [
      [
        "getLong(int)",
        "returns the long value of the specified column index, where the unique identifiers for each cursor are merged together."
      ],
      [
        "getColumnCount()",
        "returns the number of columns in a merged cursor with an additional unique identifier column."
      ],
      [
        "getColumnIndex(java.lang.String)",
        "overrides the getColumnIndex method to handle a specific column name and returns the unique ID column index if \"_id\" is passed as the column name."
      ],
      [
        "getColumnIndexOrThrow(java.lang.String)",
        "returns the index of the specified column name or the unique id column index if the specified column name is \"_id\"."
      ]
    ],
    "class com.fsck.k9.helper.UrlEncodingHelper": [
      [
        "encodeUtf8(java.lang.String)",
        "encodes a given string into UTF-8 format using URL encoding."
      ],
      [
        "decodeUtf8(java.lang.String)",
        "decodes a UTF-8 encoded string into a regular string using URL decoding."
      ]
    ],
    "class com.fsck.k9.helper.MessageHelper": [
      [
        "getDisplayName(com.fsck.k9.Account,com.fsck.k9.mail.Address[],com.fsck.k9.mail.Address[])",
        "returns a display name for a message, based on the sender and recipient addresses, using the K9 email client."
      ],
      [
        "toFriendly(com.fsck.k9.mail.Address,com.fsck.k9.helper.Contacts)",
        "returns a \"friendly\" name for an email address, either by finding the corresponding contact name or using the personal portion of the address or the email address itself if no other information is available."
      ],
      [
        "populate(com.fsck.k9.activity.MessageInfoHolder,com.fsck.k9.mailstore.LocalMessage,com.fsck.k9.activity.FolderInfoHolder,com.fsck.k9.Account)",
        "populates target `MessageInfoHolder` with information from a `LocalMessage` and `FolderInfoHolder` for display in the UI."
      ],
      [
        "toMe(com.fsck.k9.Account,com.fsck.k9.mail.Address[])",
        "checks whether any of the email addresses in `toAddrs` belong to the email account specified by `account`."
      ],
      [
        "toFriendly(com.fsck.k9.mail.Address[],com.fsck.k9.helper.Contacts)",
        "converts an array of email addresses and their corresponding contacts into a human-readable format."
      ],
      [
        "getInstance(android.content.Context)",
        "returns a singleton instance of the MessageHelper class, creating it if necessary, by passing an Android context as a parameter to the constructor."
      ]
    ],
    "class com.fsck.k9.helper.FileHelper": [
      [
        "move(java.io.File,java.io.File)",
        "moves a file from one location to another, deleting the original file after successful copying to the new location."
      ],
      [
        "createUniqueFile(java.io.File,java.lang.String)",
        "creates a unique file name with a hyphen and number appended to the given filename to avoid overwriting existing files in the specified directory."
      ],
      [
        "sanitizeFilename(java.lang.String)",
        "replaces characters that are not allowed in file names with a replacement character."
      ],
      [
        "moveRecursive(java.io.File,java.io.File)",
        "moves a file or directory from one location to another, including all the files and subdirectories contained within it recursively."
      ],
      [
        "touchFile(java.io.File,java.lang.String)",
        "creates a new file if it doesn't exist or updates its modification date if it does."
      ],
      [
        "renameOrMoveByCopying(java.io.File,java.io.File)",
        "renames or moves a file from the `from` location to the `to` location, either by renaming or by copying the file and then deleting the original file if the renaming fails."
      ]
    ],
    "class com.fsck.k9.helper.K9AlarmManager": [
      [
        "cancel(android.app.PendingIntent)",
        "cancels a pending alarm PendingIntent using the system AlarmManager."
      ],
      [
        "getAlarmManager(android.content.Context)",
        "returns an instance of the K9AlarmManager class initialized with an instance of the Android AlarmManager and a DozeChecker object, using a given Android context."
      ],
      [
        "set(int,long,android.app.PendingIntent)",
        "sets an alarm using either regular or idle mode depending on device and app whitelist support."
      ]
    ],
    "class com.fsck.k9.helper.UnreadWidgetProperties": [
      [
        "getClickIntent(android.content.Context)",
        "returns an intent for handling clicks on an unread widget based on the type of click (search account, account, or folder)."
      ],
      [
        "getAppWidgetId()",
        "returns the ID of the app widget."
      ],
      [
        "getFolderName()",
        "returns the value of the variable `folderName` as a String."
      ],
      [
        "getTitle(android.content.Context)",
        "returns the title of an unread widget in a specific format based on the type of account or folder being displayed."
      ],
      [
        "getUnreadCount(android.content.Context)",
        "gets the unread count for a given context and type (search account, account, or folder) using the K-9 Mail app framework."
      ],
      [
        "getAccountUuid()",
        "returns the account UUID of the UnreadWidgetProperties object."
      ]
    ],
    "class com.fsck.k9.helper.SizeFormatter": [
      [
        "formatSize(android.content.Context,long)",
        "formats a given size in bytes into a string representation with units in kB, MB, GB, and bytes."
      ]
    ],
    "class com.fsck.k9.helper.FileBrowserHelper": [
      [
        "showFileBrowserActivity(android.app.Fragment,java.io.File,int,com.fsck.k9.helper.FileBrowserHelper$FileBrowserFailOverCallback)",
        "shows a file browser activity and returns whether it was successful or not."
      ],
      [
        "getInstance()",
        "returns a single instance of the `FileBrowserHelper` class and creates it if it does not exist."
      ],
      [
        "showFileBrowserActivity(android.app.Activity,java.io.File,int,com.fsck.k9.helper.FileBrowserHelper$FileBrowserFailOverCallback)",
        "tries to open a file browser activity, and if none is found, shows a fallback text input dialog."
      ]
    ],
    "class com.fsck.k9.helper.ParcelableUtil": [
      [
        "marshall(android.os.Parcelable)",
        "serializes a Parcelable object into a byte array."
      ],
      [
        "unmarshall(byte[],android.os.Parcelable$Creator)",
        "unmarshalls a byte array into an Android Parcelable object using a provided creator."
      ]
    ],
    "class com.fsck.k9.helper.RetainFragment": [
      [
        "setData(java.lang.Object)",
        "sets the data of type T for the RetainFragment object."
      ],
      [
        "onCreate(android.os.Bundle)",
        "sets the retain instance flag for the `RetainFragment` class to true in its `onCreate` method."
      ],
      [
        "findOrCreate(android.app.FragmentManager,java.lang.String)",
        "finds or creates a RetainFragment using the FragmentManager and tag provided."
      ],
      [
        "findOrNull(android.app.FragmentManager,java.lang.String)",
        "returns a retained fragment of a given type and tag from a fragment manager or null if it doesn't exist."
      ],
      [
        "getData()",
        "returns the data stored in the RetainFragment object."
      ],
      [
        "hasData()",
        "checks if the `data` variable in the `RetainFragment` class is not null and returns a boolean value indicating whether it has any data or not."
      ],
      [
        "clearAndRemove(android.app.FragmentManager)",
        "clears the data and removes the `RetainFragment` from the `FragmentManager`."
      ]
    ],
    "interface com.fsck.k9.helper.FileBrowserHelper$FileBrowserFailOverCallback": [
      [
        "onPathEntered(java.lang.String)",
        "handles the event where a user enters a path string in a file browser failover callback."
      ],
      [
        "onCancel()",
        "handles the action when the user cancels the inputtext dialog."
      ]
    ],
    "class com.fsck.k9.helper.MailTo": [
      [
        "getCc()",
        "returns an array of email addresses that are cc'd in a MailTo object."
      ],
      [
        "getBody()",
        "returns the body of an email message."
      ],
      [
        "getSubject()",
        "returns the subject of an email message."
      ],
      [
        "getBcc()",
        "returns an array of email addresses that are blind carbon copy recipients of the email message."
      ],
      [
        "getTo()",
        "returns an array of email addresses in the \"To\" field of an email."
      ],
      [
        "parse(android.net.Uri)",
        "parses a mailto URI and extracts the recipient's email address, list of to, cc, and bcc addresses, subject, and body."
      ],
      [
        "isMailTo(android.net.Uri)",
        "checks if a given Android URI is a mailto URI."
      ]
    ],
    "class com.fsck.k9.helper.Contacts": [
      [
        "isInContacts(java.lang.String)",
        "checks if a provided email address belongs to one of the contacts."
      ],
      [
        "isAnyInContacts(com.fsck.k9.mail.Address[])",
        "checks if any of the addresses provided belong to a contact in the user's address book."
      ],
      [
        "getInstance(android.content.Context)",
        "returns an instance of the Contacts class for the specified Context."
      ],
      [
        "getPhotoUri(java.lang.String)",
        "searches the contact database for a contact with a given email address and returns the URI to the picture associated with that contact, if one exists."
      ],
      [
        "contactPickerIntent()",
        "creates an intent to open a contact picker."
      ],
      [
        "getNameForAddress(java.lang.String)",
        "returns the name of the contact associated with a given email address or null if no matching contact is found."
      ],
      [
        "createContact(com.fsck.k9.mail.Address)",
        "opens the Kontakt app in the device with the option to create a new contact or add information to an existing contact using the given email address and (optionally) the display name of the entity."
      ],
      [
        "markAsContacted(com.fsck.k9.mail.Address[])",
        "marks contacts with the provided email addresses as contacted in the device's contacts database."
      ],
      [
        "addPhoneContact(java.lang.String)",
        "starts the activity to add a phone number to an existing contact or add a new contact."
      ]
    ],
    "class com.fsck.k9.helper.SimpleTextWatcher": [
      [
        "afterTextChanged(android.text.Editable)",
        "executes code after the text in an EditText has been changed."
      ],
      [
        "onTextChanged(java.lang.CharSequence,int,int,int)",
        "overrides the `onTextChanged` method from the `TextWatcher` interface to listen for changes in text and performs an action when text is changed."
      ],
      [
        "beforeTextChanged(java.lang.CharSequence,int,int,int)",
        "executes a set of instructions before the text in an Android view is changed."
      ]
    ],
    "class com.fsck.k9.helper.ContactPicture": [
      [
        "getContactPictureLoader(android.content.Context)",
        "returns a contact picture loader object based on the provided context."
      ]
    ],
    "class com.fsck.k9.helper.ClipboardManager": [
      [
        "setText(java.lang.String,java.lang.String)",
        "copies the given text to the system clipboard with the given label."
      ],
      [
        "getInstance(android.content.Context)",
        "returns a new instance of the `ClipboardManager` class using the application context provided as a parameter."
      ]
    ],
    "class com.fsck.k9.helper.MailTo$CaseInsensitiveParamWrapper": [
      [
        "getQueryParameters(java.lang.String)",
        "returns a list of query parameters with a given key, ignoring case sensitivity."
      ]
    ],
    "class com.fsck.k9.helper.ReplyToParser": [
      [
        "getRecipientsToReplyTo(com.fsck.k9.mail.Message,com.fsck.k9.Account)",
        "extracts the recipients of a message that should be replied to based on the Reply-To, List-Post, and From headers, and determines whether the Reply-To address is a user identity or not."
      ],
      [
        "getRecipientsToReplyAllTo(com.fsck.k9.mail.Message,com.fsck.k9.Account)",
        "returns the list of recipients (both To and Cc) to reply all to, based on a given email message and account."
      ]
    ],
    "class com.fsck.k9.helper.ExceptionHelper": [
      [
        "getRootCauseMessage(java.lang.Throwable)",
        "returns the root cause message of a given Throwable object, handling MessagingException and formatting the message to remove the namespace."
      ]
    ],
    "class com.fsck.k9.helper.Utility": [
      [
        "hasConnectivity(android.content.Context)",
        "checks if there is network connectivity available in the given Android context."
      ],
      [
        "domainFieldValid(android.widget.EditText)",
        "validates whether the input text in an EditText view is a valid domain name or IP address."
      ],
      [
        "arrayContainsAny(java.lang.Object[],java.lang.Object[])",
        "checks if any element in the given array of objects is also present in another array of objects."
      ],
      [
        "closeQuietly(android.database.Cursor)",
        "unconditionally closes a cursor in a safe and quiet manner."
      ],
      [
        "stripNewLines(java.lang.String)",
        "removes all new line characters from a given multi-line string."
      ],
      [
        "wrap(java.lang.String,int)",
        "wraps a given string into multiple lines of a specified length and returns the resulting string."
      ],
      [
        "wrap(java.lang.String,int,java.lang.String,boolean)",
        "wraps a single line of text at a specific column, with an option to wrap long words, and inserts a provided string for a new line."
      ],
      [
        "setContactForBadge(com.fsck.k9.ui.ContactBadge,com.fsck.k9.mail.Address)",
        "assigns a contact to a given contact badge, and on Android 4.3 or above, populates the name field with the personal name associated with the email address."
      ],
      [
        "setCompoundDrawablesAlpha(android.widget.TextView,int)",
        "sets the alpha (transparency) value of the compound drawables associated with a given TextView object."
      ],
      [
        "hasExternalImages(java.lang.String)",
        "checks if a given string contains external images by searching for patterns of HTTP or HTTPS URI schemes in image tags."
      ],
      [
        "combine(java.lang.Object[],char)",
        "combines an array of objects into a single string using a separator character between each part."
      ],
      [
        "requiredFieldValid(android.widget.TextView)",
        "checks if a required field in an Android `TextView` has been filled out by returning true if the text length is greater than 0."
      ],
      [
        "getMainThreadHandler()",
        "returns a Handler object that is tied to the main thread of the application."
      ],
      [
        "extractMessageId(java.lang.String)",
        "extracts the message ID from a given text string using a regular expression matcher."
      ],
      [
        "isAnyMimeType(java.lang.String,java.lang.String[])",
        "checks if a given string matches any of the MIME types specified in an array of strings."
      ],
      [
        "combine(java.lang.Iterable,char)",
        "combines a list of objects into a string with a specified separator character."
      ],
      [
        "extractMessageIds(java.lang.String)",
        "extracts message ids from a given string using regular expression matching and returns them in a list."
      ],
      [
        "stripSubject(java.lang.String)",
        "extracts the original subject value by ignoring leading response/forward markers and '[XX]' formatted tags and trims the result."
      ],
      [
        "requiredFieldValid(android.text.Editable)",
        "checks if the passed android.text.Editable object is not null and has a length greater than 0."
      ],
      [
        "arrayContains(java.lang.Object[],java.lang.Object)",
        "checks if an object is contained within an array of objects and returns a boolean value."
      ]
    ],
    "class com.fsck.k9.helper.Preconditions": [
      [
        "checkNotNull(java.lang.Object)",
        "checks if the given object reference is not null and returns the reference if it is not null or throws a NullPointerException if it is null."
      ]
    ]
  },
  "com.fsck.k9.helper.jsoup": {
    "interface com.fsck.k9.helper.jsoup.NodeFilter": [
      [
        "head(org.jsoup.nodes.Node,int)",
        "filters nodes during traversal and provides a callback for when a node is first visited."
      ],
      [
        "tail(org.jsoup.nodes.Node,int)",
        "calls back when a node's tail is last visited after all of its descendants have been visited and returns a filter decision."
      ]
    ],
    "class com.fsck.k9.helper.jsoup.AdvancedNodeTraversor": [
      [
        "filter(org.jsoup.nodes.Node)",
        "traverses through a root node and its descendants while applying filtering operations based on a set of criteria defined by a NodeFilter object, and returns the result of the filtering operation."
      ]
    ]
  },
  "com.fsck.k9.mailstore": {
    "class com.fsck.k9.mailstore.StorageManager$SamsungGalaxySStorageProvider": [
      [
        "getName(android.content.Context)",
        "returns the name of the Storage Provider which is specific to Samsung Galaxy S devices in the form of a String."
      ],
      [
        "getId()",
        "returns the ID of a Samsung Galaxy S storage provider for use in the StorageManager class."
      ]
    ],
    "class com.fsck.k9.mailstore.StorageManager$ExternalStorageProvider": [
      [
        "getAttachmentDirectory(android.content.Context,java.lang.String)",
        "returns a File object representing the attachment directory for a given context and ID in the external storage provider's application directory."
      ],
      [
        "init(android.content.Context)",
        "initializes the external storage provider by setting the root directory and application directory for storing mail data."
      ],
      [
        "getDatabase(android.content.Context,java.lang.String)",
        "returns a `File` object representing the database file with the specified ID in the application directory of the given Android `Context`."
      ],
      [
        "isSupported(android.content.Context)",
        "returns true to indicate that external storage is supported in the context of the application."
      ],
      [
        "getName(android.content.Context)",
        "returns the name of the external storage provider label as a string by retrieving it from the resources of the given Android context."
      ],
      [
        "getRoot(android.content.Context)",
        "returns the root directory of an external storage provider."
      ],
      [
        "getId()",
        "returns the ID of the external storage provider for a specific email storage manager in the K-9 Mail application."
      ],
      [
        "isReady(android.content.Context)",
        "checks if the external storage is mounted and ready for use."
      ]
    ],
    "class com.fsck.k9.mailstore.LocalStore": [
      [
        "isCopyCapable()",
        "determines whether the `LocalStore` is capable of copying emails."
      ],
      [
        "getFolder(java.lang.String)",
        "returns a new instance of the LocalFolder class with the given name belonging to the LocalStore."
      ],
      [
        "isMoveCapable()",
        "returns a boolean value indicating whether or not the LocalStore object is capable of moving email messages."
      ],
      [
        "getPendingCommands()",
        "returns a list of pending commands from a database for a messaging app called K9."
      ],
      [
        "getAttachmentDataSource(java.lang.String)",
        "returns an OpenPgpDataSource for a given attachment's ID, which can be used to write the attachment data to an output stream."
      ],
      [
        "createFolders(java.util.List,int)",
        "creates new LocalFolder objects in the database with specific settings based on the provided parameters and account information."
      ],
      [
        "getFoldersAndUids(java.util.List,boolean)",
        "gets the folder names and UIDs for a list of messages, grouped by folder name, in either a threaded or non-threaded format."
      ],
      [
        "setFlagForThreads(java.util.List,com.fsck.k9.mail.Flag,boolean)",
        "changes the state of a specific flag for a list of threads in a local mail store."
      ],
      [
        "getAttachmentInfo(java.lang.String)",
        "returns information about a specific email attachment stored in the local database."
      ],
      [
        "compact()",
        "compacts the mailbox database by running SQL VACUUM command."
      ],
      [
        "getColumnNameForFlag(com.fsck.k9.mail.Flag)",
        "returns the corresponding column name in the local email storage database for a given email flag."
      ],
      [
        "setFlag(java.util.List,com.fsck.k9.mail.Flag,boolean)",
        "changes the state of a flag for a list of messages in an email store database."
      ],
      [
        "delete()",
        "deletes the local mail store database."
      ],
      [
        "removePendingCommand(com.fsck.k9.controller.MessagingControllerCommands$PendingCommand)",
        "removes a pending command from the local store's database."
      ],
      [
        "getInstance(com.fsck.k9.Account,android.content.Context)",
        "gets an instance of a local mail store for a given account."
      ],
      [
        "checkSettings()",
        "(no description)"
      ],
      [
        "removeAccount(com.fsck.k9.Account)",
        "removes a K-9 mail account from the local store."
      ],
      [
        "switchLocalStorage(java.lang.String)",
        "switches the local storage provider of the mail store to a new one specified by the provided ID."
      ],
      [
        "getPersonalNamespaces(boolean)",
        "returns a list of personal namespaces (folders) for the user's email account stored locally, also allowing for force listing all the folders."
      ],
      [
        "addPendingCommand(com.fsck.k9.controller.MessagingControllerCommands$PendingCommand)",
        "adds a pending command to a database table for later execution."
      ],
      [
        "getSize()",
        "returns the total size of the attachments and the database associated with a specific email account."
      ],
      [
        "recreate()",
        "recreates the local mail store database."
      ],
      [
        "resetVisibleLimits(int)",
        "resets the visible limit for a local email folder to a specified value."
      ],
      [
        "getDatabase()",
        "returns the `LockableDatabase` object that represents the database used by the `LocalStore` class, which is marked as needing modification to avoid exposing the database."
      ],
      [
        "getMessageFulltextCreator()",
        "returns an instance of the `MessageFulltextCreator` class from the `LocalStore` Java class."
      ],
      [
        "searchForMessages(com.fsck.k9.mail.MessageRetrievalListener,com.fsck.k9.search.LocalSearch)",
        "searches for local messages that match a given search condition and returns them in descending order by date."
      ],
      [
        "clear()",
        "deletes all messages, threads, and search data from the local email storage."
      ],
      [
        "removePendingCommands()",
        "removes all pending commands from the \"pending_commands\" table in the LocalStore's database."
      ],
      [
        "getMessagesInThread(long)",
        "returns a list of local messages in a thread with a specified root ID."
      ]
    ],
    "class com.fsck.k9.mailstore.LockableDatabase$StorageListener": [
      [
        "onMount(java.lang.String)",
        "opens or creates a data space for the LockableDatabase in response to a mount event on the storage provider, with error handling."
      ],
      [
        "onUnmount(java.lang.String)",
        "closes a database when the storage provider is unmounted, while ensuring a write lock is in place."
      ]
    ],
    "interface com.fsck.k9.mailstore.LockableDatabase$DbCallback": [
      [
        "doDbWork(android.database.sqlite.SQLiteDatabase)",
        "performs a database operation on a locked SQLite database and returns any relevant data."
      ]
    ],
    "class com.fsck.k9.mailstore.CryptoResultAnnotation": [
      [
        "getEncapsulatedResult()",
        "returns the encapsulated CryptoResultAnnotation object."
      ],
      [
        "getOpenPgpSigningKeyIntentIfAny()",
        "(no description)"
      ],
      [
        "createErrorAnnotation(com.fsck.k9.mailstore.CryptoResultAnnotation$CryptoError,com.fsck.k9.mail.internet.MimeBodyPart)",
        "creates a CryptoResultAnnotation object with a specified CryptoError and replacement data, and throws an error if the error is OPENPGP_OK."
      ],
      [
        "createOpenPgpCanceledAnnotation()",
        "creates a new instance of CryptoResultAnnotation with a specific error type and no additional information."
      ],
      [
        "withEncapsulatedResult(com.fsck.k9.mailstore.CryptoResultAnnotation)",
        "creates a new `CryptoResultAnnotation` object with an encapsulated result annotation and returns it."
      ],
      [
        "getOpenPgpSignatureResult()",
        "returns the OpenPGP signature result of a given message."
      ],
      [
        "createOpenPgpSignatureErrorAnnotation(org.openintents.openpgp.OpenPgpError,com.fsck.k9.mail.internet.MimeBodyPart)",
        "creates a crypto result annotation for an OpenPGP signature error with the given OpenPgpError and replacement data."
      ],
      [
        "getOpenPgpInsecureWarningPendingIntent()",
        "returns a Pending Intent object related to a warning about insecure OpenPGP usage."
      ],
      [
        "getOpenPgpDecryptionResult()",
        "returns the result of an OpenPGP decryption operation as an object of the class org.openintents.openpgp.OpenPgpDecryptionResult."
      ],
      [
        "hasSignatureResult()",
        "checks if there is a signature result in the current CryptoResultAnnotation object."
      ],
      [
        "getReplacementData()",
        "returns the replacement data for a MimeBodyPart in the CryptoResultAnnotation class."
      ],
      [
        "hasReplacementData()",
        "checks whether the `replacementData` variable is null or not."
      ],
      [
        "isOpenPgpResult()",
        "checks if both the `openPgpDecryptionResult` and `openPgpSignatureResult` variables are not null, indicating that an OpenPGP encryption and signature process has taken place."
      ],
      [
        "hasOpenPgpInsecureWarningPendingIntent()",
        "checks if there is a pending intent for an insecure warning related to OpenPGP encryption."
      ],
      [
        "isOverrideSecurityWarning()",
        "returns a boolean value indicating whether the security warning for a cryptographic result should be overridden."
      ],
      [
        "getErrorType()",
        "returns the error type (defined in `com.fsck.k9.mailstore.CryptoResultAnnotation.CryptoError`) of a `CryptoResultAnnotation` object."
      ],
      [
        "getOpenPgpError()",
        "returns an OpenPgpError object or null if there is no error related to OpenPGP."
      ],
      [
        "createOpenPgpEncryptionErrorAnnotation(org.openintents.openpgp.OpenPgpError)",
        "creates a CryptoResultAnnotation object with an OpenPgp encryption error."
      ],
      [
        "createOpenPgpResultAnnotation(org.openintents.openpgp.OpenPgpDecryptionResult,org.openintents.openpgp.OpenPgpSignatureResult,android.app.PendingIntent,android.app.PendingIntent,com.fsck.k9.mail.internet.MimeBodyPart,boolean)",
        "creates a CryptoResultAnnotation object with OpenPGP decryption and signature results, pending intents, a replacement MimeBodyPart, and a flag to override crypto warnings."
      ],
      [
        "hasEncapsulatedResult()",
        "checks if the `encapsulatedResult` variable of the `CryptoResultAnnotation` class is not null."
      ],
      [
        "getOpenPgpPendingIntent()",
        "returns a PendingIntent object related to OpenPGP encryption if it exists, or null otherwise."
      ]
    ],
    "class com.fsck.k9.mailstore.AttachmentViewInfo": [
      [
        "setContentAvailable()",
        "sets the `contentAvailable` field to `true`."
      ],
      [
        "isContentAvailable()",
        "returns whether the content of the attachment is available or not."
      ]
    ],
    "enum com.fsck.k9.mailstore.DatabasePreviewType": [
      [
        "fromPreviewType(com.fsck.k9.message.extractors.PreviewResult$PreviewType)",
        "maps a `PreviewType` from the `PreviewResult` class to its corresponding `DatabasePreviewType` enum instance."
      ],
      [
        "getDatabaseValue()",
        "returns the value of the databaseValue variable in the DatabasePreviewType enum."
      ],
      [
        "fromDatabaseValue(java.lang.String)",
        "converts a database value in the form of a string to its corresponding enum value."
      ],
      [
        "getPreviewType()",
        "returns the preview type of a database item as a `PreviewType` object."
      ]
    ],
    "enum com.fsck.k9.mailstore.LocalFolder$MoreMessages": [
      [
        "fromDatabaseName(java.lang.String)",
        "converts a string database name to its corresponding enum value in the `MoreMessages` enum class of the `LocalFolder` class."
      ],
      [
        "getDatabaseName()",
        "returns the database name of the LocalFolder$MoreMessages enum instance."
      ]
    ],
    "class com.fsck.k9.mailstore.LocalMimeMessage": [
      [
        "getPartId()",
        "returns the messagePartId of a LocalMimeMessage object."
      ],
      [
        "getMessage()",
        "returns a LocalMessage object representing a local copy of a MimeMessage object."
      ],
      [
        "getAccountUuid()",
        "returns the UUID (Universally Unique Identifier) of the account associated with the LocalMimeMessage."
      ]
    ],
    "class com.fsck.k9.mailstore.StorageManager$HtcIncredibleStorageProvider": [
      [
        "getName(android.content.Context)",
        "returns a localized string label for the Samsung Galaxy model from the provided Android context."
      ],
      [
        "getId()",
        "returns the ID of the storage provider for the Htc Incredible device."
      ]
    ],
    "class com.fsck.k9.mailstore.MessageHelper": [
      [
        "isCompletePartAvailable(com.fsck.k9.mail.Part)",
        "checks if all the parts of an email message are available for download."
      ],
      [
        "createEmptyPart()",
        "creates a new empty MimeBodyPart object."
      ]
    ],
    "class com.fsck.k9.mailstore.StoreSchemaDefinition$RealMigrationsHelper": [
      [
        "getContext()",
        "returns the context of the localStore object in the StoreSchemaDefinition$RealMigrationsHelper class."
      ],
      [
        "getLocalStore()",
        "(no description)"
      ],
      [
        "getStorage()",
        "returns the storage used by a local email store."
      ],
      [
        "serializeFlags(java.util.List)",
        "serializes a list of email flags using a helper method in the LocalStore class."
      ],
      [
        "getAccount()",
        "returns the account associated with the local mail store."
      ]
    ],
    "class com.fsck.k9.mailstore.LockableDatabase": [
      [
        "execute(boolean,com.fsck.k9.mailstore.LockableDatabase$DbCallback)",
        "executes a database callback while ensuring the database storage is locked, and optionally starts a transaction if one is not currently active."
      ],
      [
        "open()",
        "opens or creates a database while ensuring mutual exclusion using a lock and adds a storage listener to the storage manager instance."
      ],
      [
        "recreate()",
        "recreates the lockable database by deleting all existing data."
      ],
      [
        "switchProvider(java.lang.String)",
        "switches the database provider for the given LockableDatabase object to a new one and migrates all data between the old and new providers."
      ],
      [
        "setStorageProviderId(java.lang.String)",
        "sets the storage provider ID for the lockable database."
      ],
      [
        "getStorageProviderId()",
        "returns the storage provider ID of the lockable database."
      ],
      [
        "delete()",
        "deletes the backing database of a LockableDatabase Java class."
      ]
    ],
    "class com.fsck.k9.mailstore.LocalFolder": [
      [
        "getMessagesByUids(java.util.List)",
        "returns a list of local email messages corresponding to the given uids."
      ],
      [
        "getName()",
        "returns the name of the local folder."
      ],
      [
        "getMessages(int,int,java.util.Date,com.fsck.k9.mail.MessageRetrievalListener)",
        "throws a messaging exception as it is not yet implemented."
      ],
      [
        "getMessage(java.lang.String)",
        "retrieves a local email message from the database using its UID."
      ],
      [
        "getUidFromMessageId(com.fsck.k9.mail.Message)",
        "throws a MessagingException indicating that it cannot call getUidFromMessageId on LocalFolder."
      ],
      [
        "save(com.fsck.k9.preferences.StorageEditor)",
        "saves the display mode, sync mode, notify mode, push mode, isInTopGroup and isIntegrate properties of a LocalFolder to the given StorageEditor object."
      ],
      [
        "setDisplayClass(com.fsck.k9.mailstore.FolderClass)",
        "sets the display class for a local email folder and updates the corresponding database column with the new value."
      ],
      [
        "refresh(java.lang.String,com.fsck.k9.mailstore.LocalFolder$PreferencesHolder)",
        "updates the preferences of a local email folder based on the stored values in the associated storage."
      ],
      [
        "getMessages(com.fsck.k9.mail.MessageRetrievalListener,boolean)",
        "returns a list of local messages from the folder, with an option to include deleted messages, while also executing database work."
      ],
      [
        "addPartToMessage(com.fsck.k9.mailstore.LocalMessage,com.fsck.k9.mail.Part)",
        "adds a part to a local message in the local folder."
      ],
      [
        "getSyncClass()",
        "returns the synchronization class of the local folder, either inherited from its parent folder or set explicitly."
      ],
      [
        "delete(boolean)",
        "deletes the local folder from the mailstore and optionally deletes all messages within the folder."
      ],
      [
        "isOpen()",
        "checks if a local folder is currently open in the mailstore database."
      ],
      [
        "create(com.fsck.k9.mailstore.FolderType)",
        "creates a new mail folder of the specified type and displays the count of emails in the folder."
      ],
      [
        "equals(java.lang.Object)",
        "checks if the given object is an instance of the `LocalFolder` class and if so, compares its `name` with the name of the current instance to determine if they are equal."
      ],
      [
        "setPushState(java.lang.String)",
        "sets the push state of a local email folder and updates the corresponding database column."
      ],
      [
        "changeUid(com.fsck.k9.mailstore.LocalMessage)",
        "updates the stored UID of a local message in a local folder's database."
      ],
      [
        "getVisibleLimit()",
        "returns the limit for the number of visible emails in the local folder."
      ],
      [
        "clearAllMessages()",
        "clears all messages from the local folder and updates its state."
      ],
      [
        "getAccountUuid()",
        "returns the UUID (unique identifier) of the account associated with the LocalFolder."
      ],
      [
        "appendMessages(java.util.List)",
        "adds messages to a local email folder, replacing any existing messages with the same UID."
      ],
      [
        "setStatus(java.lang.String)",
        "updates the status column of a local mail folder with the specified string value."
      ],
      [
        "exists()",
        "checks if a folder exists in the local mailstore database."
      ],
      [
        "getMode()",
        "returns the open mode of the LocalFolder object as read-write."
      ],
      [
        "getDatabaseId()",
        "returns the database ID associated with a local email folder."
      ],
      [
        "hashCode()",
        "returns the hashcode value of the folder name for the LocalFolder class."
      ],
      [
        "getPushState()",
        "returns the push state of the local email folder."
      ],
      [
        "getSignatureUse()",
        "returns whether or not the signature is used for the current account."
      ],
      [
        "setInTopGroup(boolean)",
        "updates the \"top_group\" column of the LocalFolder instance in the database to indicate whether it is in the top group or not."
      ],
      [
        "updateLastUid()",
        "fetches the most recent numeric UID value in a folder and updates the last UID value for that folder."
      ],
      [
        "clearMessagesOlderThan(long)",
        "deletes all messages in a specific folder that are older than a certain date/time."
      ],
      [
        "areMoreMessagesAvailable(int,java.util.Date)",
        "throws an `IllegalStateException` as it is not implemented."
      ],
      [
        "getRawSyncClass()",
        "returns the synchronization class of a local email folder in the K9 email client."
      ],
      [
        "copyMessages(java.util.List,com.fsck.k9.mail.Folder)",
        "copies a list of email messages to a specified folder."
      ],
      [
        "setIntegrate(boolean)",
        "sets a boolean value for integrating a local folder and updates the corresponding column in the database accordingly."
      ],
      [
        "fetch(java.util.List,com.fsck.k9.mail.FetchProfile,com.fsck.k9.mail.MessageRetrievalListener)",
        "retrieves the specified messages and their corresponding parts from the database and loads them into memory."
      ],
      [
        "setMoreMessages(com.fsck.k9.mailstore.LocalFolder$MoreMessages)",
        "sets the value of the `moreMessages` field for a `LocalFolder` object and updates the `more_messages` column in the folder's database."
      ],
      [
        "storeSmallMessage(com.fsck.k9.mail.Message,java.lang.Runnable)",
        "stores a small message and sets it as fully downloaded, with a provided runnable to run before setting the download flag."
      ],
      [
        "setLastSelectedFolderName(java.lang.String)",
        "sets the last selected folder name for the account associated with this local folder."
      ],
      [
        "isIntegrate()",
        "returns the value of the boolean variable `isIntegrate`."
      ],
      [
        "getNotifyClass()",
        "returns the notification class for this local mail folder."
      ],
      [
        "getAllMessageUids()",
        "returns a list of all message UIDs for a given folder stored locally, sorted by date."
      ],
      [
        "getOldestMessageDate()",
        "fetches the oldest message date for a particular folder from the local database."
      ],
      [
        "setFlags(java.util.List,java.util.Set,boolean)",
        "sets the specified flags for a list of email messages in the local folder."
      ],
      [
        "getMessageCount()",
        "returns the number of non-empty and non-deleted messages in a local folder by executing a SQL query in a database."
      ],
      [
        "save()",
        "saves changes made to a local folder using the local store's storage editor."
      ],
      [
        "setNotifyClass(com.fsck.k9.mailstore.FolderClass)",
        "sets the notification class of a local email folder and updates the notify_class database column with the new value."
      ],
      [
        "getMoreMessages()",
        "returns the `moreMessages` object of the `LocalFolder` class in the `com.fsck.k9.mailstore` package."
      ],
      [
        "getAllMessagesAndEffectiveDates()",
        "fetches all messages and their effective dates from a local mail folder using a SQL query, and returns them as a map."
      ],
      [
        "setPushClass(com.fsck.k9.mailstore.FolderClass)",
        "sets the push class of a local email folder and updates the corresponding database column."
      ],
      [
        "close()",
        "sets the database id of the local folder to -1 when the folder is closed."
      ],
      [
        "delete()",
        "deletes the preferences associated with a particular LocalFolder instance in the local store."
      ],
      [
        "purgeToVisibleLimit(com.fsck.k9.mailstore.MessageRemovalListener)",
        "purges messages in a local folder up until the visible limit, and notifies a listener of any removed messages."
      ],
      [
        "open(int)",
        "opens a local mail folder and checks if it is already open in a specific mode, and if not it closes the existing connection and reopens it in the requested mode."
      ],
      [
        "getRawPushClass()",
        "returns the push class of the LocalFolder Java class."
      ],
      [
        "setLastChecked(long)",
        "sets the last checked timestamp for a local email folder and updates the corresponding column in the folder's database table."
      ],
      [
        "getMessageUidById(long)",
        "returns the unique identifier for a message with a given id in a local email folder."
      ],
      [
        "setVisibleLimit(int)",
        "sets a limit on the number of emails that are visible in a locally stored email folder and updates the folder's database column accordingly."
      ],
      [
        "isInTopGroup()",
        "returns a boolean value indicating whether the folder is in the top group or not."
      ],
      [
        "getLastUid()",
        "returns the last UID (unique identifier) of emails stored in a local folder."
      ],
      [
        "setSyncClass(com.fsck.k9.mailstore.FolderClass)",
        "sets the synchronization class for a local mail folder and updates the corresponding database column with the new class."
      ],
      [
        "moveMessages(java.util.List,com.fsck.k9.mail.Folder)",
        "moves a list of email messages to a different folder within the current email account."
      ],
      [
        "getDisplayClass()",
        "returns the display class of the LocalFolder."
      ],
      [
        "create(com.fsck.k9.mailstore.FolderType,int)",
        "creates a new email folder with a specified visibility limit if it does not already exist."
      ],
      [
        "setFlags(java.util.Set,boolean)",
        "sets the specified flags for all messages in the LocalFolder."
      ],
      [
        "syncRemoteDeletions()",
        "syncs the remote deletions of the account associated with this local folder."
      ],
      [
        "getMessages(com.fsck.k9.mail.MessageRetrievalListener)",
        "returns a list of local messages while also allowing for a retrieval listener to be utilized."
      ],
      [
        "hasMoreMessages()",
        "checks if there are more messages to be retrieved in a local email folder."
      ],
      [
        "getMessagesByReference(java.util.List)",
        "returns a list of local messages based on the provided message references."
      ],
      [
        "setLastPush(long)",
        "sets the timestamp for the last time this folder was synced with the server and updates the corresponding database column."
      ],
      [
        "getUnreadMessageCount()",
        "returns the number of unread messages in a local email folder."
      ],
      [
        "getRawNotifyClass()",
        "returns the notify class of a local email folder."
      ],
      [
        "destroyMessages(java.util.List)",
        "deletes a list of mail messages from the local folder."
      ],
      [
        "getPushClass()",
        "returns the push class of the local mail folder."
      ],
      [
        "getFlaggedMessageCount()",
        "returns the number of flagged messages in a local email folder."
      ],
      [
        "extractNewMessages(java.util.List)",
        "extracts new messages from a list of messages by querying the database and comparing message UIDs."
      ]
    ],
    "interface com.fsck.k9.mailstore.MessageRemovalListener": [
      [
        "messageRemoved(com.fsck.k9.mail.Message)",
        "notifies the listener that a message has been removed."
      ]
    ],
    "class com.fsck.k9.mailstore.TempFileBody": [
      [
        "getInputStream()",
        "returns an input stream to read data from the file in the specified location or returns an empty input stream if the file is not found."
      ],
      [
        "getSize()",
        "returns the size of the file associated with the TempFileBody object."
      ]
    ],
    "class com.fsck.k9.mailstore.MimePartStreamParser$PartBuilder": [
      [
        "epilogue(java.io.InputStream)",
        "copies the epilogue (trailing boundary content) from an input stream and sets it as the epilogue for a MimeMultipart object."
      ],
      [
        "startHeader()",
        "does nothing when called."
      ],
      [
        "startBodyPart()",
        "adds a new body part to a multipart message and updates the stack."
      ],
      [
        "endMessage()",
        "pops the top element from the stack."
      ],
      [
        "endHeader()",
        "ends the parsing of the MIME header without performing any actions."
      ],
      [
        "body(org.apache.james.mime4j.stream.BodyDescriptor,java.io.InputStream)",
        "sets the body of a MIME part with a given input stream and transfer encoding."
      ],
      [
        "endBodyPart()",
        "pops the current part from the stack."
      ],
      [
        "startMultipart(org.apache.james.mime4j.stream.BodyDescriptor)",
        "starts building a MIME multipart message by setting the body of the current part to a new MIME multipart object with the provided MIME type and boundary."
      ],
      [
        "raw(java.io.InputStream)",
        "throws an exception stating that it is not implemented when attempting to read a raw input stream."
      ],
      [
        "preamble(java.io.InputStream)",
        "sets the preamble of a MimeMultipart object by copying data from an input stream."
      ],
      [
        "endMultipart()",
        "ends the parsing of a multipart email message and removes the current part from the stack."
      ],
      [
        "startMessage()",
        "starts the processing of a message by initializing the appropriate data structures."
      ],
      [
        "field(org.apache.james.mime4j.stream.Field)",
        "adds the name and raw value of a parsed MIME field to a mail Part object."
      ]
    ],
    "interface com.fsck.k9.mailstore.LockableDatabase$SchemaDefinition": [
      [
        "getVersion()",
        "returns the version of the database schema definition of a lockable database in the K-9 email client."
      ],
      [
        "doDbUpgrade(android.database.sqlite.SQLiteDatabase)",
        "performs a database upgrade on a non-null instance of SQLite database."
      ]
    ],
    "class com.fsck.k9.mailstore.MessageViewInfoExtractor": [
      [
        "extractMessageForView(com.fsck.k9.mail.Message,com.fsck.k9.ui.crypto.MessageCryptoAnnotations)",
        "extracts message information for viewing, including whether or not it is encrypted and if there are any associated annotations."
      ],
      [
        "getInstance()",
        "returns an instance of the MessageViewInfoExtractor class configured with specific dependencies."
      ]
    ],
    "class com.fsck.k9.mailstore.StorageManager$InternalStorageProvider": [
      [
        "getRoot(android.content.Context)",
        "returns the root directory of the internal storage provider."
      ],
      [
        "isReady(android.content.Context)",
        "always returns `true` to indicate that the storage provider is ready."
      ],
      [
        "getDatabase(android.content.Context,java.lang.String)",
        "returns the file path for a database with a specific ID in the context's internal storage."
      ],
      [
        "getName(android.content.Context)",
        "returns the name of the internal storage provider label as a string."
      ],
      [
        "isSupported(android.content.Context)",
        "overrides the isSupported method of the parent class to always return true, indicating that the internal storage provider is supported."
      ],
      [
        "getAttachmentDirectory(android.content.Context,java.lang.String)",
        "returns the file path for storing an attachment associated with a given identifier in the app's internal storage database directory."
      ],
      [
        "init(android.content.Context)",
        "initializes the storage manager's internal storage provider by setting the root directory to the device's root directory."
      ],
      [
        "getId()",
        "returns the ID of the internal storage provider of the StorageManager class in the K-9 Mail client for Android."
      ]
    ],
    "class com.fsck.k9.mailstore.MessageViewInfo": [
      [
        "createWithErrorState(com.fsck.k9.mail.Message,boolean)",
        "creates a new message view info object with an error state and incomplete message flag based on the provided message."
      ]
    ],
    "class com.fsck.k9.mailstore.AttachmentResolver": [
      [
        "getAttachmentUriForContentId(java.lang.String)",
        "(no description)"
      ],
      [
        "createFromPart(com.fsck.k9.mail.Part)",
        "creates an AttachmentResolver object from a given mail part by extracting attachment info and building a map of content IDs to attachment URIs."
      ]
    ],
    "class com.fsck.k9.mailstore.DeferredFileBody": [
      [
        "writeTo(java.io.OutputStream)",
        "writes the contents of an input stream to an output stream."
      ],
      [
        "getEncoding()",
        "returns the encoding of a file body as a string."
      ],
      [
        "setEncoding(java.lang.String)",
        "throws an exception when attempting to change the encoding of a decrypted temporary file body object."
      ],
      [
        "getSize()",
        "returns the size of the file or data stored in the `DeferredFileBody` object, or throws an exception if data is not fully written."
      ],
      [
        "getInputStream()",
        "returns an InputStream for the either memory-backed or file-backed decrypted data of a mail body."
      ],
      [
        "getFile()",
        "returns the file associated with the DeferredFileBody object, creating it first if it doesn't already exist."
      ],
      [
        "getOutputStream()",
        "returns an output stream that writes to a deferred file output stream."
      ]
    ],
    "class com.fsck.k9.mailstore.FileBackedBody": [
      [
        "getInputStream()",
        "returns an input stream that reads from a file."
      ],
      [
        "writeTo(java.io.OutputStream)",
        "copies the content of an input stream to an output stream and writes it to a file."
      ],
      [
        "setEncoding(java.lang.String)",
        "throws a RuntimeException as it is not supported."
      ],
      [
        "getEncoding()",
        "returns the encoding of a file-backed email body."
      ],
      [
        "getSize()",
        "returns the size of the file associated with the body of an email message."
      ]
    ],
    "class com.fsck.k9.mailstore.LocalBodyPart": [
      [
        "getAccountUuid()",
        "returns the account UUID associated with a local body part in email storage."
      ],
      [
        "getMessage()",
        "returns the LocalMessage associated with this LocalBodyPart."
      ],
      [
        "getSize()",
        "returns the size of the local body part."
      ],
      [
        "getPartId()",
        "returns the ID of the local message part."
      ]
    ],
    "abstract class com.fsck.k9.mailstore.StorageManager$FixedStorageProviderBase": [
      [
        "init(android.content.Context)",
        "initializes the storage provider by computing the root directory based on the context and setting the application directory to a subdirectory called \"k9\"."
      ],
      [
        "getAttachmentDirectory(android.content.Context,java.lang.String)",
        "returns a file object representing the directory for attachments associated with a specific ID within the application directory."
      ],
      [
        "getDatabase(android.content.Context,java.lang.String)",
        "returns a File object representing the database file with the given id in the given application context's directory."
      ],
      [
        "isSupported(android.content.Context)",
        "checks if the storage root directory is a directory and if the vendor is supported, and then returns a boolean value indicating if it is supported."
      ],
      [
        "isReady(android.content.Context)",
        "checks if the specified root directory is ready for use as a fixed storage provider by verifying if it is a mount point and if the external storage state is mounted."
      ],
      [
        "getRoot(android.content.Context)",
        "returns the root file for the storage provider."
      ]
    ],
    "interface com.fsck.k9.mailstore.StorageManager$StorageProvider": [
      [
        "init(android.content.Context)",
        "initializes the storage provider in the email client with the provided Android context."
      ],
      [
        "getRoot(android.content.Context)",
        "returns the root directory of the denoted storage for a given Android context."
      ],
      [
        "getAttachmentDirectory(android.content.Context,java.lang.String)",
        "returns a File object representing the chosen attachment directory given a context and an ID, which may or may not match an existing directory on the filesystem."
      ],
      [
        "getName(android.content.Context)",
        "returns a localized name for the storage provider using the given Android context."
      ],
      [
        "isSupported(android.content.Context)",
        "checks whether a storage provider implementation is compatible with the current device."
      ],
      [
        "isReady(android.content.Context)",
        "checks if the underlying storage provided by the implementation is ready for read/write operations at the time of invocation."
      ],
      [
        "getDatabase(android.content.Context,java.lang.String)",
        "returns a file object corresponding to the chosen email database identified by the given ID."
      ],
      [
        "getId()",
        "returns a unique identifier for the implementation of the storage provider."
      ]
    ],
    "class com.fsck.k9.mailstore.LocalMessage": [
      [
        "getDatabaseId()",
        "returns the database ID of a local email message."
      ],
      [
        "setFlag(com.fsck.k9.mail.Flag,boolean)",
        "sets a flag on a local email message and updates its corresponding database record."
      ],
      [
        "getPreviewType()",
        "returns the preview type of a local email message."
      ],
      [
        "getFolder()",
        "returns a locally stored folder for a given email message."
      ],
      [
        "equals(java.lang.Object)",
        "overrides the `equals` method inherited from the parent class to compare LocalMessage objects based on their account UUIDs in addition to the parent class comparison."
      ],
      [
        "clone()",
        "creates a clone of a LocalMessage object with the same data and properties."
      ],
      [
        "setSubject(java.lang.String)",
        "sets the subject of a local email message and marks the header as needing updating."
      ],
      [
        "getThreadId()",
        "returns the ID of a thread associated with a local email message in the K9 email client."
      ],
      [
        "getMessagePartId()",
        "returns the message part ID of a local email message."
      ],
      [
        "hasAttachments()",
        "checks if a local message has any attachments by returning a boolean value based on whether the attachment count is greater than zero."
      ],
      [
        "hashCode()",
        "calculates a unique hash code for an instance of the `LocalMessage` class based on its parent class's hash code and the hash code of its account UUID."
      ],
      [
        "getUri()",
        "returns a URI string representing the unique identifier of a local email message."
      ],
      [
        "setMessageId(java.lang.String)",
        "sets the message ID of a local email message and marks the message header as needing an update."
      ],
      [
        "getAccount()",
        "returns the account associated with the local store of the email message."
      ],
      [
        "getSubject()",
        "returns the subject of a local email message stored in the K-9 Mail application."
      ],
      [
        "writeTo(java.io.OutputStream)",
        "writes the message to an output stream, updating the header first if necessary."
      ],
      [
        "getPreview()",
        "returns a preview string of the local email message."
      ],
      [
        "debugClearLocalData()",
        "clears local data related to a message for debugging purposes."
      ],
      [
        "setRecipients(com.fsck.k9.mailstore.RecipientType,com.fsck.k9.mail.Address[])",
        "sets the recipients (To, Cc, Bcc) of a local email message and updates its headers."
      ],
      [
        "setReplyTo(com.fsck.k9.mail.Address[])",
        "sets the \"reply to\" field of a local email message with the provided array of email addresses or null if the array is empty."
      ],
      [
        "setFlagInternal(com.fsck.k9.mail.Flag,boolean)",
        "sets or removes a specific flag on the LocalMessage object, by calling the super class's setFlag method."
      ],
      [
        "destroy()",
        "completely removes a message from the local database."
      ],
      [
        "setUid(java.lang.String)",
        "sets the message UID and resets the message reference to null."
      ],
      [
        "getRootId()",
        "returns the root ID of a local email message in K-9 Mail."
      ],
      [
        "makeMessageReference()",
        "creates a message reference object for a local email message."
      ],
      [
        "getMimeType()",
        "returns the MIME type of a LocalMessage object."
      ],
      [
        "setFrom(com.fsck.k9.mail.Address)",
        "sets the sender address of a local email message and marks the header as needing an update."
      ]
    ],
    "class com.fsck.k9.mailstore.MimePartStreamParser": [
      [
        "parse(com.fsck.k9.mailstore.util.FileFactory,java.io.InputStream)",
        "parses a MIME message from an input stream using the Mime4j library and returns it as a MimeBodyPart object."
      ]
    ],
    "interface com.fsck.k9.mailstore.StorageManager$StorageListener": [
      [
        "onMount(java.lang.String)",
        "gets invoked when a storage is mounted with read/write access and provides the identifier of the mounted storage."
      ],
      [
        "onUnmount(java.lang.String)",
        "is invoked when a storage is about to be unmounted and takes the identifier of the to-be-unmounted storage as a parameter."
      ]
    ],
    "interface com.fsck.k9.mailstore.LocalStore$BatchSetSelection": [
      [
        "getListItem(int)",
        "returns the item at a specific index in a list of Strings."
      ],
      [
        "getListSize()",
        "returns the size of an argument list."
      ],
      [
        "doDbWork(android.database.sqlite.SQLiteDatabase,java.lang.String,java.lang.String[])",
        "executes a SQL statement with a given set of arguments in a SQLite database."
      ],
      [
        "postDbWork()",
        "executes after every invocation of `doDbWork()` once the transaction has been committed."
      ]
    ],
    "interface com.fsck.k9.mailstore.LocalPart": [
      [
        "getPartId()",
        "returns the unique ID of a mail part stored locally."
      ],
      [
        "getSize()",
        "returns the size of the local part of an email message in bytes."
      ],
      [
        "getMessage()",
        "returns a local message object associated with this interface."
      ],
      [
        "getAccountUuid()",
        "returns the UUID of the account associated with the local part."
      ]
    ],
    "class com.fsck.k9.mailstore.StorageManager": [
      [
        "getDefaultProviderId()",
        "returns the ID of the default email storage provider."
      ],
      [
        "onAfterUnmount(java.lang.String)",
        "logs an info message, updates the synchronization aid, and enables K9 services."
      ],
      [
        "addListener(com.fsck.k9.mailstore.StorageManager$StorageListener)",
        "adds a listener to the storage manager's list of storage listeners."
      ],
      [
        "onBeforeUnmount(java.lang.String)",
        "notifies all the storage listeners that a certain storage path is unmounting and sets a flag indicating that the provider is unmounting."
      ],
      [
        "getDatabase(java.lang.String,java.lang.String)",
        "returns the resolved database file for a given provider ID."
      ],
      [
        "removeListener(com.fsck.k9.mailstore.StorageManager$StorageListener)",
        "removes a listener from the list of storage listeners."
      ],
      [
        "getAttachmentDirectory(java.lang.String,java.lang.String)",
        "returns the attachment directory for a given provider ID and database name."
      ],
      [
        "getInstance(android.content.Context)",
        "returns a singleton instance of the StorageManager class based on the provided Android context."
      ],
      [
        "isReady(java.lang.String)",
        "checks whether the specified storage provider is ready for read/write operations."
      ],
      [
        "unlockProvider(java.lang.String)",
        "unlocks a storage provider identified by a given ID."
      ],
      [
        "isMountPoint(java.io.File)",
        "checks if the specified file matches a filesystem root."
      ],
      [
        "lockProvider(java.lang.String)",
        "tries to obtain a lock on the underlying storage to prevent concurrent unmounting."
      ],
      [
        "onMount(java.lang.String,boolean)",
        "(no description)"
      ],
      [
        "getAvailableProviders()",
        "returns a map of available storage providers, indexed by their ID."
      ]
    ],
    "abstract class com.fsck.k9.mailstore.BinaryAttachmentBody": [
      [
        "setEncoding(java.lang.String)",
        "sets the encoding value for the binary attachment body in a K9 email client."
      ],
      [
        "writeTo(java.io.OutputStream)",
        "writes the content of a binary attachment body to an output stream with optional Base64 or quoted printable encoding."
      ],
      [
        "getInputStream()",
        "returns an InputStream that can be used to read the contents of a binary attachment."
      ],
      [
        "getEncoding()",
        "returns the encoding used by a binary attachment body."
      ]
    ],
    "class com.fsck.k9.mailstore.StoreSchemaDefinition": [
      [
        "getVersion()",
        "returns the version number of the local database used by the mail store."
      ],
      [
        "doDbUpgrade(android.database.sqlite.SQLiteDatabase)",
        "upgrades the database schema and handles any exceptions that may occur during the upgrade process."
      ]
    ]
  },
  "com.fsck.k9.mailstore.migrations": {
    "class com.fsck.k9.mailstore.migrations.MigrationTo61": [
      [
        "removeErrorsFolder(android.database.sqlite.SQLiteDatabase)",
        "removes the \"K9mail-errors\" folder from the database's list of folders."
      ]
    ],
    "class com.fsck.k9.mailstore.migrations.MigrationTo44": [
      [
        "addMessagesThreadingColumns(android.database.sqlite.SQLiteDatabase)",
        "adds four new columns to the \"messages\" table in an SQLite database for email threading purposes."
      ]
    ],
    "class com.fsck.k9.mailstore.migrations.MigrationTo54": [
      [
        "addPreviewTypeColumn(android.database.sqlite.SQLiteDatabase)",
        "adds a new column called 'preview_type' to the 'messages' table in the SQLite database and sets its default value to \"none,\" but also updates any messages that have a 'preview' to have their 'preview_type' set to \"text.\""
      ]
    ],
    "class com.fsck.k9.mailstore.migrations.MigrationTo42": [
      [
        "from41MoveFolderPreferences(com.fsck.k9.mailstore.migrations.MigrationsHelper)",
        "moves folder preferences from a LocalStore to the SharedPreferences in order to upgrade from a specific version of a database to version 42."
      ]
    ],
    "class com.fsck.k9.mailstore.migrations.MigrationTo37": [
      [
        "addAttachmentsContentDispositionColumn(android.database.sqlite.SQLiteDatabase)",
        "adds a new column called \"content_disposition\" to the \"attachments\" table in a SQLite database."
      ]
    ],
    "class com.fsck.k9.mailstore.migrations.MigrationTo60": [
      [
        "migratePendingCommands(android.database.sqlite.SQLiteDatabase)",
        "migrates pending commands stored in a SQLite database to a new table format."
      ]
    ],
    "class com.fsck.k9.mailstore.migrations.MigrationTo40": [
      [
        "addMimeTypeColumn(android.database.sqlite.SQLiteDatabase)",
        "adds a new \"mime_type\" column of type TEXT to the \"messages\" table in an SQLite database."
      ]
    ],
    "class com.fsck.k9.mailstore.migrations.MigrationTo32": [
      [
        "updateDeletedColumnFromFlags(android.database.sqlite.SQLiteDatabase)",
        "updates the \"deleted\" column value to 1 for all messages in the specified database where the \"flags\" column contains the string \"DELETED\"."
      ]
    ],
    "class com.fsck.k9.mailstore.migrations.MigrationTo52": [
      [
        "addMoreMessagesColumnToFoldersTable(android.database.sqlite.SQLiteDatabase)",
        "adds a new column called `more_messages` with a default value of \"unknown\" to the \"folders\" table in a SQLite database."
      ]
    ],
    "class com.fsck.k9.mailstore.migrations.MigrationTo36": [
      [
        "addAttachmentsContentIdColumn(android.database.sqlite.SQLiteDatabase)",
        "adds a \"content_id\" column to the \"attachments\" table of a SQLite database used by an email application."
      ]
    ],
    "class com.fsck.k9.mailstore.migrations.MigrationTo51": [
      [
        "db51MigrateMessageFormat(android.database.sqlite.SQLiteDatabase,com.fsck.k9.mailstore.migrations.MigrationsHelper)",
        "migrates the message table structure from an old format to a new one, recreating the MIME structure of each message from its content and attachments, and updating message metadata accordingly."
      ]
    ],
    "class com.fsck.k9.mailstore.migrations.MigrationTo35": [
      [
        "updateRemoveXNoSeenInfoFlag(android.database.sqlite.SQLiteDatabase)",
        "updates the messages table in a SQLite database by replacing the flag \"X_NO_SEEN_INFO\" with \"X_BAD_FLAG\"."
      ]
    ],
    "class com.fsck.k9.mailstore.migrations.MigrationTo45": [
      [
        "changeThreadingIndexes(android.database.sqlite.SQLiteDatabase)",
        "changes the threading indexes in a SQLiteDatabase to improve message thread performance."
      ]
    ],
    "class com.fsck.k9.mailstore.migrations.MigrationTo33": [
      [
        "addPreviewColumn(android.database.sqlite.SQLiteDatabase)",
        "adds a column called \"preview\" to the \"messages\" table in an SQLite database."
      ]
    ],
    "class com.fsck.k9.mailstore.migrations.MigrationTo43": [
      [
        "fixOutboxFolders(android.database.sqlite.SQLiteDatabase,com.fsck.k9.mailstore.migrations.MigrationsHelper)",
        "renames and moves old outbox folders to new folders in K-9 Mail."
      ]
    ],
    "class com.fsck.k9.mailstore.migrations.MigrationTo46": [
      [
        "addMessagesFlagColumns(android.database.sqlite.SQLiteDatabase,com.fsck.k9.mailstore.migrations.MigrationsHelper)",
        "adds flag columns to the messages table of an SQLite database and populates them with values from the existing flags column."
      ]
    ],
    "class com.fsck.k9.mailstore.migrations.MigrationTo39": [
      [
        "headersPruneOrphans(android.database.sqlite.SQLiteDatabase)",
        "deletes orphaned header data from the database."
      ]
    ],
    "class com.fsck.k9.mailstore.migrations.MigrationTo51$MimeStructureState": [
      [
        "applyValues(android.content.ContentValues)",
        "sets values for the \"root\", \"parent\", and \"seq\" columns in a ContentValues object, with certain conditions and checks in place."
      ],
      [
        "popParent()",
        "pops the current parent from the state stack and returns the previous parent."
      ],
      [
        "nextMultipartChild(long)",
        "returns a new `MimeStructureState` object with updated values for `rootPartId`, `parentId`, `newPartId`, and `nextOrder` based on the input parameter `newPartId`."
      ],
      [
        "getNewRootState()",
        "creates a new instance of the `MimeStructureState` class with default values for its properties."
      ],
      [
        "nextChild(long)",
        "returns a new instance of the `MimeStructureState` class with updated properties based on the `newPartId` parameter and the current state of the instance."
      ]
    ],
    "interface com.fsck.k9.mailstore.migrations.MigrationsHelper": [
      [
        "getLocalStore()",
        "returns a `LocalStore` object related to email migration."
      ],
      [
        "getStorage()",
        "returns a reference to the storage object used by K-9 Mail app."
      ],
      [
        "getContext()",
        "returns the context of the Android application."
      ],
      [
        "serializeFlags(java.util.List)",
        "serializes a list of email flags into a string."
      ],
      [
        "getAccount()",
        "returns a K9 mail account."
      ]
    ],
    "class com.fsck.k9.mailstore.migrations.MigrationTo48": [
      [
        "updateThreadsSetRootWhereNull(android.database.sqlite.SQLiteDatabase)",
        "updates the \"threads\" table in a SQLite database by setting the \"root\" column to the \"id\" value where it is null, and creates a trigger to ensure this is done automatically for future table inserts with null \"root\" values."
      ]
    ],
    "class com.fsck.k9.mailstore.migrations.MigrationTo53": [
      [
        "removeNullValuesFromEmptyColumnInMessagesTable(android.database.sqlite.SQLiteDatabase)",
        "updates the \"empty\" column in the \"messages\" table of a SQLite database to set any null values to 0."
      ]
    ],
    "class com.fsck.k9.mailstore.migrations.MigrationTo50": [
      [
        "foldersAddNotifyClassColumn(android.database.sqlite.SQLiteDatabase,com.fsck.k9.mailstore.migrations.MigrationsHelper)",
        "adds a notify_class column to the folders table in an SQLite database used by the K9 email client, with a default value of \"INHERITED\", and sets the value of the notify_class column to \"FIRST_CLASS\" for the account's inbox folder."
      ]
    ],
    "class com.fsck.k9.mailstore.migrations.MigrationTo41": [
      [
        "db41FoldersAddClassColumns(android.database.sqlite.SQLiteDatabase)",
        "adds several columns to the \"folders\" table in a SQLite database."
      ],
      [
        "db41UpdateFolderMetadata(android.database.sqlite.SQLiteDatabase,com.fsck.k9.mailstore.migrations.MigrationsHelper)",
        "selects all folders' id and name from the database, and updates their metadata to version 41 using a helper class and logs any errors that occur."
      ]
    ],
    "class com.fsck.k9.mailstore.migrations.MigrationTo49": [
      [
        "createMsgCompositeIndex(android.database.sqlite.SQLiteDatabase)",
        "creates a composite index on the \"messages\" table in the SQLite database with specific columns."
      ]
    ],
    "class com.fsck.k9.mailstore.migrations.Migrations": [
      [
        "upgradeDatabase(android.database.sqlite.SQLiteDatabase,com.fsck.k9.mailstore.migrations.MigrationsHelper)",
        "upgrades the SQLite database used by K-9 Mail to the latest schema version by applying a series of migrations sequentially."
      ]
    ],
    "class com.fsck.k9.mailstore.migrations.MigrationTo47": [
      [
        "createThreadsTable(android.database.sqlite.SQLiteDatabase)",
        "creates a new 'threads' table and migrates thread-related data from 'messages' table to the new table."
      ]
    ],
    "class com.fsck.k9.mailstore.migrations.MigrationTo31": [
      [
        "changeMsgFolderIdDeletedDateIndex(android.database.sqlite.SQLiteDatabase)",
        "updates the index on the \"messages\" table in the SQLite database by dropping the \"msg_folder_id_date\" index and creating a new \"msg_folder_id_deleted_date\" index on the columns \"folder_id\", \"deleted\", and \"internal_date\"."
      ]
    ],
    "class com.fsck.k9.mailstore.migrations.MigrationTo30": [
      [
        "addDeletedColumn(android.database.sqlite.SQLiteDatabase)",
        "adds a column called \"deleted\" to the \"messages\" table in a SQLite database, with a default value of 0, and handles a possible error of a duplicate column name."
      ]
    ],
    "class com.fsck.k9.mailstore.migrations.MigrationTo34": [
      [
        "addFlaggedCountColumn(android.database.sqlite.SQLiteDatabase)",
        "adds a new column called \"flagged_count\" to the \"folders\" table in a SQLite database, with a default value of 0, as long as the column doesn't already exist."
      ]
    ]
  },
  "com.fsck.k9.mailstore.util": {
    "class com.fsck.k9.mailstore.util.DeferredFileOutputStream": [
      [
        "getData()",
        "returns a byte array of the data written to the output stream if the output stream is currently in memory-backed state, otherwise it throws an exception."
      ],
      [
        "getFile()",
        "returns the file associated with the `DeferredFileOutputStream` object if it is in file-backed state, otherwise throws an exception."
      ]
    ],
    "interface com.fsck.k9.mailstore.util.FileFactory": [
      [
        "createFile()",
        "creates a new file and returns the `java.io.File` object representing the newly created file."
      ]
    ],
    "class com.fsck.k9.mailstore.util.FlowedMessageUtils": [
      [
        "deflow(java.lang.String,boolean)",
        "decodes text that was previously wrapped according to the \"format=flowed\" standard."
      ],
      [
        "flow(java.lang.String,boolean)",
        "encodes a text using standard flow."
      ],
      [
        "flow(java.lang.String,boolean,int)",
        "flows a given text by breaking it into lines of a specified width, removing quote indicators and adding soft line breaks as necessary."
      ],
      [
        "isAlphaChar(java.lang.String,int)",
        "checks whether a character in a given string is part of a word based on RFC specifications."
      ]
    ]
  },
  "com.fsck.k9.message": {
    "class com.fsck.k9.message.IdentityHeaderBuilder": [
      [
        "setQuoteTextMode(com.fsck.k9.message.QuotedTextMode)",
        "sets the `quotedTextMode` property of an `IdentityHeaderBuilder` instance and returns the instance itself."
      ],
      [
        "setIdentity(com.fsck.k9.Identity)",
        "sets the identity of a message header builder and returns the builder instance."
      ],
      [
        "setMessageFormat(com.fsck.k9.message.SimpleMessageFormat)",
        "sets the message format for the IdentityHeaderBuilder object and returns the object itself."
      ],
      [
        "setQuotedHtmlContent(com.fsck.k9.message.quote.InsertableHtmlContent)",
        "sets the quoted HTML content for the email message."
      ],
      [
        "setCursorPosition(int)",
        "sets the cursor position within the IdentityHeaderBuilder object and returns the modified object."
      ],
      [
        "setSignature(java.lang.String)",
        "sets the signature of an IdentityHeaderBuilder object and returns the modified object itself."
      ],
      [
        "build()",
        "builds a URL-encoded key/value pair string containing metadata about a draft message, to be used upon loading a draft for composition."
      ],
      [
        "setIdentityChanged(boolean)",
        "sets the value of the boolean variable `identityChanged` and returns an instance of `IdentityHeaderBuilder`."
      ],
      [
        "setMessageReference(com.fsck.k9.activity.MessageReference)",
        "sets a message reference for the identity header builder."
      ],
      [
        "setQuoteStyle(com.fsck.k9.Account$QuoteStyle)",
        "sets the quote style for a message identity header builder object."
      ],
      [
        "setBodyPlain(com.fsck.k9.mail.internet.TextBody)",
        "sets the plain text body of an email message."
      ],
      [
        "setBody(com.fsck.k9.mail.internet.TextBody)",
        "sets the content body of an email message in the IdentityHeaderBuilder class."
      ],
      [
        "setSignatureChanged(boolean)",
        "sets a boolean value to indicate if the signature has been changed for a message's IdentityHeaderBuilder object."
      ]
    ],
    "interface com.fsck.k9.message.MessageBuilder$Callback": [
      [
        "onMessageBuildCancel()",
        "notifies that the message build process has been cancelled."
      ],
      [
        "onMessageBuildReturnPendingIntent(android.app.PendingIntent,int)",
        "receives a pending intent and request code as parameters when a message build is complete and returns a PendingIntent."
      ],
      [
        "onMessageBuildException(com.fsck.k9.mail.MessagingException)",
        "notifies the callback of an exception that occurred during the message building process."
      ],
      [
        "onMessageBuildSuccess(com.fsck.k9.mail.internet.MimeMessage,boolean)",
        "is called when a MimeMessage is successfully built by the MessageBuilder, passing the created MimeMessage and a boolean indicating if it is a draft."
      ]
    ],
    "class com.fsck.k9.message.SimpleMessageBuilder": [
      [
        "newInstance()",
        "returns a new instance of `SimpleMessageBuilder` class with a specific context, message ID generator, and boundary generator."
      ]
    ],
    "class com.fsck.k9.message.AutocryptStatusInteractor$RecipientAutocryptStatus": [
      [
        "hasPendingIntent()",
        "checks if the Intent object is not null and returns a boolean value accordingly."
      ]
    ],
    "class com.fsck.k9.message.PgpMessageBuilder": [
      [
        "buildMessageOnActivityResult(int,android.content.Intent)",
        "builds a Pgp message based on the result of a user interaction activity."
      ],
      [
        "setCryptoStatus(com.fsck.k9.activity.compose.ComposeCryptoStatus)",
        "sets the cryptographic status of a ComposeCryptoStatus object for a PgpMessageBuilder."
      ],
      [
        "setOpenPgpApi(org.openintents.openpgp.util.OpenPgpApi)",
        "sets the `openPgpApi` instance variable of the `PgpMessageBuilder` class to the provided `OpenPgpApi` object."
      ],
      [
        "newInstance()",
        "creates a new instance of the `PgpMessageBuilder` class with various dependencies initialized."
      ]
    ],
    "class com.fsck.k9.message.ComposePgpEnableByDefaultDecider": [
      [
        "shouldEncryptByDefault(com.fsck.k9.mail.Message)",
        "determines if a given email message should be encrypted by default based on whether the message is already encrypted or not."
      ]
    ],
    "class com.fsck.k9.message.ComposePgpInlineDecider": [
      [
        "shouldReplyInline(com.fsck.k9.mail.Message)",
        "determines whether a given email message should be replied to inline if it contains PGP inline parts."
      ]
    ],
    "enum com.fsck.k9.message.AutocryptStatusInteractor$RecipientAutocryptStatusType": [
      [
        "canEncrypt()",
        "returns a boolean indicating whether or not encryption is possible for the recipient's Autocrypt status."
      ],
      [
        "isMutual()",
        "returns whether the recipient's Autocrypt status is mutual or not."
      ],
      [
        "isConfirmed()",
        "returns a boolean indicating whether the recipient's Autocrypt status has been confirmed."
      ]
    ],
    "enum com.fsck.k9.message.IdentityField": [
      [
        "getIntegerFields()",
        "returns an array of IdentityFields that represent integer values and are used for sanity checking during decoding."
      ],
      [
        "value()",
        "returns the value of the enum constant as a String."
      ]
    ],
    "class com.fsck.k9.message.TextBodyBuilder": [
      [
        "setAppendSignature(boolean)",
        "sets a boolean value that determines whether or not to append a signature to the text body."
      ],
      [
        "buildTextPlain()",
        "builds a plain text message body, potentially including quoted text and a signature."
      ],
      [
        "setQuotedText(java.lang.String)",
        "sets the quoted text of a text body builder object in Java."
      ],
      [
        "setInsertSeparator(boolean)",
        "sets a boolean value that determines whether a separator should be inserted in the text body."
      ],
      [
        "setReplyAfterQuote(boolean)",
        "sets whether the reply should be positioned after the quoted text or not in a text body builder."
      ],
      [
        "buildTextHtml()",
        "builds the body of a text message with an optional quoted original message and signature, and converts the text to HTML."
      ],
      [
        "setIncludeQuotedText(boolean)",
        "sets a boolean value to determine whether or not quoted text should be included in the body of an email message."
      ],
      [
        "setQuotedTextHtml(com.fsck.k9.message.quote.InsertableHtmlContent)",
        "sets HTML content to be used as quoted text."
      ],
      [
        "setSignature(java.lang.String)",
        "sets the signature attribute of the TextBodyBuilder instance to the passed string."
      ],
      [
        "setSignatureBeforeQuotedText(boolean)",
        "sets a boolean flag for whether the email signature should appear before or after the quoted text in an email message."
      ]
    ],
    "class com.fsck.k9.message.AutocryptStatusInteractor": [
      [
        "getInstance()",
        "returns an instance of the `AutocryptStatusInteractor` class."
      ],
      [
        "retrieveCryptoProviderRecipientStatus(org.openintents.openpgp.util.OpenPgpApi,java.lang.String[])",
        "retrieves the Autocrypt status of one or more recipients using the OpenPGP API and returns it as a `RecipientAutocryptStatus`."
      ]
    ],
    "class com.fsck.k9.message.IdentityHeaderParser": [
      [
        "parse(java.lang.String)",
        "parses an encoded identity string and returns a map containing the value for each IdentityField in the identity string."
      ]
    ],
    "abstract class com.fsck.k9.message.MessageBuilder": [
      [
        "setSubject(java.lang.String)",
        "sets the subject of an email message being built and returns a reference to the instance of the message builder."
      ],
      [
        "setCc(java.util.List)",
        "sets the carbon copy recipients for the email being built."
      ],
      [
        "setRequestReadReceipt(boolean)",
        "sets whether a read receipt should be requested for the message being built."
      ],
      [
        "setCursorPosition(int)",
        "sets the cursor position of the message being built to the specified position and returns the instance of the MessageBuilder class."
      ],
      [
        "setReplyAfterQuote(boolean)",
        "sets whether the reply is placed after or before the quoted text in the message builder."
      ],
      [
        "setQuotedHtmlContent(com.fsck.k9.message.quote.InsertableHtmlContent)",
        "sets the quoted HTML content of a message builder object."
      ],
      [
        "setInReplyTo(java.lang.String)",
        "sets the \"in reply to\" message ID for a message being built and returns the message builder object."
      ],
      [
        "setBcc(java.util.List)",
        "sets the Bcc recipients of a message being built by the MessageBuilder class."
      ],
      [
        "setSignature(java.lang.String)",
        "sets the signature of the message being built."
      ],
      [
        "setSignatureChanged(boolean)",
        "sets a boolean flag indicating whether the signature of a message has been changed."
      ],
      [
        "setIsPgpInlineEnabled(boolean)",
        "sets a boolean flag for whether PGP inline encryption is enabled or not in the message builder."
      ],
      [
        "setIdentity(com.fsck.k9.Identity)",
        "sets the identity of the message being built in the message builder."
      ],
      [
        "setAttachments(java.util.List)",
        "sets a list of attachments for the message being constructed."
      ],
      [
        "setMessageReference(com.fsck.k9.activity.MessageReference)",
        "sets the message reference for the email being built by the `MessageBuilder` object."
      ],
      [
        "reattachCallback(com.fsck.k9.message.MessageBuilder$Callback)",
        "attaches a new callback to the message builder and delivers the result if computation has completed."
      ],
      [
        "setSentDate(java.util.Date)",
        "sets the date and time when the message was sent and returns the updated message builder object."
      ],
      [
        "buildAsync(com.fsck.k9.message.MessageBuilder$Callback)",
        "asynchronously builds a message and delivers the result through a provided callback."
      ],
      [
        "setReferences(java.lang.String)",
        "sets a message's references and returns the updated message builder."
      ],
      [
        "setDraft(boolean)",
        "sets a boolean value indicating whether the message is a draft and returns the MessageBuilder object."
      ],
      [
        "setQuotedText(java.lang.String)",
        "sets the quoted text of a message and returns a MessageBuilder object."
      ],
      [
        "setSignatureBeforeQuotedText(boolean)",
        "sets whether the signature should be placed before or after the quoted text in an email message being built."
      ],
      [
        "onActivityResult(int,int,android.content.Intent,com.fsck.k9.message.MessageBuilder$Callback)",
        "handles the result of a previously started activity by building a message and delivering the result."
      ],
      [
        "detachCallback()",
        "temporarily removes the callback for message building, so that any results received during this time are delayed and delivered upon reattachment."
      ],
      [
        "isDraft()",
        "returns a boolean value indicating whether the message being constructed is a draft or not."
      ],
      [
        "setQuoteStyle(com.fsck.k9.Account$QuoteStyle)",
        "sets the quote style for the message being built."
      ],
      [
        "setIdentityChanged(boolean)",
        "sets the \"identityChanged\" flag to either true or false and returns the updated MessageBuilder object."
      ],
      [
        "setMessageFormat(com.fsck.k9.message.SimpleMessageFormat)",
        "sets the message format for the email message being constructed using the SimpleMessageFormat enum and returns the MessageBuilder object."
      ],
      [
        "setHideTimeZone(boolean)",
        "allows to set a boolean flag indicating whether or not to hide the time zone in a message builder."
      ],
      [
        "setText(java.lang.String)",
        "sets the text content of a message builder object and returns the same object."
      ],
      [
        "setTo(java.util.List)",
        "sets the \"to\" field of a MessageBuilder object to a list of email addresses."
      ],
      [
        "setQuotedTextMode(com.fsck.k9.message.QuotedTextMode)",
        "sets the quoted text mode of a message builder object."
      ]
    ]
  },
  "com.fsck.k9.message.extractors": {
    "class com.fsck.k9.message.extractors.MessagePreviewCreator": [
      [
        "createPreview(com.fsck.k9.mail.Message)",
        "creates a preview of a given email message by checking for encryption and extracting its text content."
      ],
      [
        "newInstance()",
        "creates a new instance of the Java class `com.fsck.k9.message.extractors.MessagePreviewCreator` with specific dependencies."
      ]
    ],
    "class com.fsck.k9.message.extractors.EncryptionDetector": [
      [
        "isEncrypted(com.fsck.k9.mail.Message)",
        "checks if a given email message is encrypted using PGP/MIME or S/MIME, or contains inline PGP-encrypted text."
      ]
    ],
    "class com.fsck.k9.message.extractors.AttachmentCounter": [
      [
        "getAttachmentCount(com.fsck.k9.mail.Message)",
        "counts the number of attachments in a given email message while excluding any encrypted content."
      ],
      [
        "newInstance()",
        "creates a new instance of the `AttachmentCounter` class along with its dependencies."
      ]
    ],
    "class com.fsck.k9.message.extractors.AttachmentInfoExtractor": [
      [
        "extractAttachmentInfoForDatabase(com.fsck.k9.mail.Part)",
        "extracts attachment information for storage in a database from a given email message part."
      ],
      [
        "getInstance()",
        "returns a new instance of the `AttachmentInfoExtractor` class with a `Context` object obtained from `Globals.getContext()`."
      ],
      [
        "extractAttachmentInfo(com.fsck.k9.mail.Part)",
        "extracts information about an email attachment, such as its size, URI, and content availability, based on the provided email part."
      ],
      [
        "extractAttachmentInfoForView(java.util.List)",
        "extracts attachment information from a list of email attachment parts and returns a list of attachment view info objects."
      ]
    ],
    "class com.fsck.k9.message.extractors.PreviewTextExtractor": [
      [
        "extractPreview(com.fsck.k9.mail.Part)",
        "extracts a preview text from a given email part."
      ]
    ],
    "class com.fsck.k9.message.extractors.TextPartFinder": [
      [
        "findFirstTextPart(com.fsck.k9.mail.Part)",
        "returns the first text part found in the given email message part."
      ]
    ],
    "class com.fsck.k9.message.extractors.BodyTextExtractor": [
      [
        "getBodyTextFromMessage(com.fsck.k9.mail.Part,com.fsck.k9.message.SimpleMessageFormat)",
        "extracts the body text from a message part in either HTML or plain text format while handling conversions between the two formats as necessary."
      ]
    ],
    "class com.fsck.k9.message.extractors.PreviewResult": [
      [
        "text(java.lang.String)",
        "creates and returns a new `PreviewResult` object with the preview type \"TEXT\" and the provided preview text."
      ],
      [
        "encrypted()",
        "returns a new instance of PreviewResult with the type set to ENCRYPTED and the content set to null."
      ],
      [
        "getPreviewType()",
        "returns the preview type of a message extracted by the K9 email client."
      ],
      [
        "none()",
        "returns a new PreviewResult object with the PreviewType set to NONE, indicating there is no preview content available."
      ],
      [
        "isPreviewTextAvailable()",
        "checks if the preview type is text and returns a boolean value indicating whether the preview text is available or not."
      ],
      [
        "error()",
        "returns a new instance of PreviewResult with a PreviewType of ERROR and null content."
      ],
      [
        "getPreviewText()",
        "returns the preview text from a message if available, otherwise it throws an IllegalStateException."
      ]
    ],
    "class com.fsck.k9.message.extractors.MessageFulltextCreator": [
      [
        "newInstance()",
        "creates a new instance of `MessageFulltextCreator` class with a `TextPartFinder` and `EncryptionDetector` object."
      ],
      [
        "createFulltext(com.fsck.k9.mail.Message)",
        "creates full text from an email message, but returns null if the message is encrypted."
      ]
    ]
  },
  "com.fsck.k9.message.html": {
    "class com.fsck.k9.message.html.HtmlProcessor": [
      [
        "toCompactString(org.jsoup.nodes.Document)",
        "returns a compact HTML string representation of a JSoup Document object."
      ],
      [
        "newInstance()",
        "creates a new instance of the `HtmlProcessor` class with a new instance of `HtmlSanitizer` as its parameter."
      ],
      [
        "processForDisplay(java.lang.String)",
        "sanitizes the input HTML string, adds custom contents to the head, and returns the compact string representation of the processed HTML for display."
      ]
    ],
    "class com.fsck.k9.message.html.UriLinkifier": [
      [
        "linkifyText(java.lang.String,java.lang.StringBuffer)",
        "parses a given text and converts valid URIs found within it into clickable links."
      ]
    ],
    "interface com.fsck.k9.message.html.UriParser": [
      [
        "linkifyUri(java.lang.String,int,java.lang.StringBuffer)",
        "parses and linkifies a scheme specific URI starting from a given position in a string, and writes the result to a buffer."
      ]
    ],
    "class com.fsck.k9.message.html.HeadCleaner": [
      [
        "clean(org.jsoup.nodes.Document,org.jsoup.nodes.Document)",
        "copies safe nodes from the head of a dirty HTML document to the head of a cleaned HTML document."
      ]
    ],
    "class com.fsck.k9.message.html.HttpUriParser": [
      [
        "linkifyUri(java.lang.String,int,java.lang.StringBuffer)",
        "parses a given URI within a text string and generates an HTML link for it."
      ]
    ],
    "class com.fsck.k9.message.html.HtmlConverter": [
      [
        "wrapMessageContent(java.lang.CharSequence)",
        "wraps a given message content in HTML code that includes a meta tag to ensure the WebView uses the appropriate viewport width, as well as the necessary CSS styles for the message theme and pre-formatted elements."
      ],
      [
        "textToHtml(java.lang.String)",
        "converts a plain text string into an HTML document with smart replacement for large documents to prevent OOM errors."
      ],
      [
        "textToHtmlFragment(java.lang.String)",
        "converts a plain text string into an HTML fragment by encoding entities, linkifying URLs, adding newlines, and unescaping certain characters."
      ],
      [
        "htmlToText(java.lang.String)",
        "converts an HTML string to plain text."
      ],
      [
        "wrapStatusMessage(java.lang.CharSequence)",
        "wraps a status message with HTML tags for display as grey text centered in a div element."
      ],
      [
        "convertEmoji2Img(java.lang.String)",
        "converts emojis in a given HTML string to corresponding image tags."
      ],
      [
        "htmlToSpanned(java.lang.String)",
        "converts an HTML string into a Spanned object that can be used for formatting in a TextView."
      ]
    ],
    "class com.fsck.k9.message.html.EthereumUriParser": [
      [
        "linkifyUri(java.lang.String,int,java.lang.StringBuffer)",
        "searches for Ethereum URIs in a given string and adds HTML links to them in a specified output buffer."
      ]
    ],
    "class com.fsck.k9.message.html.BitcoinUriParser": [
      [
        "linkifyUri(java.lang.String,int,java.lang.StringBuffer)",
        "searches for Bitcoin URIs in a given text and converts them into hyperlinks with an HTML anchor tag."
      ]
    ],
    "class com.fsck.k9.message.html.HtmlSanitizer": [
      [
        "sanitize(java.lang.String)",
        "sanitizes a given HTML string input by cleaning it with JSoup and then returning a cleaned document."
      ]
    ],
    "class com.fsck.k9.message.html.HeadCleaner$CleaningVisitor": [
      [
        "tail(org.jsoup.nodes.Node,int)",
        "updates the destination node to be its parent and sets skipChildren to false if the current node is the same as the destination node."
      ],
      [
        "head(org.jsoup.nodes.Node,int)",
        "parses and filters the `head` section of an HTML document based on certain safe tags and attributes."
      ]
    ],
    "class com.fsck.k9.message.html.HtmlConverter$ListTagHandler": [
      [
        "handleTag(boolean,java.lang.String,android.text.Editable,org.xml.sax.XMLReader)",
        "handles opening and closing list tags and appends appropriate characters to the output String."
      ]
    ],
    "class com.fsck.k9.message.html.HtmlConverter$HtmlToTextTagHandler": [
      [
        "handleTag(boolean,java.lang.String,android.text.Editable,org.xml.sax.XMLReader)",
        "handles HTML tags, such as replacing the <hr> tag with underscores and ignoring certain tags with ignored content."
      ]
    ]
  },
  "com.fsck.k9.message.quote": {
    "class com.fsck.k9.message.quote.InsertableHtmlContent": [
      [
        "setUserContent(java.lang.String)",
        "sets the inserted content of an HTML message to the specified content."
      ],
      [
        "toDebugString()",
        "returns a debug string containing information about the InsertableHtmlContent object."
      ],
      [
        "setQuotedContent(java.lang.StringBuilder)",
        "sets the quoted content for the insertion point in an InsertableHtmlContent object."
      ],
      [
        "setHeaderInsertionPoint(int)",
        "sets the position where a header will be inserted in the HTML content."
      ],
      [
        "getInsertionPoint()",
        "returns the insertion point based on the quote style."
      ],
      [
        "getFooterInsertionPoint()",
        "returns the footer insertion point."
      ],
      [
        "setFooterInsertionPoint(int)",
        "sets the insertion point for a footer in the quoted content of an email."
      ],
      [
        "getQuotedContent()",
        "returns a string containing the quoted content stored in the object."
      ],
      [
        "insertIntoQuotedHeader(java.lang.String)",
        "inserts a given string into the quoted content header of an email message."
      ],
      [
        "toString()",
        "builds a composed string by inserting user content into quoted content at the insertion point and then deleting the original user content."
      ],
      [
        "insertIntoQuotedFooter(java.lang.String)",
        "inserts content into the footer of a quoted message being composed."
      ],
      [
        "clearQuotedContent()",
        "clears all quoted content in the InsertableHtmlContent object."
      ],
      [
        "setInsertionLocation(com.fsck.k9.message.quote.InsertableHtmlContent$InsertionLocation)",
        "sets the location where user content should be inserted in an email message."
      ]
    ],
    "class com.fsck.k9.message.quote.TextQuoteCreator": [
      [
        "quoteOriginalTextMessage(android.content.res.Resources,com.fsck.k9.mail.Message,java.lang.String,com.fsck.k9.Account$QuoteStyle,java.lang.String)",
        "adds quoting markup to a text message."
      ]
    ],
    "class com.fsck.k9.message.quote.HtmlQuoteCreator": [
      [
        "quoteOriginalHtmlMessage(android.content.res.Resources,com.fsck.k9.mail.Message,java.lang.String,com.fsck.k9.Account$QuoteStyle)",
        "adds quoting markup to a HTML message based on the quote style specified in the parameters."
      ]
    ]
  },
  "com.fsck.k9.message.signature": {
    "class com.fsck.k9.message.signature.HtmlSignatureRemover": [
      [
        "stripSignature(java.lang.String)",
        "strips the signature from an HTML-formatted email message."
      ]
    ],
    "class com.fsck.k9.message.signature.HtmlSignatureRemover$StripSignatureFilter": [
      [
        "head(org.jsoup.nodes.Node,int)",
        "checks for the presence of an email signature in the header of an HTML email and removes it if found."
      ],
      [
        "tail(org.jsoup.nodes.Node,int)",
        "controls the removing of email signature HTML elements by analyzing the tail of the HTML content."
      ]
    ],
    "class com.fsck.k9.message.signature.TextSignatureRemover": [
      [
        "stripSignature(java.lang.String)",
        "removes any signature from the given input text content."
      ]
    ]
  },
  "com.fsck.k9.ui": {
    "class com.fsck.k9.ui.EolConvertingEditText": [
      [
        "setCharacters(java.lang.CharSequence)",
        "sets the string value of the EolConvertingEditText and replaces any Windows-style line endings with Unix-style line endings."
      ],
      [
        "getCharacters()",
        "returns the text displayed in the EolConvertingEditText while replacing any line endings with \"\\r\\n\"."
      ]
    ],
    "class com.fsck.k9.ui.ContactBadge": [
      [
        "assignContactFromEmail(java.lang.String,boolean,android.os.Bundle)",
        "assigns a contact based on an email address and can either perform a lookup query immediately or wait until the view is clicked to perform the lookup."
      ],
      [
        "assignContactUri(android.net.Uri)",
        "assigns a contact URI to the ContactBadge and triggers a method call to react to the change."
      ],
      [
        "onInitializeAccessibilityNodeInfo(android.view.accessibility.AccessibilityNodeInfo)",
        "(no description)"
      ],
      [
        "assignContactFromEmail(java.lang.String,boolean)",
        "assigns a contact based on an email address, allowing for lazy lookup if specified."
      ],
      [
        "onInitializeAccessibilityEvent(android.view.accessibility.AccessibilityEvent)",
        "sets the class name for accessibility events generated by the ContactBadge UI element."
      ],
      [
        "onClick(android.view.View)",
        "shows a quick contact dialog when a contact URI is present, otherwise it queries for a contact email and displays the result in the extras bundle."
      ]
    ]
  },
  "com.fsck.k9.ui.compose": {
    "class com.fsck.k9.ui.compose.QuotedMessagePresenter": [
      [
        "populateUIWithQuotedMessage(com.fsck.k9.mailstore.MessageViewInfo,boolean,com.fsck.k9.activity.MessageCompose$Action)",
        "populates the UI with the quoted message of an email being composed, with options to show or hide the quoted text and determine the message format based on the original email."
      ],
      [
        "onRestoreInstanceState(android.os.Bundle)",
        "restores the state of the quoted message content, format, and display mode in the compose screen."
      ],
      [
        "onSaveInstanceState(android.os.Bundle)",
        "saves the current state of the QuotedMessagePresenter object in a Bundle for later restoration."
      ],
      [
        "isForcePlainText()",
        "returns a boolean value indicating whether or not the plain text format is being forced."
      ],
      [
        "includeQuotedText()",
        "determines whether the quoted text should be included in a composed message."
      ],
      [
        "processDraftMessage(com.fsck.k9.mailstore.MessageViewInfo,java.util.Map)",
        "loads and processes a draft message, sets the quoted text mode and format, and displays it in the compose window with the cursor positioned according to the saved draft."
      ],
      [
        "isQuotedTextText()",
        "checks if the quoted text format of a message is plain text."
      ],
      [
        "builderSetProperties(com.fsck.k9.message.MessageBuilder)",
        "sets various properties of a MessageBuilder object based on the state of a QuotedMessagePresenter object."
      ],
      [
        "showOrHideQuotedText(com.fsck.k9.message.QuotedTextMode)",
        "shows or hides the quoted text in a compose window of an email client based on the specified mode."
      ],
      [
        "initFromReplyToMessage(com.fsck.k9.mailstore.MessageViewInfo,com.fsck.k9.activity.MessageCompose$Action)",
        "initializes the quoted message in the compose screen based on the message being replied to."
      ],
      [
        "processMessageToForward(com.fsck.k9.mailstore.MessageViewInfo)",
        "populates the UI with a quoted message for forwarding."
      ],
      [
        "onSwitchAccount(com.fsck.k9.Account)",
        "sets the account to be used for quoting messages in the compose UI of an email client application."
      ]
    ],
    "class com.fsck.k9.ui.compose.QuotedMessageMvpView": [
      [
        "getQuotedText()",
        "returns the quoted text that is currently set in the `mQuotedText` variable of the `QuotedMessageMvpView` class."
      ],
      [
        "setMessageContentCursorPosition(int)",
        "sets the cursor position in the message content view."
      ],
      [
        "addTextChangedListener(android.text.TextWatcher)",
        "adds a `TextWatcher` to the `mQuotedText` object to listen for changes in text and notify the presenter when the draft needs changing."
      ],
      [
        "setQuotedText(java.lang.String)",
        "sets the quoted text in the UI for a Compose Message screen in an Android email app called K-9 Mail."
      ],
      [
        "setOnClickPresenter(com.fsck.k9.ui.compose.QuotedMessagePresenter)",
        "sets an onClickListener for three views and associates it with actions triggered by a QuotedMessagePresenter."
      ],
      [
        "showOrHideQuotedText(com.fsck.k9.message.QuotedTextMode,com.fsck.k9.message.SimpleMessageFormat)",
        "shows or hides quoted text in a compose view based on the specified mode and format."
      ],
      [
        "setMessageContentCharacters(java.lang.String)",
        "sets the text content of a message in a UI view using a string input."
      ],
      [
        "setFontSizes(com.fsck.k9.FontSizes,int)",
        "sets the font sizes for the quoted text in the compose view of an email message."
      ],
      [
        "setQuotedHtml(java.lang.String,com.fsck.k9.mailstore.AttachmentResolver)",
        "displays quoted HTML content with inline attachments using a specified attachment resolver."
      ]
    ]
  },
  "com.fsck.k9.ui.crypto": {
    "class com.fsck.k9.ui.crypto.MessageCryptoAnnotations": [
      [
        "findKeyForAnnotationWithReplacementPart(com.fsck.k9.mail.Part)",
        "searches for a key in a map of annotations that corresponds to a given replacement part of an email message."
      ],
      [
        "isEmpty()",
        "checks if the annotations of a message are empty or not."
      ],
      [
        "get(com.fsck.k9.mail.Part)",
        "gets the CryptoResultAnnotation associated with a given email message part."
      ],
      [
        "has(com.fsck.k9.mail.Part)",
        "checks if the provided email message part has any cryptography annotations attached to it."
      ],
      [
        "put(com.fsck.k9.mail.Part,com.fsck.k9.mailstore.CryptoResultAnnotation)",
        "adds a CryptoResultAnnotation to the annotations map for a specific email message part."
      ]
    ],
    "class com.fsck.k9.ui.crypto.MessageCryptoHelper": [
      [
        "onActivityResult(int,int,android.content.Intent)",
        "handles the result of a user interaction with a cryptographic operation."
      ],
      [
        "isConfiguredForOutdatedCryptoProvider()",
        "checks if the openPGP provider package used by the app is outdated compared to the one set in the app's settings."
      ],
      [
        "cancelIfRunning()",
        "cancels a background operation and sets a flag to indicate that it has been cancelled."
      ],
      [
        "detachCallback()",
        "detaches the callback object from the `MessageCryptoHelper` class."
      ],
      [
        "asyncStartOrResumeProcessingMessage(com.fsck.k9.mail.Message,com.fsck.k9.ui.crypto.MessageCryptoCallback,org.openintents.openpgp.OpenPgpDecryptionResult,boolean)",
        "starts or resumes the processing of a message with regards to message cryptography, either from the beginning or from where it left off previously, with options for processing only signed messages and using cached decryption results."
      ]
    ],
    "interface com.fsck.k9.ui.crypto.MessageCryptoCallback": [
      [
        "startPendingIntentForCryptoHelper(android.content.IntentSender,int,android.content.Intent,int,int,int)",
        "starts an activity in response to a pending intent for a message cryptographic helper with specified parameters."
      ],
      [
        "onCryptoOperationsFinished(com.fsck.k9.ui.crypto.MessageCryptoAnnotations)",
        "notifies the implementing class that the cryptographic operations on a message are finished, passing the annotations related to the operation."
      ],
      [
        "onCryptoHelperProgress(int,int)",
        "receives updates on the progress of a cryptographic operation."
      ]
    ]
  },
  "com.fsck.k9.ui.dialog": {},
  "com.fsck.k9.ui.message": {
    "class com.fsck.k9.ui.message.LocalMessageExtractorLoader": [
      [
        "isCreatedFor(com.fsck.k9.mailstore.LocalMessage,com.fsck.k9.ui.crypto.MessageCryptoAnnotations)",
        "checks if the given `LocalMessage` and `MessageCryptoAnnotations` match the ones stored in this instance of `LocalMessageExtractorLoader`."
      ],
      [
        "loadInBackground()",
        "calls the `extractMessageForView()` method on `messageViewInfoExtractor` to extract the `MessageViewInfo` for a given message and its annotations."
      ],
      [
        "deliverResult(com.fsck.k9.mailstore.MessageViewInfo)",
        "delivers a result (an instance of `MessageViewInfo`) and sets it as the current value of `messageViewInfo` in the `LocalMessageExtractorLoader` class."
      ]
    ],
    "class com.fsck.k9.ui.message.LocalMessageLoader": [
      [
        "isCreatedFor(com.fsck.k9.activity.MessageReference)",
        "checks if the message reference passed as a parameter is the same as the one stored in the `LocalMessageLoader` object."
      ],
      [
        "loadInBackground()",
        "loads a LocalMessage object from the database in a background thread."
      ],
      [
        "deliverResult(com.fsck.k9.mailstore.LocalMessage)",
        "delivers the result of loading a local message by setting a message instance variable and calling the super class's deliverResult method with the message as a parameter."
      ]
    ]
  },
  "com.fsck.k9.ui.messageview": {
    "interface com.fsck.k9.ui.messageview.AttachmentViewCallback": [
      [
        "onViewAttachment(com.fsck.k9.mailstore.AttachmentViewInfo)",
        "handles the action of viewing an email attachment in the K-9 email client interface."
      ],
      [
        "onSaveAttachmentToUserProvidedDirectory(com.fsck.k9.mailstore.AttachmentViewInfo)",
        "allows the user to save an email attachment to a directory of their choosing through a callback interface."
      ],
      [
        "onSaveAttachment(com.fsck.k9.mailstore.AttachmentViewInfo)",
        "saves a given email attachment to the file system."
      ]
    ],
    "class com.fsck.k9.ui.messageview.MessageViewFragment": [
      [
        "onForward()",
        "calls the `onForward()` method of the `mFragmentListener` object with the message's reference and decryption result as arguments."
      ],
      [
        "onReplyAll()",
        "invokes the `onReplyAll()` method of the `mFragmentListener` interface with the message reference and decryption result of the current `mMessage`."
      ],
      [
        "onResume()",
        "calls the `onResume()` method of the superclass and then calls the `onResume()` method of a `MessageCryptoPresenter` instance in the message view fragment."
      ],
      [
        "enableAttachmentButtons(com.fsck.k9.mailstore.AttachmentViewInfo)",
        "enables the attachment buttons for a given attachment in the message view."
      ],
      [
        "onClickShowSecurityWarning()",
        "calls the `onClickShowCryptoWarningDetails()` method of the `messageCryptoPresenter` instance when the security warning is clicked in the message view fragment."
      ],
      [
        "canMessageBeMovedToSpam()",
        "checks whether the current message can be moved to the spam folder."
      ],
      [
        "onCreateView(android.view.LayoutInflater,android.view.ViewGroup,android.os.Bundle)",
        "creates and returns a view for the MessageViewFragment with various listeners and callbacks set."
      ],
      [
        "refreshAttachmentThumbnail(com.fsck.k9.mailstore.AttachmentViewInfo)",
        "calls the `refreshAttachmentThumbnail` method of `mMessageView` with the provided `attachment` object."
      ],
      [
        "allHeadersVisible()",
        "checks if all headers are currently visible in the message view."
      ],
      [
        "onPendingIntentResult(int,int,android.content.Intent)",
        "handles the result of an activity started with a pending intent, delegating processing to different components depending on the request code."
      ],
      [
        "newInstance(com.fsck.k9.activity.MessageReference)",
        "creates a new instance of the `MessageViewFragment` class with a `MessageReference` object as a parameter."
      ],
      [
        "doPositiveClick(int)",
        "handles the positive click event of a dialog and performs different actions based on the id of the dialog that was clicked."
      ],
      [
        "onSaveInstanceState(android.os.Bundle)",
        "saves the state of the messageCryptoPresenter to be restored later."
      ],
      [
        "onCopy()",
        "allows the user to copy a message to another folder if it is a synced message and the account and message are copy capable."
      ],
      [
        "showAttachmentLoadingDialog()",
        "displays a loading dialog for attachments in the message view."
      ],
      [
        "getMessageReference()",
        "returns the reference to the currently displayed email message in the K-9 Mail app."
      ],
      [
        "isMessageRead()",
        "checks whether the email message displayed in the UI has been marked as read or not."
      ],
      [
        "getApplicationContext()",
        "returns the application context associated with the MessageViewFragment."
      ],
      [
        "isCopyCapable()",
        "determines whether the current message can be copied."
      ],
      [
        "onArchive()",
        "archives the current email message by moving it to the account's archive folder."
      ],
      [
        "onToggleAllHeadersView()",
        "triggers the display of additional message headers in the UI."
      ],
      [
        "onToggleRead()",
        "toggles the read status of a message and updates the UI."
      ],
      [
        "onMove()",
        "checks if moving the current message is possible, and if it is, it starts the activity for choosing a folder to move the message to."
      ],
      [
        "onSendAlternate()",
        "sends an alternative version of the email message to the recipient."
      ],
      [
        "onDestroy()",
        "destroys the MessageViewFragment and calls appropriate methods based on whether the activity is changing configurations or not."
      ],
      [
        "onClickShowCryptoKey()",
        "invokes the `onClickShowCryptoKey()` method of the `messageCryptoPresenter` object."
      ],
      [
        "onDelete()",
        "displays a confirmation dialog before deleting a message from the UI thread."
      ],
      [
        "doNegativeClick(int)",
        "does nothing when the user clicks on a negative button in a dialog with the given `dialogId`."
      ],
      [
        "onCreate(android.os.Bundle)",
        "initializes various components and sets options to the action bar for a message view fragment in an Android email application K-9 Mail."
      ],
      [
        "dialogCancelled(int)",
        "overrides the dialogCancelled method in the MessageViewFragment class and does nothing when called."
      ],
      [
        "runOnMainThread(java.lang.Runnable)",
        "posts a runnable to the main thread handler for execution."
      ],
      [
        "moveMessage(com.fsck.k9.activity.MessageReference,java.lang.String)",
        "moves a message with a given reference to a specified destination folder."
      ],
      [
        "onToggleFlagged()",
        "changes the flagged status of an email message and updates the message view accordingly."
      ],
      [
        "canMessageBeArchived()",
        "determines if the message can be archived based on the current folder and account settings."
      ],
      [
        "isMoveCapable()",
        "checks if the current message can be moved to another mailbox."
      ],
      [
        "disableAttachmentButtons(com.fsck.k9.mailstore.AttachmentViewInfo)",
        "comments out a line of code that calls a method to disable attachment buttons on a message view in the K9 email client."
      ],
      [
        "onSelectText()",
        "comments out a call to `mMessageView.beginSelectingText()` and adds a \"FIXME\" note."
      ],
      [
        "onActivityCreated(android.os.Bundle)",
        "gets arguments from the fragment bundle, parses a message reference string, and displays the message."
      ],
      [
        "onSaveAttachment(com.fsck.k9.mailstore.AttachmentViewInfo)",
        "saves the attachment of an email in the `AttachmentViewInfo` object."
      ],
      [
        "onActivityResult(int,int,android.content.Intent)",
        "handles the result of an activity launched from the fragment and performs actions based on the request code of the activity."
      ],
      [
        "onReply()",
        "invokes an \"onReply()\" action on a MessageViewFragment and calls the \"onReply()\" method of a FragmentListener with the message reference and decryption result of the current message."
      ],
      [
        "onSpam()",
        "moves the current email message to the spam folder of the account associated with the message view fragment."
      ],
      [
        "isInitialized()",
        "returns a boolean value indicating whether the MessageViewFragment instance has been initialized or not."
      ],
      [
        "zoom(android.view.KeyEvent)",
        "comments out a call to the `zoom` method of `mMessageView` when a key event is received."
      ],
      [
        "hideAttachmentLoadingDialogOnMainThread()",
        "hides the attachment loading dialog and enables attachment buttons on the main thread of the Android application."
      ],
      [
        "onAttach(android.app.Activity)",
        "attaches the fragment to the activity and assigns the activity as the fragment listener, throwing an exception if the activity does not implement the required interface."
      ],
      [
        "onSaveAttachmentToUserProvidedDirectory(com.fsck.k9.mailstore.AttachmentViewInfo)",
        "shows a file browser to allow the user to choose a directory where a specific attachment can be saved, and then saves the attachment to that chosen directory."
      ],
      [
        "copyMessage(com.fsck.k9.activity.MessageReference,java.lang.String)",
        "copies a specified email message to a specified destination folder in the email client."
      ],
      [
        "onRefile(java.lang.String)",
        "moves a message to a different folder."
      ],
      [
        "updateTitle()",
        "updates the title of the message view fragment with the subject of the displayed message."
      ],
      [
        "onViewAttachment(com.fsck.k9.mailstore.AttachmentViewInfo)",
        "sets the currently viewed attachment and opens it using the attachment controller."
      ]
    ],
    "class com.fsck.k9.ui.messageview.AttachmentController": [
      [
        "viewAttachment()",
        "checks if the content of an attachment is available and either downloads and views it or simply views it if it is available locally."
      ],
      [
        "saveAttachment()",
        "saves an attachment to the default path in the K9 email client."
      ],
      [
        "saveAttachmentTo(java.lang.String)",
        "saves an email attachment to a specified directory as a file."
      ]
    ],
    "interface com.fsck.k9.ui.messageview.MessageCryptoPresenter$MessageCryptoMvpView": [
      [
        "restartMessageCryptoProcessing()",
        "restarts the processing of cryptographic operations for a message in the user interface."
      ],
      [
        "redisplayMessage()",
        "redisplays the message in the MessageCryptoMvpView."
      ],
      [
        "startPendingIntentForCryptoPresenter(android.content.IntentSender,java.lang.Integer,android.content.Intent,int,int,int)",
        "starts a pending intent for the MessageCryptoPresenter with the given parameters."
      ],
      [
        "showCryptoConfigDialog()",
        "displays a dialog box for configuring cryptographic settings."
      ],
      [
        "showCryptoInfoDialog(com.fsck.k9.view.MessageCryptoDisplayStatus,boolean)",
        "displays a dialog containing information about the cryptographic status of a message, including any security warnings."
      ]
    ],
    "class com.fsck.k9.ui.messageview.MessageTopView": [
      [
        "showMessageCryptoCancelledView(com.fsck.k9.mailstore.MessageViewInfo,android.graphics.drawable.Drawable)",
        "displays a view indicating that the message's encryption or decryption was cancelled and allows the user to retry the operation."
      ],
      [
        "enableDownloadButton()",
        "enables a \"Download\" button in the user interface of an email message view."
      ],
      [
        "setOnDownloadButtonClickListener(com.fsck.k9.ui.messageview.OnClickListener)",
        "sets a listener for the download button in the message top view."
      ],
      [
        "showMessage(com.fsck.k9.Account,com.fsck.k9.mailstore.MessageViewInfo)",
        "displays a message view container for a given account and message."
      ],
      [
        "onFinishInflate()",
        "initializes and sets up various views and components of the MessageTopView layout."
      ],
      [
        "additionalHeadersVisible()",
        "returns whether additional headers are visible in the message view's header container."
      ],
      [
        "showAllHeaders()",
        "shows all headers in the message top view."
      ],
      [
        "setAttachmentCallback(com.fsck.k9.ui.messageview.AttachmentViewCallback)",
        "sets the callback for interacting with attachments in the message top view."
      ],
      [
        "displayViewOnLoadFinished(boolean)",
        "displays the message top view after finishing the loading progress, with optional progress bar animation."
      ],
      [
        "setOnToggleFlagClickListener(com.fsck.k9.ui.messageview.OnClickListener)",
        "sets a listener for when the \"flag\" button in the message top view is clicked."
      ],
      [
        "getMessageHeaderView()",
        "returns the message header view shown at the top of messages in a Java class for an email client application."
      ],
      [
        "disableDownloadButton()",
        "disables a download button in the message view."
      ],
      [
        "setMessageCryptoPresenter(com.fsck.k9.ui.messageview.MessageCryptoPresenter)",
        "sets the `MessageCryptoPresenter` for the `MessageTopView` and attaches it to the `mHeaderContainer` for handling crypto-related events."
      ],
      [
        "showMessageCryptoWarning(com.fsck.k9.mailstore.MessageViewInfo,android.graphics.drawable.Drawable,int,boolean)",
        "displays a warning message about cryptography in a message view, including an icon, warning text, and optional detail and override buttons."
      ],
      [
        "showMessageCryptoErrorView(com.fsck.k9.mailstore.MessageViewInfo,android.graphics.drawable.Drawable)",
        "displays a view for when there is a crypto error in the message."
      ],
      [
        "setLoadingProgress(int,int)",
        "displays loading progress in the message top view and updates the progress bar accordingly."
      ],
      [
        "setHeaders(com.fsck.k9.mail.Message,com.fsck.k9.Account)",
        "populates and displays the header information of an email message."
      ],
      [
        "setToLoadingState()",
        "sets the MessageTopView to a loading state by resetting the viewAnimator and progress bar, and setting isShowingProgress to false."
      ],
      [
        "showCryptoProviderNotConfigured(com.fsck.k9.mailstore.MessageViewInfo)",
        "displays a view notifying the user that a crypto provider is not configured for the message and provides a button to configure it."
      ],
      [
        "showMessageEncryptedButIncomplete(com.fsck.k9.mailstore.MessageViewInfo,android.graphics.drawable.Drawable)",
        "displays a message that is encrypted but incomplete with the icon of the encryption provider."
      ]
    ],
    "class com.fsck.k9.ui.messageview.MessageContainerView$SavedState": [
      [
        "writeToParcel(android.os.Parcel,int)",
        "writes the current state of a MessageContainerView object (attachmentViewVisible and showingPictures values) to a parcel for later use."
      ]
    ],
    "interface com.fsck.k9.ui.messageview.CryptoInfoDialog$OnClickShowCryptoKeyListener": [
      [
        "onClickShowSecurityWarning()",
        "defines the behavior for when the user clicks to show a security warning in a Crypto Info Dialog."
      ],
      [
        "onClickShowCryptoKey()",
        "defines a callback method to be executed when the user clicks to show the crypto key in a message view."
      ]
    ],
    "interface com.fsck.k9.ui.messageview.MessageViewFragment$MessageViewFragmentListener": [
      [
        "disableDeleteAction()",
        "disables the ability to delete a message within the message view fragment."
      ],
      [
        "updateMenu()",
        "updates the menu in the message view fragment."
      ],
      [
        "onForward(com.fsck.k9.activity.MessageReference,android.os.Parcelable)",
        "handles forwarding a message with a decrypted result for the reply (if applicable) in an email client application."
      ],
      [
        "setProgress(boolean)",
        "sets the visibility of a progress indicator in a message viewing fragment."
      ],
      [
        "showNextMessageOrReturn()",
        "displays the next message or returns to the previous screen in the message view fragment."
      ],
      [
        "onReply(com.fsck.k9.activity.MessageReference,android.os.Parcelable)",
        "listens for when a user wants to reply to a message in the message view fragment of the K-9 email client, and passes the message reference and decryption result for the reply to the appropriate actions or methods."
      ],
      [
        "messageHeaderViewAvailable(com.fsck.k9.view.MessageHeader)",
        "provides the message header view to be displayed in the message view fragment."
      ],
      [
        "onReplyAll(com.fsck.k9.activity.MessageReference,android.os.Parcelable)",
        "handles the action of replying to all recipients of a specific message with a given decryption result."
      ],
      [
        "displayMessageSubject(java.lang.String)",
        "displays the subject of a message in a user interface."
      ]
    ],
    "class com.fsck.k9.ui.messageview.LockedAttachmentView": [
      [
        "onClick(android.view.View)",
        "listens for a click on the \"locked_button\" view and shows the unlocked view when clicked."
      ],
      [
        "setAttachment(com.fsck.k9.mailstore.AttachmentViewInfo)",
        "sets the attachment for a LockedAttachmentView."
      ],
      [
        "setCallback(com.fsck.k9.ui.messageview.AttachmentViewCallback)",
        "sets the callback for handling clicks on attachments in the locked state."
      ]
    ],
    "interface com.fsck.k9.ui.messageview.OnCryptoClickListener": [
      [
        "onCryptoClick()",
        "handles a click event on a cryptographic function button."
      ]
    ],
    "class com.fsck.k9.ui.messageview.AttachmentController$IntentAndResolvedActivitiesCount": [
      [
        "getIntent()",
        "returns the intent object stored in the AttachmentController's IntentAndResolvedActivitiesCount object."
      ],
      [
        "getMimeType()",
        "returns the MIME type of the intent associated with the attachment controller."
      ],
      [
        "hasResolvedActivities()",
        "checks if there are any resolved activities associated with the attachment controller's intent."
      ],
      [
        "containsFileUri()",
        "checks if the intent's data scheme is \"file\"."
      ]
    ],
    "interface com.fsck.k9.ui.messageview.MessageContainerView$OnRenderingFinishedListener": [
      [
        "onLoadFinished()",
        "notifies the listener that the loading of message container view has finished."
      ]
    ],
    "class com.fsck.k9.ui.messageview.MessageContainerView": [
      [
        "hasHiddenExternalImages()",
        "returns a boolean value indicating if the message container view has hidden external images."
      ],
      [
        "onCreateContextMenu(android.view.ContextMenu,android.view.View,android.view.ContextMenu.ContextMenuInfo)",
        "creates a context menu with different options based on the type of content selected (e.g. link, image, phone number, email) in a message view."
      ],
      [
        "refreshAttachmentThumbnail(com.fsck.k9.mailstore.AttachmentViewInfo)",
        "refreshes the thumbnail of a specific email attachment in a message container view."
      ],
      [
        "enableAttachmentButtons()",
        "enables the buttons for all attachment views in the message container view."
      ],
      [
        "renderAttachments(com.fsck.k9.mailstore.MessageViewInfo)",
        "renders email attachments for display in the message view."
      ],
      [
        "displayMessageViewContainer(com.fsck.k9.mailstore.MessageViewInfo,com.fsck.k9.ui.messageview.MessageContainerView$OnRenderingFinishedListener,boolean,boolean,com.fsck.k9.ui.messageview.AttachmentViewCallback)",
        "displays the message view container for a given message with optional features such as automatically loading pictures, hiding the unsigned text divider, and rendering attachments and extra text."
      ],
      [
        "onFinishInflate()",
        "initializes and sets up various UI components and objects used in the message view."
      ],
      [
        "showPictures()",
        "sets the `loadPictures` variable to true and refreshes the displayed content in the MessageContainerView class in order to display images."
      ],
      [
        "enableAttachmentButtons(com.fsck.k9.mailstore.AttachmentViewInfo)",
        "enables the buttons for an attachment in an email message view."
      ],
      [
        "disableAttachmentButtons()",
        "disables all the attachment buttons in the message container view."
      ],
      [
        "resetView()",
        "resets the view by setting load pictures to false, removing attachments, clearing the current HTML text and resolver, and clearing the displayed content in the WebView."
      ],
      [
        "onSaveInstanceState()",
        "saves the current state of the MessageContainerView instance in a Parcelable object."
      ],
      [
        "disableAttachmentButtons(com.fsck.k9.mailstore.AttachmentViewInfo)",
        "disables the buttons of an attachment in a message container view."
      ],
      [
        "onRestoreInstanceState(android.os.Parcelable)",
        "restores the saved instance state of a MessageContainerView, if available."
      ],
      [
        "onLayoutChanged()",
        "invalidates the message content view if it is not null when the layout has changed."
      ],
      [
        "beginSelectingText()",
        "simulates the user pressing and holding the shift key to enable text selection in the message content view."
      ],
      [
        "zoom(android.view.KeyEvent)",
        "zooms in or out of the message content view based on whether the shift key is pressed or not."
      ]
    ],
    "class com.fsck.k9.ui.messageview.CryptoInfoDialog": [
      [
        "onCreateDialog(android.os.Bundle)",
        "creates a dialog for displaying information about the cryptographic status of a message and associated actions such as dismissing the dialog or showing a security warning or cryptographic key."
      ],
      [
        "newInstance(com.fsck.k9.view.MessageCryptoDisplayStatus,boolean)",
        "returns a new instance of the `CryptoInfoDialog` class with specified display status and security warning parameters."
      ]
    ],
    "class com.fsck.k9.ui.messageview.AttachmentView": [
      [
        "enableButtons()",
        "enables the \"view\" and \"download\" buttons in the user interface for an attachment view."
      ],
      [
        "setAttachment(com.fsck.k9.mailstore.AttachmentViewInfo)",
        "sets the attachment information for the current instance of the AttachmentView class and displays it on the UI."
      ],
      [
        "disableButtons()",
        "disables the \"view\" and \"download\" buttons of the attachment view."
      ],
      [
        "setCallback(com.fsck.k9.ui.messageview.AttachmentViewCallback)",
        "sets the callback object for the AttachmentView."
      ],
      [
        "onLongClick(android.view.View)",
        "detects a long click on a specific button view and triggers a method call for saving the attachment associated with the button."
      ],
      [
        "onClick(android.view.View)",
        "handles click events on the view and download buttons of an attachment view."
      ],
      [
        "refreshThumbnail()",
        "refreshes the thumbnail image of an attachment view using Glide image loading library in Android."
      ],
      [
        "getAttachment()",
        "returns the stored information of the attachment associated with the message view in the K-9 email app."
      ]
    ],
    "class com.fsck.k9.ui.messageview.MessageCryptoPresenter": [
      [
        "onActivityResult(int,int,android.content.Intent)",
        "handles the results of activities launched by the MessageCryptoPresenter in the K-9 email client app."
      ],
      [
        "onCryptoClick()",
        "handles the user's click on a cryptographic message and displays appropriate actions or information based on the message's current status."
      ],
      [
        "onSaveInstanceState(android.os.Bundle)",
        "saves the value of a boolean variable \"overrideCryptoWarning\" in a bundle for state restoration."
      ],
      [
        "maybeHandleShowMessage(com.fsck.k9.ui.messageview.MessageTopView,com.fsck.k9.Account,com.fsck.k9.mailstore.MessageViewInfo)",
        "handles the display of a message's cryptographic status and shows appropriate warnings or errors depending on the status."
      ],
      [
        "onResume()",
        "checks if a particular flag is set and restarts message crypto processing if necessary."
      ],
      [
        "getDecryptionResultForReply()",
        "returns a decryption result for a reply message in the form of an Android Parcelable object."
      ],
      [
        "onClickShowMessageOverrideWarning()",
        "sets a flag to override a warning about message encryption and triggers the redisplay of the message."
      ],
      [
        "onClickShowCryptoKey()",
        "shows the crypto key associated with a message by starting a PendingIntent for the respective OpenPGP signing key."
      ],
      [
        "onClickRetryCryptoOperation()",
        "restarts message crypto processing when the user clicks to retry a failed cryptographic operation in the K-9 email client."
      ],
      [
        "onClickConfigureProvider()",
        "shows a dialog for configuring the message encryption provider and sets a flag for reloading the view onResume without recreating it."
      ],
      [
        "onClickShowCryptoWarningDetails()",
        "shows details of a crypto warning when clicked."
      ]
    ]
  },
  "com.fsck.k9.service": {
    "class com.fsck.k9.service.RemoteControlReceiver": [
      [
        "receive(android.content.Context,android.content.Intent,java.lang.Integer)",
        "processes incoming remote control actions for the K-9 email client app."
      ]
    ],
    "class com.fsck.k9.service.RemoteControlService": [
      [
        "startService(android.content.Intent,int)",
        "handles incoming remote control actions for a K9 email client service."
      ],
      [
        "set(android.content.Context,android.content.Intent,java.lang.Integer)",
        "sets a wake lock ID for a remote control service and starts the service."
      ]
    ],
    "class com.fsck.k9.service.ShutdownReceiver": [
      [
        "onReceive(android.content.Context,android.content.Intent)",
        "detects if the system is shutting down and releases resources."
      ]
    ],
    "class com.fsck.k9.service.PollService": [
      [
        "stopService(android.content.Context)",
        "stops the PollService in the K-9 email application."
      ],
      [
        "startService(android.content.Intent,int)",
        "starts or stops the PollService depending on the intent action received."
      ],
      [
        "onCreate()",
        "overrides the `onCreate()` method of the superclass and sets the auto shutdown feature to false."
      ],
      [
        "onBind(android.content.Intent)",
        "returns null when called with an Intent argument in order to indicate that the service does not provide a binding interface."
      ],
      [
        "startService(android.content.Context)",
        "starts the PollService with the specified action and acquires a wake lock."
      ]
    ],
    "class com.fsck.k9.service.SleepService": [
      [
        "startService(android.content.Intent,int)",
        "checks if an alarm has fired and then calls the `endSleep` method, and then stops the service if necessary."
      ],
      [
        "sleep(android.content.Context,long,com.fsck.k9.mail.power.TracingPowerManager.TracingWakeLock,long)",
        "puts the current thread to sleep for a specified amount of time while holding a wake lock to prevent the device from going to sleep."
      ]
    ],
    "class com.fsck.k9.service.MailService": [
      [
        "isSyncBlocked()",
        "returns a boolean value indicating whether synchronization is currently blocked in the `MailService` class."
      ],
      [
        "getNextPollTime()",
        "returns the time for the next scheduled email polling check."
      ],
      [
        "actionCancel(android.content.Context,java.lang.Integer)",
        "cancels the ongoing operation performed by the MailService class with the given wake lock id."
      ],
      [
        "isSyncDisabled()",
        "checks whether email syncing is currently disabled based on various conditions including sync being blocked, polling and pushing options not being requested."
      ],
      [
        "connectivityChange(android.content.Context,java.lang.Integer)",
        "starts the MailService with an intent that specifies a connectivity change action and adds a wake lock ID to the intent."
      ],
      [
        "isPollAndPushDisabled()",
        "checks if polling and pushing are both disabled for the email service."
      ],
      [
        "actionReschedulePoll(android.content.Context,java.lang.Integer)",
        "reschedules the email polling service with a wake lock identifier."
      ],
      [
        "startService(android.content.Intent,int)",
        "starts the mail service and syncs emails in the background if connectivity is available and background sync is enabled."
      ],
      [
        "saveLastCheckEnd(android.content.Context)",
        "saves the current time as the last check end time for a mail service and updates it in the app's preferences."
      ],
      [
        "actionReset(android.content.Context,java.lang.Integer)",
        "resets the mail service with a specified wake lock ID in the given context."
      ],
      [
        "onBind(android.content.Intent)",
        "returns the Android OS binder for the mail service but always returns null, since it is unused."
      ],
      [
        "hasNoConnectivity()",
        "returns a boolean value indicating whether there is no network connectivity for the MailService class in the K9 email client."
      ],
      [
        "onDestroy()",
        "logs a message using Timber library and calls the superclass's `onDestroy()` method."
      ],
      [
        "isSyncNoBackground()",
        "returns the boolean value of the variable `syncNoBackground` in the `MailService` class of the Java application `com.fsck.k9`."
      ],
      [
        "onCreate()",
        "logs a message using Timber when the MailService is created."
      ],
      [
        "actionRestartPushers(android.content.Context,java.lang.Integer)",
        "restarts pushers in the K-9 Mail service with the given wake lock ID."
      ]
    ],
    "class com.fsck.k9.service.StorageGoneReceiver": [
      [
        "onReceive(android.content.Context,android.content.Intent)",
        "handles storage events, such as ejection and unmounting."
      ]
    ],
    "abstract class com.fsck.k9.service.CoreService": [
      [
        "onDestroy()",
        "shuts down the thread pool and logs a message when the service is stopped."
      ],
      [
        "onStartCommand(android.content.Intent,int,int)",
        "handles the start command for a core service in an Android application."
      ],
      [
        "startService(android.content.Intent,int)",
        "starts an Android service and allows the parent `CoreService` class to manage its lifecycle and wake lock management."
      ],
      [
        "onCreate()",
        "initializes a single-threaded thread pool for the K9 Mail app's CoreService."
      ],
      [
        "onLowMemory()",
        "(no description)"
      ],
      [
        "execute(android.content.Context,java.lang.Runnable,int,java.lang.Integer)",
        "executes a task in the background thread and manages the wake lock and shutdown of the service."
      ],
      [
        "onBind(android.content.Intent)",
        "returns null and doesn't do anything else since it is unused."
      ]
    ],
    "class com.fsck.k9.service.CoreReceiver": [
      [
        "receive(android.content.Context,android.content.Intent,java.lang.Integer)",
        "receives a context, an intent, and a wakeLockId integer, and returns the wakeLockId integer value."
      ],
      [
        "onReceive(android.content.Context,android.content.Intent)",
        "handles incoming intents in the K-9 Mail application by either releasing a wake lock or processing the intent and releasing the wake lock afterwards."
      ],
      [
        "releaseWakeLock(android.content.Context,int)",
        "releases a wake lock with a specified ID in the context of the CoreReceiver."
      ]
    ],
    "class com.fsck.k9.service.PushService": [
      [
        "startService(android.content.Context)",
        "starts the `PushService` class as a service with a wake lock added in order to handle background push notifications."
      ],
      [
        "startService(android.content.Intent,int)",
        "starts or stops the PushService depending on the intent action received."
      ],
      [
        "onCreate()",
        "overrides the `onCreate()` method of the `PushService` class and sets the auto shutdown to false."
      ],
      [
        "onBind(android.content.Intent)",
        "overrides the `onBind` method to return `null` and does not perform any specific actions."
      ],
      [
        "stopService(android.content.Context)",
        "stops the PushService in the Android application K9 by creating an intent with the action to stop the service and initiating a wake lock."
      ]
    ],
    "class com.fsck.k9.service.StorageReceiver": [
      [
        "onReceive(android.content.Context,android.content.Intent)",
        "listens for storage mount or unmount actions and triggers the `onMount` method of the `StorageManager` class accordingly for the specified path."
      ]
    ],
    "class com.fsck.k9.service.PollService$Listener": [
      [
        "wakeLockRelease()",
        "releases the wake lock if it's not null and sets it to null afterwards."
      ],
      [
        "setStartId(int)",
        "sets the starting ID for the PollService listener."
      ],
      [
        "checkMailFinished(android.content.Context,com.fsck.k9.Account)",
        "logs a message indicating that the email polling service has finished checking for new messages and releases any resources it was using."
      ],
      [
        "getStartId()",
        "returns the ID of the service when it was started."
      ],
      [
        "checkMailStarted(android.content.Context,com.fsck.k9.Account)",
        "Clears the list of accounts that have been checked for email by the K9 mail app's poll service listener."
      ],
      [
        "wakeLockAcquire()",
        "acquires a wake lock and releases any previously held wake locks if any."
      ],
      [
        "synchronizeMailboxFinished(com.fsck.k9.Account,java.lang.String,int,int)",
        "updates the number of new messages in a mailbox for a particular account and notifies the user if there are new messages."
      ]
    ],
    "class com.fsck.k9.service.DatabaseUpgradeService": [
      [
        "onBind(android.content.Intent)",
        "returns a null value as it has no functionality to bind to an intent."
      ],
      [
        "onCreate()",
        "initializes a local broadcast manager for the DatabaseUpgradeService class."
      ],
      [
        "onStartCommand(android.content.Intent,int,int)",
        "starts the `DatabaseUpgradeService`, acquires a wakelock, and starts an upgrade process in the background if the service is not already running and sends progress broadcast if it is already running."
      ],
      [
        "startService(android.content.Context)",
        "starts the `DatabaseUpgradeService` by creating and starting an intent with a specific action."
      ]
    ],
    "class com.fsck.k9.service.BootReceiver": [
      [
        "scheduleIntent(android.content.Context,long,android.content.Intent)",
        "schedules an alarmed intent to be sent at a specific time after the device boots up."
      ],
      [
        "cancelIntent(android.content.Context,android.content.Intent)",
        "cancels a specified alarm intent by sending a broadcast to the BootReceiver class."
      ],
      [
        "receive(android.content.Context,android.content.Intent,java.lang.Integer)",
        "handles various broadcast intents with specific actions, and returns an integer value representing a wake lock ID."
      ],
      [
        "purgeSchedule(android.content.Context)",
        "cancels any scheduled alarm using the K9AlarmManager in the given Android context."
      ]
    ]
  },
  "com.fsck.k9.setup": {
    "class com.fsck.k9.setup.ServerNameSuggester": [
      [
        "suggestServerName(com.fsck.k9.mail.ServerSettings.Type,java.lang.String)",
        "suggests a server name based on the type of server and domain provided."
      ]
    ]
  },
  "com.fsck.k9.search": {
    "class com.fsck.k9.search.SearchAccount": [
      [
        "getDescription()",
        "returns the description of a search account."
      ],
      [
        "setEmail(java.lang.String)",
        "sets the email address associated with a search account."
      ],
      [
        "getRelatedSearch()",
        "returns a LocalSearch object that is related to the SearchAccount instance."
      ],
      [
        "getUuid()",
        "returns the non-unique ID of a `SearchAccount` instance."
      ],
      [
        "setDescription(java.lang.String)",
        "sets the description of a search account object."
      ],
      [
        "createAllMessagesAccount(android.content.Context)",
        "creates a search account for all messages with a specified name and search specifications."
      ],
      [
        "getId()",
        "returns the ID of a Search Account object as a String value."
      ],
      [
        "getEmail()",
        "returns the email address associated with a SearchAccount instance."
      ],
      [
        "createUnifiedInboxAccount(android.content.Context)",
        "creates a search account for a unified inbox in an Android app called K9 Email Client."
      ]
    ],
    "interface com.fsck.k9.search.SearchSpecification": [
      [
        "getConditions()",
        "returns the root node of the condition tree for the search in the K9 mail application."
      ],
      [
        "getName()",
        "returns the name of a search if it was given a name."
      ],
      [
        "getAccountUuids()",
        "returns an array of UUIDs of all the accounts that a search specification object acts upon."
      ]
    ],
    "class com.fsck.k9.search.LocalSearch": [
      [
        "or(com.fsck.k9.search.ConditionsTreeNode)",
        "adds the provided node to an OR clause and returns a new top OR node."
      ],
      [
        "clone()",
        "returns a deep copy of the current `LocalSearch` object."
      ],
      [
        "describeContents()",
        "returns an integer describing the contents of the Parcelable object."
      ],
      [
        "isManualSearch()",
        "returns a boolean value indicating if it is a manual search or not."
      ],
      [
        "getAccountUuids()",
        "returns an array of account uuids that will be matched against in the search."
      ],
      [
        "or(com.fsck.k9.search.SearchSpecification$SearchCondition)",
        "adds a search condition to a local search query as the second argument of an OR clause."
      ],
      [
        "getName()",
        "returns the name of a saved search in the LocalSearch Java class."
      ],
      [
        "and(com.fsck.k9.search.ConditionsTreeNode)",
        "adds a search condition node as the second argument of an AND clause to the current node."
      ],
      [
        "getFolderNames()",
        "returns a list of folder names from a search query, with a temporary solution that may not work for real searches due to possible extra conditions."
      ],
      [
        "addAccountUuids(java.lang.String[])",
        "adds multiple account UUIDs to be matched by the search."
      ],
      [
        "isPredefined()",
        "checks if the search was preloaded with the K-9 email client."
      ],
      [
        "getConditions()",
        "returns the root node of the conditions tree related to the LocalSearch object."
      ],
      [
        "searchAllAccounts()",
        "determines whether all accounts should be searched or not based on whether the account UUIDs list is empty or not."
      ],
      [
        "writeToParcel(android.os.Parcel,int)",
        "writes the state of a LocalSearch instance to a Parcelable object in order to pass the object between different components of an Android application."
      ],
      [
        "addAllowedFolder(java.lang.String)",
        "adds a folder to the list of allowed folders for local search in the Java class `com.fsck.k9.search.LocalSearch`."
      ],
      [
        "addAccountUuid(java.lang.String)",
        "adds a new account UUID to the list of accounts to be searched by the LocalSearch class."
      ],
      [
        "and(com.fsck.k9.search.SearchSpecification$SearchField,java.lang.String,com.fsck.k9.search.SearchSpecification$Attribute)",
        "adds a search condition using the provided field, value, and attribute as an AND clause to the search node."
      ],
      [
        "and(com.fsck.k9.search.SearchSpecification$SearchCondition)",
        "adds a provided condition as the second argument of a logical AND clause to a node in a search tree."
      ],
      [
        "getRemoteSearchArguments()",
        "returns a String with the search arguments for a remote search."
      ],
      [
        "setName(java.lang.String)",
        "sets the name of the saved search in the LocalSearch class."
      ],
      [
        "getLeafSet()",
        "returns a set of all the leaf conditions in the related condition tree."
      ],
      [
        "removeAccountUuid(java.lang.String)",
        "removes an account UUID from the current search."
      ],
      [
        "setManualSearch(boolean)",
        "sets the manual search flag of a local email search in the K9 email client."
      ]
    ],
    "class com.fsck.k9.search.ConditionsTreeNode": [
      [
        "describeContents()",
        "returns a bitmask indicating the set of special object types imported by the class loader for serialization."
      ],
      [
        "writeToParcel(android.os.Parcel,int)",
        "writes the values of the `ConditionsTreeNode` object to a parcel."
      ],
      [
        "or(com.fsck.k9.search.ConditionsTreeNode)",
        "adds the provided expression to the current node as the second argument of an OR clause and returns a new top node representing the OR operation."
      ],
      [
        "or(com.fsck.k9.search.SearchSpecification$SearchCondition)",
        "adds a new OR clause to this node with the provided condition as the second argument."
      ],
      [
        "preorder()",
        "returns a list of all nodes in the subtree rooted at this node in pre-order traversal."
      ],
      [
        "and(com.fsck.k9.search.SearchSpecification$SearchCondition)",
        "adds the provided condition as the second argument of an AND clause to the current node."
      ],
      [
        "getLeafSet()",
        "returns a set of all the leaves in a tree structure represented by the current instance of the `ConditionsTreeNode` class in a Java program."
      ],
      [
        "and(com.fsck.k9.search.ConditionsTreeNode)",
        "adds an `AND` clause to the current node."
      ],
      [
        "getCondition()",
        "returns the condition stored in a node of the conditions tree in a K9 email search."
      ],
      [
        "buildTreeFromDB(android.database.Cursor)",
        "builds a condition tree from a bunch of rows pointed to by a database cursor."
      ],
      [
        "applyMPTTLabel()",
        "applies the MPTT labeling system to the subtree whose root node is this node."
      ]
    ],
    "class com.fsck.k9.search.SqlQueryBuilder": [
      [
        "addPrefixToSelection(java.lang.String[],java.lang.String,java.lang.String)",
        "adds a prefix to all occurrences of column names in a selection string."
      ],
      [
        "buildWhereClause(com.fsck.k9.Account,com.fsck.k9.search.ConditionsTreeNode,java.lang.StringBuilder,java.util.List)",
        "builds a WHERE clause for an SQL query based on search conditions and adds any necessary selection arguments."
      ]
    ],
    "class com.fsck.k9.search.SearchSpecification$SearchCondition": [
      [
        "hashCode()",
        "calculates and returns the hash code for the `SearchCondition` object based on its attribute, field, and value."
      ],
      [
        "clone()",
        "creates a new instance of the `SearchCondition` class with the same field, attribute, and value as the original instance."
      ],
      [
        "writeToParcel(android.os.Parcel,int)",
        "writes the value, attribute and field of a SearchCondition object to a Parcel."
      ],
      [
        "toHumanString()",
        "returns a human-readable string representation of the field and attribute of a search condition."
      ],
      [
        "describeContents()",
        "returns an integer describing any special behavior of the object's Parcelable representation."
      ],
      [
        "equals(java.lang.Object)",
        "checks if the given object equals the current instance of the class `com.fsck.k9.search.SearchSpecification$SearchCondition` by comparing the attribute, field, and value."
      ]
    ]
  },
  "com.fsck.k9.view": {
    "interface com.fsck.k9.view.MessageHeader$OnLayoutChangedListener": [
      [
        "onLayoutChanged()",
        "notifies when the layout of a message header has changed."
      ]
    ],
    "class com.fsck.k9.view.HighlightDialogFragment": [
      [
        "onDismiss(android.content.DialogInterface)",
        "overrides the onDismiss method of DialogInterface and calls its superclass's onDismiss method and then hides the ShowcaseView."
      ],
      [
        "onStart()",
        "executes some tasks when the fragment is starting."
      ]
    ],
    "interface com.fsck.k9.view.CryptoModeSelector$CryptoStatusSelectedListener": [
      [
        "onCryptoStatusSelected(com.fsck.k9.view.CryptoModeSelector$CryptoModeSelectorState)",
        "notifies the listener when a crypto status is selected in a crypto mode selector."
      ]
    ],
    "class com.fsck.k9.view.ViewSwitcher": [
      [
        "setFirstInAnimation(android.view.animation.Animation)",
        "sets the animation to be used when the first view is being shown in a ViewSwitcher."
      ],
      [
        "onAnimationStart(android.view.animation.Animation)",
        "overrides the `onAnimationStart` method from the `AnimationListener` interface and does nothing."
      ],
      [
        "setSecondOutAnimation(android.view.animation.Animation)",
        "sets the animation to be used when switching from the second (back) view in the ViewSwitcher."
      ],
      [
        "getSecondInAnimation()",
        "returns the second animation to be used during a view switch transition in a K-9 email client."
      ],
      [
        "showSecondView()",
        "switches to the second view of the ViewSwitcher, handling animations and a callback function."
      ],
      [
        "setOnSwitchCompleteListener(com.fsck.k9.view.ViewSwitcher$OnSwitchCompleteListener)",
        "sets a listener for when a ViewSwitcher completes a switch between two views."
      ],
      [
        "showFirstView()",
        "shows the first child view of the ViewSwitcher if it is not already displayed."
      ],
      [
        "getFirstInAnimation()",
        "returns the first animation for showing a view in the `ViewSwitcher`."
      ],
      [
        "getmFirstOutAnimation()",
        "returns the first out animation of a ViewSwitcher object."
      ],
      [
        "setFirstOutAnimation(android.view.animation.Animation)",
        "sets the animation for the transition when removing the first view from the ViewSwitcher."
      ],
      [
        "getSecondOutAnimation()",
        "returns the animation used when the second view is being removed from the view switcher."
      ],
      [
        "setSecondInAnimation(android.view.animation.Animation)",
        "sets the animation to be played when the second view is brought into the foreground in a `ViewSwitcher`."
      ],
      [
        "onAnimationEnd(android.view.animation.Animation)",
        "calls the `onSwitchComplete` method of a listener when an animation ends in a ViewSwitcher."
      ],
      [
        "onAnimationRepeat(android.view.animation.Animation)",
        "does not do anything as it is unused."
      ]
    ],
    "class com.fsck.k9.view.NonLockingScrollView": [
      [
        "onInterceptTouchEvent(android.view.MotionEvent)",
        "handles touch events of a scroll view, intercepting them if needed, in order to prevent child views from handling events falsely after a drag."
      ],
      [
        "requestChildFocus(android.view.View,android.view.View)",
        "overrides the default behavior of a ScrollView to prevent scrolling when a MessageWebView is first touched."
      ]
    ],
    "enum com.fsck.k9.view.MessageCryptoDisplayStatus": [
      [
        "isUnencryptedSigned()",
        "checks if the message is unencrypted but signed."
      ],
      [
        "fromResultAnnotation(com.fsck.k9.mailstore.CryptoResultAnnotation)",
        "maps the result of a cryptographic operation on a message to a display status enum for use in the K-9 Mail app."
      ],
      [
        "hasAssociatedKey()",
        "checks if the enum value has an associated key."
      ]
    ],
    "class com.fsck.k9.view.MessageWebView": [
      [
        "emulateShiftHeld()",
        "emulates pressing the shift key to trigger text selection mode in a WebView and displays a toast notifying the user."
      ],
      [
        "displayHtmlContentWithInlineAttachments(java.lang.String,com.fsck.k9.mailstore.AttachmentResolver,com.fsck.k9.view.MessageWebView$OnPageFinishedListener)",
        "displays HTML content with inline attachments in a MessageWebView."
      ],
      [
        "blockNetworkData(boolean)",
        "configures a web view to allow or block network data based on the input parameter."
      ],
      [
        "configure()",
        "configures a WebView to display a message, taking into account user preferences and setting various properties and settings such as scrollbar style, background color, zoom, and image loading."
      ]
    ],
    "class com.fsck.k9.view.MessageHeader": [
      [
        "setCryptoStatus(com.fsck.k9.view.MessageCryptoDisplayStatus)",
        "sets the visibility, enabled status, and display status of the crypto status icon in a message header."
      ],
      [
        "onShowAdditionalHeaders()",
        "toggles the visibility of the additional headers view and expands/collapses the \"To\" and \"Cc\" views accordingly."
      ],
      [
        "populate(com.fsck.k9.mail.Message,com.fsck.k9.Account)",
        "populates the header of a message view in the K-9 mail application."
      ],
      [
        "setOnCryptoClickListener(com.fsck.k9.ui.messageview.OnCryptoClickListener)",
        "sets a listener for clicking on cryptographic elements in the message header."
      ],
      [
        "onSaveInstanceState()",
        "saves the state of the `MessageHeader` class including the visibility of additional headers."
      ],
      [
        "showSubjectLine()",
        "shows the subject line of an email message in the MessageHeader view."
      ],
      [
        "additionalHeadersVisible()",
        "returns a boolean value indicating whether the additional headers view of the message header is currently visible or not."
      ],
      [
        "onClick(android.view.View)",
        "handles click events on various views in the MessageHeader class, performing different actions based on which view was clicked."
      ],
      [
        "onLongClick(android.view.View)",
        "handles the long click event for different views within a message header and adds their corresponding email addresses to the clipboard."
      ],
      [
        "hideCryptoStatus()",
        "hides the crypto status icon of a message header in an Android email app."
      ],
      [
        "setOnFlagListener(android.view.View.OnClickListener)",
        "sets a OnClickListener for the \"flagged\" view in the MessageHeader."
      ],
      [
        "createMessage(int)",
        "returns a string with a message that varies depending on the number of addresses, for copying to the clipboard."
      ],
      [
        "setOnLayoutChangedListener(com.fsck.k9.view.MessageHeader$OnLayoutChangedListener)",
        "sets a listener for changes in the layout of a message header."
      ],
      [
        "shouldShowSender(com.fsck.k9.mail.Message)",
        "determines if the sender of a given email message should be displayed in the message header."
      ],
      [
        "onRestoreInstanceState(android.os.Parcelable)",
        "restores the saved state of the MessageHeader view."
      ],
      [
        "setCryptoStatusDisabled()",
        "disables the crypto status icon for a message header in the K9 email application."
      ],
      [
        "setCryptoStatusLoading()",
        "sets the crypto status icon of the message header as loading with disabled status."
      ]
    ],
    "class com.fsck.k9.view.ClientCertificateSpinner": [
      [
        "setAlias(java.lang.String)",
        "sets the alias for a client certificate and updates the view accordingly while running on the UI thread."
      ],
      [
        "getAlias()",
        "returns the alias selected in the ClientCertificateSpinner, or null if nothing is selected."
      ],
      [
        "chooseCertificate()",
        "prompts the user to choose a private key alias for client certificate authentication."
      ],
      [
        "setOnClientCertificateChangedListener(com.fsck.k9.view.ClientCertificateSpinner$OnClientCertificateChangedListener)",
        "sets a listener for changes to the selected client certificate in a spinner view."
      ]
    ],
    "abstract class com.fsck.k9.view.K9WebViewClient": [
      [
        "newInstance(com.fsck.k9.mailstore.AttachmentResolver)",
        "returns a new instance of K9WebViewClient depending on the Android version and an optional attachment resolver."
      ],
      [
        "onPageFinished(android.webkit.WebView,java.lang.String)",
        "calls the `onPageFinished()` method of the parent class and then executes any `onPageFinishedListener` that has been set."
      ],
      [
        "setOnPageFinishedListener(com.fsck.k9.view.MessageWebView$OnPageFinishedListener)",
        "sets an object that listens for when a web page has finished loading in a K9 message web view."
      ],
      [
        "shouldOverrideUrlLoading(android.webkit.WebView,java.lang.String)",
        "handles URL loading and determines whether to use the WebView or an external browser."
      ]
    ],
    "interface com.fsck.k9.view.MessageWebView$OnPageFinishedListener": [
      [
        "onPageFinished()",
        "notifies the listener that the web page has finished loading."
      ]
    ],
    "interface com.fsck.k9.view.ClientCertificateSpinner$OnClientCertificateChangedListener": [
      [
        "onClientCertificateChanged(java.lang.String)",
        "trigger a callback when the selected client certificate has been changed in a spinner view."
      ]
    ],
    "class com.fsck.k9.view.MessageTitleView": [
      [
        "showSubjectInMessageHeader()",
        "displays the subject line of a message in the header of the message title view."
      ],
      [
        "setMessageHeader(com.fsck.k9.view.MessageHeader)",
        "sets the message header for the message title view."
      ],
      [
        "onDraw(android.graphics.Canvas)",
        "checks if text in a TextView is longer than a certain number of lines, and manually ellipsizes it if necessary, before calling the superclass's onDraw method to actually draw the view on the canvas."
      ]
    ],
    "class com.fsck.k9.view.K9WebViewClient$LollipopWebViewClient": [
      [
        "shouldInterceptRequest(android.webkit.WebView,android.webkit.WebResourceRequest)",
        "overrides the `shouldInterceptRequest` method to return a `WebResourceResponse` based on the `WebView` and `WebResourceRequest` parameters."
      ]
    ],
    "class com.fsck.k9.view.K9WebViewClient$PreLollipopWebViewClient": [
      [
        "shouldInterceptRequest(android.webkit.WebView,java.lang.String)",
        "overrides the `shouldInterceptRequest` method of the `android.webkit.WebViewClient` class to intercept requests made by a WebView and returns a WebResourceResponse for the given URL."
      ]
    ],
    "class com.fsck.k9.view.RecipientSelectView$Recipient": [
      [
        "equals(java.lang.Object)",
        "checks whether the address of two Recipient objects in the RecipientSelectView class are the same."
      ],
      [
        "getDisplayNameOrUnknown(android.content.Context)",
        "(no description)"
      ],
      [
        "setCryptoStatus(com.fsck.k9.view.RecipientSelectView$RecipientCryptoStatus)",
        "sets the crypto status of a recipient in a recipient select view."
      ],
      [
        "getContactLookupUri()",
        "returns the contact lookup URI of a recipient if it exists."
      ],
      [
        "isValidEmailAddress()",
        "checks if the email address stored in the Recipient object is valid."
      ],
      [
        "getDisplayNameOrAddress()",
        "returns either the display name or the address of a recipient in the RecipientSelectView."
      ],
      [
        "getCryptoStatus()",
        "returns the crypto status of a recipient in a recipient select view."
      ],
      [
        "getNameOrUnknown(android.content.Context)",
        "returns the name of a recipient if available, otherwise it returns a string resource for an unknown recipient."
      ]
    ],
    "class com.fsck.k9.view.FoldableLinearLayout": [
      [
        "addView(android.view.View)",
        "adds a child view to the foldableContainer view object."
      ]
    ],
    "interface com.fsck.k9.view.RecipientSelectView$TokenListener": [
      [
        "onTokenChanged(java.lang.Object)",
        "notifies the listener when the token associated with the recipient select view has changed."
      ]
    ],
    "class com.fsck.k9.view.ToolableViewAnimator": [
      [
        "setDisplayedChildId(int)",
        "sets the currently displayed child view based on the ID provided as input parameter, or throws an exception if no view with that ID is found."
      ],
      [
        "setDisplayedChild(int,boolean)",
        "sets the currently displayed child view of a `ToolableViewAnimator` either with or without animation depending on the `animate` parameter."
      ],
      [
        "setDisplayedChild(int)",
        "sets the currently displayed child view within the ToolableViewAnimator class, but only if it is different from the current displayed child view."
      ],
      [
        "addView(android.view.View,int,android.view.ViewGroup$LayoutParams)",
        "adds a view to the `ToolableViewAnimator` and checks if it is in edit mode and a specific child limit has been reached."
      ],
      [
        "getDisplayedChildId()",
        "returns the ID of the currently displayed child in a ToolableViewAnimator."
      ]
    ],
    "interface com.fsck.k9.view.ViewSwitcher$OnSwitchCompleteListener": [
      [
        "onSwitchComplete(int)",
        "notifies the listener that the switch between child views in a ViewSwitcher has completed."
      ]
    ],
    "class com.fsck.k9.view.NonLockingScrollView$HierarchyTreeChangeListener": [
      [
        "onChildViewRemoved(android.view.View,android.view.View)",
        "removes child views from the parent view, and if the child view is a WebView, it removes it from the list of children needing all touches."
      ],
      [
        "onChildViewAdded(android.view.View,android.view.View)",
        "adds child views to a view group and preserves touch interaction for web views."
      ]
    ],
    "class com.fsck.k9.view.MessageCryptoStatusView": [
      [
        "setCryptoDisplayStatus(com.fsck.k9.view.MessageCryptoDisplayStatus)",
        "sets the display status of message crypto and updates the icons and color in the message crypto status view accordingly."
      ]
    ],
    "class com.fsck.k9.view.FoldableLinearLayout$SavedState": [
      [
        "writeToParcel(android.os.Parcel,int)",
        "writes the state of a FoldableLinearLayout, including whether it is currently folded or not, to a Parcel object."
      ]
    ],
    "class com.fsck.k9.view.LinearViewAnimator": [
      [
        "setUpInAnimation(android.view.animation.Animation)",
        "sets up the incoming animation for the LinearViewAnimator."
      ],
      [
        "setUpOutAnimation(android.content.Context,int)",
        "sets up an out animation using an animation resource ID and the AnimationUtils class in the Android framework."
      ],
      [
        "setDownInAnimation(android.view.animation.Animation)",
        "sets a down-in animation for a LinearViewAnimator."
      ],
      [
        "setUpInAnimation(android.content.Context,int)",
        "loads and sets up an animation resource for the linear view animator."
      ],
      [
        "setDownOutAnimation(android.content.Context,int)",
        "sets a down-out animation for a LinearViewAnimator using the animation resource ID and context provided."
      ],
      [
        "setUpOutAnimation(android.view.animation.Animation)",
        "sets up an animation for when elements are removed from the LinearViewAnimator."
      ],
      [
        "setDownOutAnimation(android.view.animation.Animation)",
        "sets a down and out animation for a LinearViewAnimator in an Android application."
      ],
      [
        "setDownInAnimation(android.content.Context,int)",
        "sets a down-in animation for the LinearViewAnimator using the context and the resourceID provided."
      ],
      [
        "setDisplayedChild(int)",
        "sets the displayed child of the LinearViewAnimator to the specified index, with animation enabled by default."
      ],
      [
        "setDisplayedChild(int,boolean)",
        "changes the displayed child view of a LinearViewAnimator and optionally animates the transition to the new view."
      ]
    ],
    "class com.fsck.k9.view.MessageHeader$SavedState": [
      [
        "writeToParcel(android.os.Parcel,int)",
        "writes the state of the additional headers visibility to a Parcel object."
      ]
    ],
    "class com.fsck.k9.view.ThemeUtils": [
      [
        "getStyledColor(android.content.res.Resources.Theme,int)",
        "returns the color value associated with a specified attribute in a given Android theme."
      ],
      [
        "getStyledColor(android.content.Context,int)",
        "returns a styled color resource based on the given attribute from the provided context's theme."
      ]
    ],
    "class com.fsck.k9.view.RecipientSelectView": [
      [
        "onLoaderReset(android.content.Loader)",
        "resets the recipient select view loader and clears any highlighted or selected recipients when filtering."
      ],
      [
        "hasUncompletedText()",
        "checks if the recipient input field has any uncompleted text."
      ],
      [
        "onLoadFinished(android.content.Loader,java.util.List)",
        "loads recipient data into the view and displays it, as well as showing alternates if available."
      ],
      [
        "setCryptoProvider(java.lang.String,boolean)",
        "sets the crypto provider and controls whether advanced information should be shown for the recipient selection view in an email app."
      ],
      [
        "setLoaderManager(android.app.LoaderManager)",
        "sets the loader manager for the recipient select view in an Android app."
      ],
      [
        "setShowCryptoEnabled(boolean)",
        "enables or disables the display of cryptographic information in the recipient select view and redraws all tokens accordingly."
      ],
      [
        "onTouchEvent(android.view.MotionEvent)",
        "handles touch events on a recipient select view, checking for tapped tokens and displaying alternatives if applicable."
      ],
      [
        "addRecipients(com.fsck.k9.view.RecipientSelectView$Recipient[])",
        "adds recipient objects to a recipient selection view."
      ],
      [
        "showDropDown()",
        "shows the dropdown list for selecting recipients if the cursor adapter is valid, otherwise it returns."
      ],
      [
        "onCreateLoader(int,android.os.Bundle)",
        "creates a loader for a recipient select view that filters and loads recipients based on a query or an alternate contact lookup URI."
      ],
      [
        "postShowAlternatesPopup(java.util.List)",
        "postpones the display of an alternates popup for recipient selection until after the soft keyboard has been closed."
      ],
      [
        "setTokenListener(com.fsck.k9.view.RecipientSelectView$TokenListener)",
        "sets a listener for changes to the tokens in a recipient select view."
      ],
      [
        "getAddresses()",
        "returns an array of email addresses based on the recipients selected in a \"RecipientSelectView\" object."
      ],
      [
        "performCompletion()",
        "performs the auto-completion of the recipient list in the recipient select view if the list has a valid selection, and if the selection is invalid but there is enough text to filter by, it replaces the text with the default object."
      ],
      [
        "onKeyDown(int,android.view.KeyEvent)",
        "dismisses a popup and returns a boolean value from the superclass method onKeyDown."
      ],
      [
        "isEmpty()",
        "returns true if the list of objects in the RecipientSelectView is empty."
      ],
      [
        "onFocusChanged(boolean,int,android.graphics.Rect)",
        "displays the keyboard when the focus changes to the `RecipientSelectView`."
      ],
      [
        "onRecipientRemove(com.fsck.k9.view.RecipientSelectView$Recipient)",
        "removes a recipient from the recipient select view and dismisses any associated popup list of alternates."
      ],
      [
        "showAlternatesPopup(java.util.List)",
        "displays a popup with a list of alternate recipients for the chosen email recipient."
      ],
      [
        "onRecipientChange(com.fsck.k9.view.RecipientSelectView$Recipient,com.fsck.k9.view.RecipientSelectView$Recipient)",
        "updates the recipient of the current view with an alternate address and label, and notifies the listener if there is any change in the token."
      ],
      [
        "tryPerformCompletion()",
        "checks if there is incomplete text in the recipient select view, performs auto-completion, and returns whether the number of selected recipients has changed as a result."
      ]
    ],
    "interface com.fsck.k9.view.CryptoModeSelector": [
      [
        "setCryptoStatusListener(com.fsck.k9.view.CryptoModeSelector$CryptoStatusSelectedListener)",
        "sets a listener for the selected crypto status in the CryptoModeSelector view."
      ],
      [
        "setCryptoStatus(com.fsck.k9.view.CryptoModeSelector$CryptoModeSelectorState)",
        "sets the crypto status of the CryptoModeSelector to a given state."
      ]
    ],
    "class com.fsck.k9.view.ColorChip": [
      [
        "drawable()",
        "returns a ShapeDrawable object belonging to the ColorChip class in Android."
      ]
    ]
  },
  "com.fsck.k9.widget.list": {
    "class com.fsck.k9.widget.list.MessageListWidgetProvider": [
      [
        "onReceive(android.content.Context,android.content.Intent)",
        "updates the message list widget when it receives a specific action."
      ],
      [
        "onUpdate(android.content.Context,android.appwidget.AppWidgetManager,int[])",
        "updates all the message list widgets with the given widget IDs in the specified context using the `updateAppWidget` method."
      ],
      [
        "triggerMessageListWidgetUpdate(android.content.Context)",
        "triggers an update for the message list widget for the K9 email client in Android."
      ]
    ],
    "class com.fsck.k9.widget.list.MessageListWidgetService": [
      [
        "onGetViewFactory(android.content.Intent)",
        "creates a new `RemoteViewsFactory` object for displaying the messages in a widget of the K-9 email application."
      ]
    ],
    "class com.fsck.k9.widget.list.MessageListRemoteViewFactory": [
      [
        "getLoadingView()",
        "creates and returns a loading view for a message list widget with a text view displaying a loading message."
      ],
      [
        "getItemId(int)",
        "returns the ID of the item at a given position in the MessageListRemoteViewFactory."
      ],
      [
        "getCount()",
        "returns the number of items in a list used to display mail messages in a widget."
      ],
      [
        "onDestroy()",
        "overrides the `onDestroy()` method of the parent class and does not contain any implementation."
      ],
      [
        "hasStableIds()",
        "returns a boolean value indicating whether the item ids in the adapter are stable across changes to the underlying data."
      ],
      [
        "onCreate()",
        "initializes variables used for displaying text colors in a widget for a messaging app."
      ],
      [
        "getViewTypeCount()",
        "returns the number of view types that can be displayed in this remote view factory, which in this case is 2."
      ],
      [
        "onDataSetChanged()",
        "reloads the message list in a widget and clears the calling identity to ensure security."
      ],
      [
        "getViewAt(int)",
        "returns a RemoteViews object populated with data from the MailItem at the specified position in the mailItems list."
      ]
    ]
  },
  "com.fsck.k9.notification": {
    "class com.fsck.k9.notification.CertificateErrorNotifications": [
      [
        "clearCertificateErrorNotifications(com.fsck.k9.Account,boolean)",
        "clears certificate error notifications for a specific account and incoming/outgoing server."
      ],
      [
        "showCertificateErrorNotification(com.fsck.k9.Account,boolean)",
        "displays a notification for a certificate error for a specific email account."
      ]
    ],
    "class com.fsck.k9.notification.SendFailedNotifications": [
      [
        "showSendFailedNotification(com.fsck.k9.Account,java.lang.Exception)",
        "displays a notification for failed email sending attempts."
      ],
      [
        "clearSendFailedNotification(com.fsck.k9.Account)",
        "clears a notification for a failed email sending attempt associated with a specified email account."
      ]
    ],
    "class com.fsck.k9.notification.NotificationContentCreator": [
      [
        "createFromMessage(com.fsck.k9.Account,com.fsck.k9.mailstore.LocalMessage)",
        "creates notification content based on a given email message and account information."
      ]
    ],
    "class com.fsck.k9.notification.NotificationIds": [
      [
        "getAuthenticationErrorNotificationId(com.fsck.k9.Account,boolean)",
        "returns the notification ID for an authentication error for a given email account and incoming/outgoing status."
      ],
      [
        "getCertificateErrorNotificationId(com.fsck.k9.Account,boolean)",
        "returns the ID of a certificate error notification based on the account and whether it is incoming or outgoing."
      ],
      [
        "getNewMailStackedNotificationId(com.fsck.k9.Account,int)",
        "calculates a unique notification ID for a new mail notification that is stacked with other notifications for the same email account."
      ],
      [
        "getNewMailSummaryNotificationId(com.fsck.k9.Account)",
        "returns the notification ID for a new mail summary notification specific to the given account."
      ],
      [
        "getFetchingMailNotificationId(com.fsck.k9.Account)",
        "returns the notification ID for fetching emails for a given K9 email account."
      ],
      [
        "getSendFailedNotificationId(com.fsck.k9.Account)",
        "returns the unique ID for a send failed notification for a given email account."
      ]
    ],
    "class com.fsck.k9.notification.NotificationController": [
      [
        "clearNewMailNotifications(com.fsck.k9.Account)",
        "clears all new mail notifications for a specific account in the K9 email app."
      ],
      [
        "platformSupportsExtendedNotifications()",
        "checks if the current platform version supports extended notifications."
      ],
      [
        "showSendingNotification(com.fsck.k9.Account)",
        "shows a sending notification for a given email account using the `syncNotifications` object."
      ],
      [
        "removeNewMailNotification(com.fsck.k9.Account,com.fsck.k9.activity.MessageReference)",
        "removes a new mail notification for a specific account and message reference."
      ],
      [
        "showFetchingMailNotification(com.fsck.k9.Account,com.fsck.k9.mail.Folder)",
        "displays a notification to the user that the app is currently fetching mail for a specific account and folder."
      ],
      [
        "clearSendingNotification(com.fsck.k9.Account)",
        "clears any sending notifications associated with a given email account."
      ],
      [
        "platformSupportsLockScreenNotifications()",
        "checks whether the Android platform supports lock screen notifications."
      ],
      [
        "clearCertificateErrorNotifications(com.fsck.k9.Account,boolean)",
        "clears certificate error notifications for a specified account and incoming/outgoing email."
      ],
      [
        "showSendFailedNotification(com.fsck.k9.Account,java.lang.Exception)",
        "displays a notification for a failed email sending attempt."
      ],
      [
        "showAuthenticationErrorNotification(com.fsck.k9.Account,boolean)",
        "displays an authentication error notification for a specific email account."
      ],
      [
        "showCertificateErrorNotification(com.fsck.k9.Account,boolean)",
        "displays a notification for a certificate error in the specified account and incoming server."
      ],
      [
        "newInstance(android.content.Context)",
        "creates a new instance of the NotificationController class with the given Android Context and NotificationManagerCompat."
      ],
      [
        "clearSendFailedNotification(com.fsck.k9.Account)",
        "clears any notifications related to failed email sending for a specified email account."
      ],
      [
        "clearAuthenticationErrorNotification(com.fsck.k9.Account,boolean)",
        "clears any authentication error notifications for a specified email account and type of communication (incoming or outgoing)."
      ],
      [
        "clearFetchingMailNotification(com.fsck.k9.Account)",
        "clears the notification displayed when fetching mail for a specific account in the K-9 Mail app."
      ],
      [
        "addNewMailNotification(com.fsck.k9.Account,com.fsck.k9.mailstore.LocalMessage,int)",
        "adds a new mail notification for a particular account and message with the previous unread message count."
      ]
    ],
    "class com.fsck.k9.notification.DeviceNotifications": [
      [
        "buildSummaryNotification(com.fsck.k9.Account,com.fsck.k9.notification.NotificationData,boolean)",
        "builds a notification for the user based on the account and notification data, with options for privacy mode, message count, and notification settings."
      ],
      [
        "newInstance(com.fsck.k9.notification.NotificationController,com.fsck.k9.notification.NotificationActionCreator,com.fsck.k9.notification.WearNotifications)",
        "creates a new instance of the `DeviceNotifications` class with the given `NotificationController`, `NotificationActionCreator`, and `WearNotifications` parameters."
      ]
    ],
    "class com.fsck.k9.notification.NotificationData": [
      [
        "getNewMessagesCount()",
        "returns the total count of new notifications (active + additional) in the NotificationData object."
      ],
      [
        "getAllMessageReferences()",
        "returns an ArrayList of MessageReferences from active and additional notifications."
      ],
      [
        "getHolderForLatestNotification()",
        "returns the holder for the latest notification."
      ],
      [
        "addNotificationContent(com.fsck.k9.notification.NotificationContent)",
        "adds a new notification content to the list of active notifications or replaces an existing one if the maximum number of active notifications has been reached."
      ],
      [
        "hasSummaryOverflowMessages()",
        "checks if the number of active notifications is greater than a certain maximum value."
      ],
      [
        "getActiveNotificationIds()",
        "(no description)"
      ],
      [
        "getUnreadMessageCount()",
        "returns the total number of unread messages, including any new messages that have been received since the last check."
      ],
      [
        "containsStarredMessages()",
        "checks if there are any notification messages marked as starred."
      ],
      [
        "removeNotificationForMessage(com.fsck.k9.activity.MessageReference)",
        "removes a notification for a specific email message and either creates a new notification if there are additional notifications to display or cancels the notification altogether."
      ],
      [
        "getAccount()",
        "returns the account associated with the notification data."
      ],
      [
        "getSummaryOverflowMessagesCount()",
        "calculates the count of summary overflow notifications based on the number of active and additional notifications in the `NotificationData` object."
      ],
      [
        "getContentForSummaryNotification()",
        "returns notification content for a summary notification."
      ],
      [
        "isSingleMessageNotification()",
        "checks if the notification data only contains one active notification."
      ],
      [
        "setUnreadMessageCount(int)",
        "sets the number of unread messages for a notification."
      ]
    ],
    "class com.fsck.k9.notification.NewMailNotifications": [
      [
        "addNewMailNotification(com.fsck.k9.Account,com.fsck.k9.mailstore.LocalMessage,int)",
        "adds a new notification for a new email message to the notification data for a specified email account."
      ],
      [
        "clearNewMailNotifications(com.fsck.k9.Account)",
        "clears all the new mail notifications and the summary notification for a specific email account."
      ],
      [
        "newInstance(com.fsck.k9.notification.NotificationController,com.fsck.k9.notification.NotificationActionCreator)",
        "creates a new instance of the `NewMailNotifications` class with the given `NotificationController` and `NotificationActionCreator`, along with various other dependencies."
      ],
      [
        "removeNewMailNotification(com.fsck.k9.Account,com.fsck.k9.activity.MessageReference)",
        "removes a new mail notification for a specific account and email message reference."
      ]
    ],
    "class com.fsck.k9.notification.WearNotifications": [
      [
        "addSummaryActions(android.support.v4.app.NotificationCompat.Builder,com.fsck.k9.notification.NotificationData)",
        "adds actions to a wearable notification builder based on the notification data and account information."
      ],
      [
        "buildStackedNotification(com.fsck.k9.Account,com.fsck.k9.notification.NotificationHolder)",
        "builds a stacked notification for a given email account and notification content using a notification builder."
      ]
    ],
    "class com.fsck.k9.notification.AuthenticationErrorNotifications": [
      [
        "showAuthenticationErrorNotification(com.fsck.k9.Account,boolean)",
        "displays a notification for an authentication error related to a specific email account."
      ],
      [
        "clearAuthenticationErrorNotification(com.fsck.k9.Account,boolean)",
        "clears the authentication error notification for a specified account and incoming/outgoing server."
      ]
    ],
    "class com.fsck.k9.notification.SyncNotifications": [
      [
        "clearFetchingMailNotification(com.fsck.k9.Account)",
        "clears a fetching mail notification for a specific email account."
      ],
      [
        "showFetchingMailNotification(com.fsck.k9.Account,com.fsck.k9.mail.Folder)",
        "displays a notification when fetching mail for a certain account and folder in the K-9 Mail app."
      ],
      [
        "showSendingNotification(com.fsck.k9.Account)",
        "displays a progress notification while sending email messages from a specific email account in the K9 email client."
      ],
      [
        "clearSendingNotification(com.fsck.k9.Account)",
        "clears the notification for sending emails for a specified account."
      ]
    ],
    "class com.fsck.k9.notification.RemoveNotificationResult": [
      [
        "shouldCreateNotification()",
        "returns a boolean indicating if a notification should be created based on the presence of a notification holder in the class."
      ],
      [
        "unknownNotification()",
        "returns a new instance of the `RemoveNotificationResult` class with a null notification ID, a priority of 0, and a `true` value for an unknown notification."
      ],
      [
        "getNotificationHolder()",
        "returns a notification holder object if a notification should be created, otherwise it throws an exception."
      ],
      [
        "createNotification(com.fsck.k9.notification.NotificationHolder)",
        "creates a new `RemoveNotificationResult` object with a `NotificationHolder` and a `false` value for the `isSuccessful` parameter."
      ],
      [
        "isUnknownNotification()",
        "returns a boolean value indicating whether the notification is unknown or not."
      ],
      [
        "cancelNotification(int)",
        "returns a new instance of `RemoveNotificationResult` with `null` values, a given `notificationId`, and a `false` value indicating that the notification was not successfully cancelled."
      ],
      [
        "getNotificationId()",
        "returns the notification ID, but throws an exception if the notification is unknown."
      ]
    ],
    "class com.fsck.k9.notification.NotificationActionCreator": [
      [
        "createMarkAllAsReadPendingIntent(com.fsck.k9.Account,java.util.List,int)",
        "creates a PendingIntent to mark all messages as read for a given account and notification ID."
      ],
      [
        "createArchiveMessagePendingIntent(com.fsck.k9.activity.MessageReference,int)",
        "creates a pending intent for archiving a specified message with a notification ID."
      ],
      [
        "createDeleteMessagePendingIntent(com.fsck.k9.activity.MessageReference,int)",
        "creates a pending intent for deleting a message from a notification, depending on the configuration of user confirmation."
      ],
      [
        "createViewFolderPendingIntent(com.fsck.k9.Account,java.lang.String,int)",
        "creates a pending intent to view a folder for a given email account and notification ID."
      ],
      [
        "createArchiveAllPendingIntent(com.fsck.k9.Account,java.util.List,int)",
        "creates a pending intent for archiving all pending notifications for a given account and a list of message references with a specified notification ID."
      ],
      [
        "createMarkMessageAsReadPendingIntent(com.fsck.k9.activity.MessageReference,int)",
        "creates a PendingIntent to mark a message as read for a given notification ID and message reference."
      ],
      [
        "createDeleteAllPendingIntent(com.fsck.k9.Account,java.util.List,int)",
        "creates a PendingIntent for deleting all emails in a specific account and notification, either with a confirmation or directly."
      ],
      [
        "getDeleteAllPendingIntent(com.fsck.k9.Account,java.util.List,int)",
        "returns a pending intent to delete all messages either after confirming with the user or directly doing so without confirmation."
      ],
      [
        "createViewFolderListPendingIntent(com.fsck.k9.Account,int)",
        "creates a PendingIntent to view the list of folders for a given email account with a specific notification ID."
      ],
      [
        "createViewMessagePendingIntent(com.fsck.k9.activity.MessageReference,int)",
        "creates a pending intent for viewing a message with the given reference and notification ID, and sets flags."
      ],
      [
        "getMarkAllAsReadPendingIntent(com.fsck.k9.Account,java.util.List,int)",
        "returns a PendingIntent that marks all specified messages as read when triggered."
      ],
      [
        "createReplyPendingIntent(com.fsck.k9.activity.MessageReference,int)",
        "creates a pending intent for replying to a notification using the message referenced and notification ID."
      ],
      [
        "createViewMessagesPendingIntent(com.fsck.k9.Account,java.util.List,int)",
        "creates a PendingIntent for viewing a list of messages based on account and message references."
      ],
      [
        "createDismissAllMessagesPendingIntent(com.fsck.k9.Account,int)",
        "creates a pending intent to dismiss all messages for a specified account and notification ID."
      ],
      [
        "createDismissMessagePendingIntent(android.content.Context,com.fsck.k9.activity.MessageReference,int)",
        "creates a pending intent to dismiss a specific message notification with a given notification ID."
      ],
      [
        "createMarkMessageAsSpamPendingIntent(com.fsck.k9.activity.MessageReference,int)",
        "creates a PendingIntent to mark a message as spam based on its reference and notification ID."
      ]
    ],
    "class com.fsck.k9.notification.LockScreenNotification": [
      [
        "configureLockScreenNotification(android.support.v4.app.NotificationCompat.Builder,com.fsck.k9.notification.NotificationData)",
        "configures the lock screen notification visibility level based on user preferences and notification data."
      ],
      [
        "newInstance(com.fsck.k9.notification.NotificationController)",
        "creates a new instance of `LockScreenNotification` class with the provided `NotificationController` argument."
      ]
    ],
    "class com.fsck.k9.notification.NotificationGroupKeys": [
      [
        "getGroupKey(com.fsck.k9.Account)",
        "returns the group key for a notification associated with a specific email account."
      ]
    ],
    "class com.fsck.k9.notification.NotificationActionService": [
      [
        "createDeleteAllMessagesIntent(android.content.Context,java.lang.String,java.util.List)",
        "creates an intent to delete all messages in a specific account, identified by the account UUID, using a list of message references."
      ],
      [
        "startService(android.content.Intent,int)",
        "starts a service to perform action on notifications related to email accounts."
      ]
    ],
    "class com.fsck.k9.notification.AddNotificationResult": [
      [
        "newNotification(com.fsck.k9.notification.NotificationHolder)",
        "creates a new instance of the AddNotificationResult class with a given NotificationHolder and a boolean indicating whether the notification is an ongoing notification."
      ],
      [
        "shouldCancelNotification()",
        "returns a boolean value indicating whether a notification should be cancelled before it is reused."
      ],
      [
        "replaceNotification(com.fsck.k9.notification.NotificationHolder)",
        "creates a new instance of AddNotificationResult with the given NotificationHolder and returns it with a boolean value of true indicating that the notification should be replaced."
      ],
      [
        "getNotificationHolder()",
        "returns the notification holder object stored in the AddNotificationResult class."
      ],
      [
        "getNotificationId()",
        "returns the notification ID if the notification should be cancelled, otherwise it throws an exception."
      ]
    ]
  },
  "com.fsck.k9.power": {
    "abstract class com.fsck.k9.power.DeviceIdleManager": [
      [
        "registerReceiver()",
        "registers a receiver for device idle state changes."
      ],
      [
        "getInstance(android.content.Context)",
        "returns an instance of the DeviceIdleManager class, either a real implementation or a no-op implementation depending on whether the device supports idle mode and the app is whitelisted."
      ],
      [
        "unregisterReceiver()",
        "unregisters a previously registered receiver for changes in device idle state."
      ]
    ],
    "class com.fsck.k9.power.DozeChecker": [
      [
        "isDeviceIdleModeSupported()",
        "checks whether the device idle mode is supported on the current Android version."
      ],
      [
        "isAppWhitelisted()",
        "checks whether the app is whitelisted from battery optimizations."
      ]
    ],
    "class com.fsck.k9.power.DeviceIdleReceiver": [
      [
        "onReceive(android.content.Context,android.content.Intent)",
        "checks if the device is in idle mode and resets the mail service if it is not in idle mode."
      ]
    ],
    "class com.fsck.k9.power.DeviceIdleManager$RealDeviceIdleManager": [
      [
        "unregisterReceiver()",
        "unregisters a device idle receiver for power optimization purposes."
      ],
      [
        "registerReceiver()",
        "registers a receiver for device idle events and sets a flag indicating that it has been registered."
      ]
    ],
    "class com.fsck.k9.power.DeviceIdleManager$NoOpDeviceIdleManager": [
      [
        "unregisterReceiver()",
        "simply does nothing when called."
      ],
      [
        "registerReceiver()",
        "overrides the `registerReceiver()` method of the superclass with an empty implementation that does nothing."
      ]
    ]
  },
  "com.fsck.k9.preferences": {
    "class com.fsck.k9.preferences.FolderSettings": [
      [
        "convert(java.util.Map)",
        "converts a map of string-object type settings to a map of string-string type settings for folder settings."
      ],
      [
        "upgrade(int,java.util.Map)",
        "upgrades the settings for email folders in the K9 mail client."
      ]
    ],
    "class com.fsck.k9.preferences.GlobalSettings$DirectorySetting": [
      [
        "fromString(java.lang.String)",
        "attempts to convert a string value into a directory path, throwing an exception if the value is invalid."
      ]
    ],
    "class com.fsck.k9.preferences.GlobalSettings$SettingsUpgraderV12": [
      [
        "upgrade(java.util.Map)",
        "upgrades a certain setting in the Global Settings of an email client (K9) based on the value of a specific boolean setting (`keyguardPrivacy`)."
      ]
    ],
    "class com.fsck.k9.preferences.Settings$BooleanSetting": [
      [
        "fromString(java.lang.String)",
        "parses a string value and returns a corresponding Boolean value, throwing an exception if the string is not a valid Boolean value."
      ]
    ],
    "abstract class com.fsck.k9.preferences.Settings$PseudoEnumSetting": [
      [
        "toPrettyString(java.lang.Object)",
        "returns the corresponding pretty string value for the input object value based on a defined mapping."
      ],
      [
        "fromPrettyString(java.lang.String)",
        "parses a String value to return its corresponding enum value based on a predefined mapping."
      ]
    ],
    "class com.fsck.k9.preferences.SettingsExporter": [
      [
        "exportToFile(android.content.Context,boolean,java.util.Set)",
        "exports the settings of an email app to a file on the device's external storage."
      ],
      [
        "exportToUri(android.content.Context,boolean,java.util.Set,android.net.Uri)",
        "exports the K-9 Mail settings to a specified URI."
      ],
      [
        "generateDatedExportFileName()",
        "generates a unique file name for exporting K-9 mail app settings, including the current date."
      ]
    ],
    "class com.fsck.k9.preferences.GlobalSettings$LanguageSetting": [
      [
        "fromString(java.lang.String)",
        "converts a string value to a language setting, throwing an exception if the value is invalid."
      ]
    ],
    "class com.fsck.k9.preferences.Settings$EnumSetting": [
      [
        "fromString(java.lang.String)",
        "parses a string value and returns the corresponding Java Enum value, or throws an exception if the string is not a valid Enum value."
      ]
    ],
    "class com.fsck.k9.preferences.CheckBoxListPreference": [
      [
        "getCheckedItems()",
        "returns an array of booleans representing the checked items in a checkbox list preference."
      ],
      [
        "setItems(java.lang.CharSequence[])",
        "sets the items for a checkbox list preference."
      ],
      [
        "setCheckedItems(boolean[])",
        "sets the checked items in a CheckBoxListPreference based on a boolean array."
      ]
    ],
    "class com.fsck.k9.preferences.Settings": [
      [
        "convert(java.util.Map,java.util.Map)",
        "converts a map of settings from their internal representation to a string representation used in preference storage."
      ],
      [
        "upgrade(int,java.util.Map,java.util.Map,java.util.Map)",
        "upgrades settings using a combination of a structure describing different settings and custom upgraders, modifying and returning the upgraded settings."
      ]
    ],
    "class com.fsck.k9.preferences.GlobalSettings$TimeSetting": [
      [
        "fromString(java.lang.String)",
        "parses a string value and validates it against a regular expression to ensure it represents a valid time setting."
      ]
    ],
    "class com.fsck.k9.preferences.SettingsImporter$ImportedServerSettings": [
      [
        "getExtra()",
        "returns an unmodifiable map of any extra settings associated with an imported server setting object."
      ]
    ],
    "class com.fsck.k9.preferences.Settings$ColorSetting": [
      [
        "fromString(java.lang.String)",
        "parses a string and converts it into an integer value."
      ],
      [
        "fromPrettyString(java.lang.String)",
        "parses a hexadecimal color code string into an integer value and appends an alpha value to it."
      ],
      [
        "toPrettyString(java.lang.Integer)",
        "converts an Integer value representing a color into a human-readable string representation of the color code in hexadecimal format."
      ]
    ],
    "class com.fsck.k9.preferences.AccountSettings$RingtoneSetting": [
      [
        "fromString(java.lang.String)",
        "converts a string value to a Java string, with the possibility of implementing validation in the future."
      ]
    ],
    "class com.fsck.k9.preferences.AccountSettings$DeletePolicySetting": [
      [
        "fromString(java.lang.String)",
        "parses a string representation of an integer, checks whether it corresponds to a valid delete policy, and returns the integer value if so, otherwise throws an exception."
      ]
    ],
    "class com.fsck.k9.preferences.Settings$IntegerRangeSetting": [
      [
        "fromString(java.lang.String)",
        "converts a string representation of an integer value to an Integer object, verifying that it falls within a specified range."
      ]
    ],
    "class com.fsck.k9.preferences.Settings$WebFontSizeSetting": [
      [
        "fromString(java.lang.String)",
        "parses a String to an Integer and checks if the integer matches a pre-defined set of font sizes, throwing an exception if it doesn't."
      ]
    ],
    "class com.fsck.k9.preferences.GlobalSettings$SubThemeSetting": [
      [
        "fromString(java.lang.String)",
        "parses a string value and returns a corresponding K9 theme, throwing an exception if the string cannot be parsed."
      ],
      [
        "toPrettyString(com.fsck.k9.K9$Theme)",
        "converts a K9 theme object into a human-readable string representation, with a fallback to the superclass implementation if the input theme is not `USE_GLOBAL`."
      ],
      [
        "fromPrettyString(java.lang.String)",
        "converts a String value of a sub-theme setting into a K9 theme object."
      ]
    ],
    "class com.fsck.k9.preferences.GlobalSettings": [
      [
        "convert(java.util.Map)",
        "converts a Java Map containing String/Object pairs to a new Map containing only String/String pairs using a predefined set of global settings."
      ],
      [
        "upgrade(int,java.util.Map)",
        "upgrades the global settings of the K9 email client based on the specified version and validated settings."
      ]
    ],
    "class com.fsck.k9.preferences.AccountSettings$StringResourceSetting": [
      [
        "fromString(java.lang.String)",
        "parses a String value and returns it if it exists in a pre-defined mapping, otherwise throws an exception."
      ]
    ],
    "class com.fsck.k9.preferences.AccountSettings$IntegerResourceSetting": [
      [
        "fromString(java.lang.String)",
        "converts a string into an integer and throws an exception if the string is not a valid integer."
      ]
    ],
    "class com.fsck.k9.preferences.GlobalSettings$SettingsUpgraderV31": [
      [
        "convertFromOldSize(int)",
        "converts an integer value representing an old size to a new size value."
      ],
      [
        "upgrade(java.util.Map)",
        "upgrades a particular font size preference in a specified email client's settings from an old size to a new size."
      ]
    ],
    "class com.fsck.k9.preferences.AccountSettings$StorageProviderSetting": [
      [
        "fromString(java.lang.String)",
        "Validates if a given string is an available storage provider and returns it, otherwise it throws a runtime exception."
      ],
      [
        "getDefaultValue()",
        "returns the default storage provider ID used for email accounts in the K9 email client."
      ]
    ],
    "interface com.fsck.k9.preferences.Settings$SettingsUpgrader": [
      [
        "upgrade(java.util.Map)",
        "upgrades the provided settings and returns any removed setting names."
      ]
    ],
    "class com.fsck.k9.preferences.StorageEditor": [
      [
        "putLong(java.lang.String,long)",
        "puts a long integer value into a storage editor with a given key."
      ],
      [
        "putBoolean(java.lang.String,boolean)",
        "adds a boolean value with the given key to the internal changes map."
      ],
      [
        "putInt(java.lang.String,int)",
        "puts an integer value with a corresponding string key into a storage editor and returns the editor for further modifications."
      ],
      [
        "putString(java.lang.String,java.lang.String)",
        "adds a key-value pair to the changes map if the value is not null, or removes the key if the value is null."
      ],
      [
        "copy(android.content.SharedPreferences)",
        "copies values from one SharedPreferences instance to another."
      ],
      [
        "commit()",
        "attempts to commit changes made to preferences and returns true if successful, otherwise logs an error and returns false."
      ],
      [
        "remove(java.lang.String)",
        "adds the given key to a list of removals in a StorageEditor object and returns the object."
      ]
    ],
    "class com.fsck.k9.preferences.GlobalSettings$SettingsUpgraderV24": [
      [
        "upgrade(java.util.Map)",
        "checks if the theme and messageViewTheme settings are equal, and if so, it sets the messageViewTheme to use the global theme setting."
      ]
    ],
    "class com.fsck.k9.preferences.SettingsImporter": [
      [
        "getImportStreamContents(java.io.InputStream)",
        "parses an input stream containing settings and returns information on whether it contains global settings and/or account settings, along with the name and UUID of each account configuration found."
      ],
      [
        "importSettings(android.content.Context,java.io.InputStream,boolean,java.util.List,boolean)",
        "imports global settings and/or account configurations from an input stream and returns an object containing information about successfully imported accounts and errors encountered."
      ]
    ],
    "class com.fsck.k9.preferences.IdentitySettings$SignatureSetting": [
      [
        "getDefaultValue()",
        "returns the default value for the signature setting in the K9 email application."
      ],
      [
        "fromString(java.lang.String)",
        "converts a given string value into another string value and throws an exception if the given value is invalid."
      ]
    ],
    "abstract class com.fsck.k9.preferences.Settings$SettingsDescription": [
      [
        "getDefaultValue()",
        "returns the default value of the specified type for a certain setting."
      ],
      [
        "fromString(java.lang.String)",
        "parses a string into the internal representation of a setting's value."
      ],
      [
        "toString(java.lang.Object)",
        "converts a setting's internal value to a string representation using the `toString()` method."
      ],
      [
        "fromPrettyString(java.lang.String)",
        "converts a pretty-printed version of a setting's value to the internal representation using a specified string value and throws an exception if the value is invalid."
      ],
      [
        "toPrettyString(java.lang.Object)",
        "converts a setting value to a \"pretty\" string representation."
      ]
    ],
    "class com.fsck.k9.preferences.IdentitySettings": [
      [
        "upgrade(int,java.util.Map)",
        "upgrades the identity settings to a specified version using a map of validated settings."
      ],
      [
        "convert(java.util.Map)",
        "converts a map of string keys and object values into a map of string keys and string values specific to the IdentitySettings class."
      ]
    ],
    "class com.fsck.k9.preferences.IdentitySettings$OptionalEmailAddressSetting": [
      [
        "fromPrettyString(java.lang.String)",
        "parses a pretty string representation of an optional email address setting and returns a null value if the string is empty, otherwise returning the parsed value."
      ],
      [
        "fromString(java.lang.String)",
        "validates and returns a string representing an email address."
      ],
      [
        "toPrettyString(java.lang.String)",
        "returns either an empty string or the input string value."
      ],
      [
        "toString(java.lang.String)",
        "returns the input value if it is not null, otherwise it returns null."
      ]
    ],
    "class com.fsck.k9.preferences.Storage": [
      [
        "isEmpty()",
        "checks if the `storage` is empty and returns a boolean value indicating the result."
      ],
      [
        "contains(java.lang.String)",
        "checks if a given key exists in the storage."
      ],
      [
        "getString(java.lang.String,java.lang.String)",
        "returns a string value from storage for a given key, with a default value if the key is not found."
      ],
      [
        "getBoolean(java.lang.String,boolean)",
        "retrieves a boolean value from the storage using a provided key and returns either the retrieved value or a default value if the key is not found."
      ],
      [
        "edit()",
        "returns a new instance of the `StorageEditor` class, using the current `Storage` object as a parameter."
      ],
      [
        "getLong(java.lang.String,long)",
        "retrieves a long value from the storage based on a given key, and returns either the value or a default value if the key does not exist or if the value cannot be parsed as a long."
      ],
      [
        "getInt(java.lang.String,int)",
        "retrieves an integer value associated with a given key from the app's preferences and returns it, or returns a default value if no value is found or if the retrieved value cannot be parsed as an integer."
      ],
      [
        "getAll()",
        "returns a map of all the stored preferences."
      ],
      [
        "getStorage(android.content.Context)",
        "returns a singleton instance of Storage for a given Context, creating it if necessary and avoiding race conditions."
      ]
    ],
    "class com.fsck.k9.preferences.TimePickerPreference": [
      [
        "onTimeChanged(android.widget.TimePicker,int,int)",
        "updates the persisted value and notifies the change listener with the new hour and minute selected on the time picker."
      ],
      [
        "getTime()",
        "returns the time as a string in hh:mm format."
      ],
      [
        "setDefaultValue(java.lang.Object)",
        "sets the default value for the TimePickerPreference, with validation checks."
      ]
    ],
    "class com.fsck.k9.preferences.Settings$StringSetting": [
      [
        "fromString(java.lang.String)",
        "returns the input string value as is."
      ]
    ],
    "class com.fsck.k9.preferences.Settings$FontSizeSetting": [
      [
        "fromString(java.lang.String)",
        "converts a string representation of a font size to an integer, checks if the integer is a valid font size, and throws an exception if the value is invalid."
      ]
    ],
    "class com.fsck.k9.preferences.GlobalSettings$ThemeSetting": [
      [
        "toString(com.fsck.k9.K9$Theme)",
        "returns the ordinal value of the given K9 theme as a string."
      ],
      [
        "fromString(java.lang.String)",
        "parses a String value and returns the corresponding theme for the K9 email client."
      ],
      [
        "toPrettyString(com.fsck.k9.K9$Theme)",
        "returns a string representing a pretty version of the given K-9 email client theme."
      ],
      [
        "fromPrettyString(java.lang.String)",
        "converts a String representation of a theme setting into a corresponding value of the K9.Theme enum type."
      ]
    ],
    "class com.fsck.k9.preferences.AccountSettings": [
      [
        "upgrade(int,java.util.Map)",
        "upgrades the account settings to a newer version using a map of validated settings."
      ],
      [
        "convert(java.util.Map)",
        "converts a map of string-object settings for an email account to a new map of string-string settings."
      ]
    ]
  },
  "com.fsck.k9.provider": {
    "class com.fsck.k9.provider.AttachmentProvider": [
      [
        "onCreate()",
        "returns a boolean value indicating whether the creation of the `AttachmentProvider` object was successful or not."
      ],
      [
        "update(android.net.Uri,android.content.ContentValues,java.lang.String,java.lang.String[])",
        "throws an exception, indicating that it is not supported and cannot be used."
      ],
      [
        "insert(android.net.Uri,android.content.ContentValues)",
        "throws an exception and does not allow inserting values into the 'AttachmentProvider' class."
      ],
      [
        "getAttachmentUri(java.lang.String,long)",
        "returns a URI for a specific attachment of the specified account with the given ID."
      ],
      [
        "openFile(android.net.Uri,java.lang.String)",
        "opens a file descriptor for a requested attachment from the K-9 email application's provider, given the attachment's URI and mode of access."
      ],
      [
        "delete(android.net.Uri,java.lang.String,java.lang.String[])",
        "throws an unsupported operation exception when the `delete` method of the `AttachmentProvider` class is called with a URI, string argument, and string array argument."
      ],
      [
        "getType(android.net.Uri)",
        "returns the type of content specified by the given URI."
      ],
      [
        "query(android.net.Uri,java.lang.String[],java.lang.String,java.lang.String[],java.lang.String)",
        "retrieves attachment information from the local store for a given ID and returns a cursor with the requested columns."
      ]
    ],
    "class com.fsck.k9.provider.MessageProvider$MessagesQueryHandler": [
      [
        "query(android.net.Uri,java.lang.String[],java.lang.String,java.lang.String[],java.lang.String)",
        "queries the provider for messages using the given projection."
      ],
      [
        "getPath()",
        "returns the path \"inbox_messages/\" for the query handler of the messages in the inbox section of the email provider."
      ]
    ],
    "class com.fsck.k9.provider.MessageProvider$AccountNumberExtractor": [
      [
        "getField(com.fsck.k9.activity.MessageInfoHolder)",
        "extracts and returns the account number associated with a given email message."
      ]
    ],
    "class com.fsck.k9.provider.MessageProvider$CountExtractor": [
      [
        "getField(java.lang.Object)",
        "returns the value of the \"count\" field from the specified object as an integer."
      ]
    ],
    "class com.fsck.k9.provider.MessageProvider$DeleteUriExtractor": [
      [
        "getField(com.fsck.k9.activity.MessageInfoHolder)",
        "returns a string representing the URI used to delete a message from a certain account and folder."
      ]
    ],
    "class com.fsck.k9.provider.EmailProvider": [
      [
        "query(android.net.Uri,java.lang.String[],java.lang.String,java.lang.String[],java.lang.String)",
        "queries the EmailProvider to retrieve requested data based on the given URI and parameters."
      ],
      [
        "delete(android.net.Uri,java.lang.String,java.lang.String[])",
        "throws a runtime exception indicating that the method has not been implemented yet."
      ],
      [
        "getType(android.net.Uri)",
        "throws an exception because it is not yet implemented."
      ],
      [
        "update(android.net.Uri,android.content.ContentValues,java.lang.String,java.lang.String[])",
        "throws a runtime exception stating that the method is not implemented yet."
      ],
      [
        "insert(android.net.Uri,android.content.ContentValues)",
        "throws a runtime exception for now, indicating that it has not been implemented yet."
      ],
      [
        "onCreate()",
        "overrides the `onCreate()` method of the superclass and returns `true`."
      ]
    ],
    "class com.fsck.k9.provider.MessageProvider$AccountColorExtractor": [
      [
        "getField(com.fsck.k9.activity.MessageInfoHolder)",
        "extracts the chip color of a message's account holder."
      ]
    ],
    "class com.fsck.k9.provider.MessageProvider$HasAttachmentsExtractor": [
      [
        "getField(com.fsck.k9.activity.MessageInfoHolder)",
        "checks if a given email message has any attachments and returns a boolean value."
      ]
    ],
    "class com.fsck.k9.provider.MessageProvider$MessageInfoHolderRetrieverListener": [
      [
        "searchStats(com.fsck.k9.AccountStats)",
        "puts the message info holders into a queue for later retrieval and logs an error if interrupted."
      ],
      [
        "listLocalMessagesAddMessages(com.fsck.k9.Account,java.lang.String,java.util.List)",
        "populates a list of `MessageInfoHolder` objects with information from a list of local `LocalMessage` objects retrieved from a specified email account and folder."
      ]
    ],
    "class com.fsck.k9.provider.DecryptedFileProvider": [
      [
        "onTrimMemory(int)",
        "deletes old temporary files and unregisters a file cleanup receiver when the device's memory is low."
      ],
      [
        "getFileFactory(android.content.Context)",
        "returns a `FileFactory` that creates temporary decrypted files and registers a file cleanup receiver in the given `Context`."
      ],
      [
        "getUriForProvidedFile(android.content.Context,java.io.File,java.lang.String,java.lang.String)",
        "generates a content URI for a provided file, with optional parameters for encoding and MIME type."
      ],
      [
        "deleteOldTemporaryFiles(android.content.Context)",
        "deletes temporary files in a directory that are older than a certain threshold time and returns whether all files were successfully deleted."
      ],
      [
        "getType(android.net.Uri)",
        "returns the MIME type for a given URI."
      ],
      [
        "delete(android.net.Uri,java.lang.String,java.lang.String[])",
        "throws an UnsupportedOperationException when attempting to delete data from a URI in the DecryptedFileProvider class."
      ],
      [
        "openFile(android.net.Uri,java.lang.String)",
        "opens a file from a Uri, decodes it based on the specified encoding (if any), and returns a ParcelFileDescriptor for it."
      ]
    ],
    "class com.fsck.k9.provider.MessageProvider$ThrottlingQueryHandler": [
      [
        "getPath()",
        "returns the path of the delegate object in the `ThrottlingQueryHandler` class's `MessageProvider`."
      ],
      [
        "query(android.net.Uri,java.lang.String[],java.lang.String,java.lang.String[],java.lang.String)",
        "creates a monitored cursor for a given URI, and schedules a task to close the cursor after 30 seconds if it has not already been closed."
      ]
    ],
    "class com.fsck.k9.provider.MessageProvider$SubjectExtractor": [
      [
        "getField(com.fsck.k9.activity.MessageInfoHolder)",
        "returns the subject field of a message from a specified message holder object."
      ]
    ],
    "class com.fsck.k9.provider.MessageProvider$PreviewExtractor": [
      [
        "getField(com.fsck.k9.activity.MessageInfoHolder)",
        "returns the preview text of a message from a `MessageInfoHolder` object."
      ]
    ],
    "class com.fsck.k9.provider.MessageProvider$IncrementExtractor": [
      [
        "getField(com.fsck.k9.activity.MessageInfoHolder)",
        "returns an incremented count of the number of messages in a given `MessageInfoHolder` object."
      ]
    ],
    "class com.fsck.k9.provider.MessageProvider$HasStarExtractor": [
      [
        "getField(com.fsck.k9.activity.MessageInfoHolder)",
        "returns a Boolean value indicating whether or not a message is marked as starred."
      ]
    ],
    "class com.fsck.k9.provider.MessageProvider$ReverseDateComparator": [
      [
        "compare(com.fsck.k9.activity.MessageInfoHolder,com.fsck.k9.activity.MessageInfoHolder)",
        "compares two message info holders based on their compareDate values, sorting them in reverse chronological order."
      ]
    ],
    "class com.fsck.k9.provider.AttachmentTempFileProvider": [
      [
        "deleteOldTemporaryFiles(android.content.Context)",
        "deletes old temporary files that are older than a certain time threshold."
      ],
      [
        "getMimeTypeUri(android.net.Uri,java.lang.String)",
        "adds a query parameter to a content URI with a specified MIME type."
      ],
      [
        "getType(android.net.Uri)",
        "returns the MIME type of the attachment file specified in the URI by querying the \"mime_type\" parameter."
      ],
      [
        "onTrimMemory(int)",
        "deletes old temporary files and unregisters a file cleanup receiver if the system's memory level is below TRIM_MEMORY_COMPLETE."
      ],
      [
        "createTempUriForContentUri(android.content.Context,android.net.Uri)",
        "creates a temporary file URI for a given content URI and registers a file cleanup receiver."
      ],
      [
        "delete(android.net.Uri,java.lang.String,java.lang.String[])",
        "throws an unsupported operation exception when attempting to delete a specific URI and selection criteria from the AttachmentTempFileProvider class."
      ]
    ],
    "class com.fsck.k9.provider.MessageProvider": [
      [
        "update(android.net.Uri,android.content.ContentValues,java.lang.String,java.lang.String[])",
        "returns zero unless the `K9.app` is not null."
      ],
      [
        "getType(android.net.Uri)",
        "returns a string representing the MIME type of the data associated with the given URI."
      ],
      [
        "onCreate()",
        "initializes a message provider by registering query handlers and content resolver notifiers."
      ],
      [
        "delete(android.net.Uri,java.lang.String,java.lang.String[])",
        "deletes a message from an email account specified by the given URI."
      ],
      [
        "insert(android.net.Uri,android.content.ContentValues)",
        "logs a message and returns null."
      ],
      [
        "query(android.net.Uri,java.lang.String[],java.lang.String,java.lang.String[],java.lang.String)",
        "handles query requests for the MessageProvider class in the K-9 email client app."
      ]
    ],
    "interface com.fsck.k9.provider.MessageProvider$QueryHandler": [
      [
        "getPath()",
        "returns the path that the current instance of the MessageProvider QueryHandler is able to respond to."
      ],
      [
        "query(android.net.Uri,java.lang.String[],java.lang.String,java.lang.String[],java.lang.String)",
        "queries the message provider with the given parameters and returns a cursor containing the results."
      ]
    ],
    "interface com.fsck.k9.provider.MessageProvider$FieldExtractor": [
      [
        "getField(java.lang.Object)",
        "returns a specified field of an object of type T as an object of type K."
      ]
    ],
    "class com.fsck.k9.provider.EmailProvider$SpecialColumnsCursor": [
      [
        "getColumnCount()",
        "returns the number of columns in the cursor corresponding to the special columns defined in `mColumnMapping`."
      ],
      [
        "getDouble(int)",
        "returns the double value of a column at a specific index, but throws an exception if the column is a special column that can only be retrieved as a string."
      ],
      [
        "isNull(int)",
        "checks if a specified column index is null in the cursor and returns a boolean value."
      ],
      [
        "getColumnName(int)",
        "returns the name of the column specified by the index passed as a parameter."
      ],
      [
        "getColumnNames()",
        "returns an array containing the names of the columns in the cursor."
      ],
      [
        "getLong(int)",
        "overrides the default implementation of `getLong(int)` and handles special columns differently by throwing a runtime exception if the column can only be retrieved as a string."
      ],
      [
        "getShort(int)",
        "overrides the default `getShort` method to retrieve a short integer value from a column in the email provider's database."
      ],
      [
        "getColumnIndex(java.lang.String)",
        "searches for the index of a specified column name in an array and returns it or defers to the parent class implementation."
      ],
      [
        "getType(int)",
        "returns the type of data stored in a specified column of a cursor, taking into account any special columns."
      ],
      [
        "getInt(int)",
        "overrides the `getInt` method to retrieve a column index and throws an exception if the column can only be retrieved as a string."
      ],
      [
        "getFloat(int)",
        "gets a float value from a specific column index and throws a runtime exception if it's a special column that can only be retrieved as a string."
      ],
      [
        "getBlob(int)",
        "returns the byte array corresponding to the specified column index if it is not a special column, otherwise it throws a runtime exception."
      ],
      [
        "getColumnIndexOrThrow(java.lang.String)",
        "returns the index of a column in a database cursor, or throws an exception if the column does not exist."
      ],
      [
        "getString(int)",
        "returns the value of a specified column index by mapping it to a real column index or retrieving a special column value."
      ]
    ],
    "class com.fsck.k9.provider.MessageProvider$AccountsQueryHandler": [
      [
        "query(android.net.Uri,java.lang.String[],java.lang.String,java.lang.String[],java.lang.String)",
        "queries all accounts from the MessageProvider using the provided projection."
      ],
      [
        "getAllAccounts(java.lang.String[])",
        "returns a cursor containing all the accounts in the K9 email client application."
      ],
      [
        "getPath()",
        "returns the path for the accounts query handler."
      ]
    ],
    "class com.fsck.k9.provider.MessageProvider$AccountExtractor": [
      [
        "getField(com.fsck.k9.activity.MessageInfoHolder)",
        "returns the description of the account associated with a given MessageInfoHolder."
      ]
    ],
    "class com.fsck.k9.provider.MessageProvider$SenderAddressExtractor": [
      [
        "getField(com.fsck.k9.activity.MessageInfoHolder)",
        "returns the sender address field from a given MessageInfoHolder object."
      ]
    ],
    "class com.fsck.k9.provider.MessageProvider$UnreadQueryHandler": [
      [
        "getPath()",
        "returns a string corresponding to the URI path for querying unread messages for a specific account."
      ],
      [
        "query(android.net.Uri,java.lang.String[],java.lang.String,java.lang.String[],java.lang.String)",
        "queries the unread messages for a specific email account and clears the calling identity to access a non-exported provider before returning the results."
      ]
    ],
    "class com.fsck.k9.provider.MessageProvider$IdExtractor": [
      [
        "getField(com.fsck.k9.activity.MessageInfoHolder)",
        "returns the database ID of a message stored in a MessageInfoHolder object."
      ]
    ],
    "class com.fsck.k9.provider.AttachmentTempFileProvider$AttachmentTempFileProviderCleanupReceiver": [
      [
        "onReceive(android.content.Context,android.content.Intent)",
        "cleans up old temporary files and unregisters a file cleanup receiver if all files are deleted."
      ]
    ],
    "class com.fsck.k9.provider.MessageProvider$SenderExtractor": [
      [
        "getField(com.fsck.k9.activity.MessageInfoHolder)",
        "returns the sender of a message as a CharSequence object."
      ]
    ],
    "class com.fsck.k9.provider.MessageProvider$MonitoredCursor": [
      [
        "unregisterDataSetObserver(android.database.DataSetObserver)",
        "unregisters a DataSetObserver from the MonitoredCursor's underlying Cursor."
      ],
      [
        "isBeforeFirst()",
        "checks if the cursor is positioned before the first row."
      ],
      [
        "getInt(int)",
        "retrieves an integer value from the specified column index of a monitored cursor object."
      ],
      [
        "moveToPrevious()",
        "moves the cursor to the previous position within the data set."
      ],
      [
        "getPosition()",
        "returns the current position of the cursor in the `MessageProvider` class."
      ],
      [
        "getColumnNames()",
        "returns the names of the columns in the monitored cursor of the MessageProvider class."
      ],
      [
        "getNotificationUri()",
        "returns the notification URI for the cursor, which in this case is null."
      ],
      [
        "getColumnCount()",
        "returns the number of columns in a cursor used by the MessageProvider class."
      ],
      [
        "setNotificationUri(android.content.ContentResolver,android.net.Uri)",
        "sets the notification URI for the monitored cursor with the given content resolver and URI."
      ],
      [
        "getColumnName(int)",
        "returns the name of the column with the given index in a monitored cursor."
      ],
      [
        "isNull(int)",
        "checks if a given column value is null in a monitored cursor of a message provider in Java."
      ],
      [
        "getString(int)",
        "returns a String value of a specified column in a monitored cursor of a message provider in K-9 mail app."
      ],
      [
        "getColumnIndexOrThrow(java.lang.String)",
        "returns the index of a column based on its name and throws an exception if the column does not exist."
      ],
      [
        "copyStringToBuffer(int,android.database.CharArrayBuffer)",
        "copies a string value from the specified column index of a monitored database cursor to a character array buffer."
      ],
      [
        "deactivate()",
        "deactivates the monitored cursor while checking to ensure that it is not already closed."
      ],
      [
        "requery()",
        "requeries the database for the cursor's data."
      ],
      [
        "isLast()",
        "checks if the current record in the cursor is the last one and returns a boolean value accordingly."
      ],
      [
        "isClosed()",
        "checks whether the cursor is closed or not, taking into account both the internal state of the monitored cursor and the state of the underlying cursor."
      ],
      [
        "getBlob(int)",
        "gets a binary large object (blob) value from the specified column index of a monitored cursor and returns it as a byte array."
      ],
      [
        "close()",
        "closes a monitored cursor and releases the associated resources."
      ],
      [
        "unregisterContentObserver(android.database.ContentObserver)",
        "unregisters a content observer from a monitored cursor in a message provider."
      ],
      [
        "registerDataSetObserver(android.database.DataSetObserver)",
        "registers a dataset observer on a monitored cursor."
      ],
      [
        "getLong(int)",
        "returns the `long` value of the specified column index from the monitored cursor if it is not closed."
      ],
      [
        "getWantsAllOnMoveCalls()",
        "returns a boolean value indicating whether all move calls should be monitored or not."
      ],
      [
        "isAfterLast()",
        "checks if the cursor is positioned after the last row of data in the database query result set."
      ],
      [
        "isFirst()",
        "checks if the current cursor position is the first position and returns a boolean value indicating this."
      ],
      [
        "getShort(int)",
        "returns the value of the specified column as a short data type."
      ],
      [
        "moveToNext()",
        "checks if the cursor is closed and if not, moves to the next row in the cursor."
      ],
      [
        "respond(android.os.Bundle)",
        "checks if the cursor is closed and then returns a response to an Android OS Bundle."
      ],
      [
        "registerContentObserver(android.database.ContentObserver)",
        "registers a content observer on a cursor, after checking if it's closed."
      ],
      [
        "getFloat(int)",
        "returns the float value of the specified column index of the monitored cursor in the MessageProvider class."
      ],
      [
        "getCount()",
        "returns the count of records held by the cursor of the MessageProvider's MonitoredCursor class after checking if it has been closed."
      ],
      [
        "moveToFirst()",
        "moves the cursor to the first row of the monitored database query result set."
      ],
      [
        "fillWindow(int,android.database.CursorWindow)",
        "fills a window containing a subset of rows from a database cursor at a specified position."
      ],
      [
        "getType(int)",
        "gets the type of the data in the specified column index of a monitored cursor and checks if it is closed."
      ],
      [
        "moveToLast()",
        "moves the cursor to the last row in the monitored cursor for a message provider."
      ],
      [
        "move(int)",
        "moves the cursor by the specified offset and checks if it is closed before doing so."
      ],
      [
        "moveToPosition(int)",
        "moves the cursor to the specified position in the monitored database table."
      ],
      [
        "getExtras()",
        "returns the extras associated with the cursor used by the MessageProvider's MonitoredCursor class, after checking if the cursor has been closed."
      ],
      [
        "setExtras(android.os.Bundle)",
        "sets the extra data provided in the given `Bundle` for the monitored `Cursor`."
      ],
      [
        "getWindow()",
        "returns the cursor window for a monitored cursor in a message provider class."
      ],
      [
        "getColumnIndex(java.lang.String)",
        "returns the index of a specified column in the cursor's result set."
      ],
      [
        "getDouble(int)",
        "returns the double value of the specified column index from a monitored cursor in the MessageProvider class."
      ],
      [
        "onMove(int,int)",
        "overrides the `onMove` method in the superclass by calling the same method on the `cursor` object after checking if the cursor is closed."
      ]
    ],
    "class com.fsck.k9.provider.UnreadWidgetProvider": [
      [
        "updateWidget(android.content.Context,android.appwidget.AppWidgetManager,com.fsck.k9.helper.UnreadWidgetProperties)",
        "updates an unread widget on Android with the appropriate unread message count and click behavior."
      ],
      [
        "onUpdate(android.content.Context,android.appwidget.AppWidgetManager,int[])",
        "updates one or more widgets with unread email counts."
      ],
      [
        "onDeleted(android.content.Context,int[])",
        "deletes the configuration of a widget instance when it is deleted."
      ],
      [
        "updateUnreadCount(android.content.Context)",
        "updates the unread count of all widgets belonging to the UnreadWidgetProvider class in the K-9 email client app."
      ]
    ],
    "class com.fsck.k9.provider.MessageProvider$SendDateExtractor": [
      [
        "getField(com.fsck.k9.activity.MessageInfoHolder)",
        "extracts the sent date of a message."
      ]
    ],
    "class com.fsck.k9.provider.MessageProvider$UriExtractor": [
      [
        "getField(com.fsck.k9.activity.MessageInfoHolder)",
        "returns the URI field of the given MessageInfoHolder object."
      ]
    ],
    "class com.fsck.k9.provider.EmailProvider$IdTrickeryCursor": [
      [
        "getColumnIndex(java.lang.String)",
        "overrides the `getColumnIndex` method of the parent class to map the `_id` column name to `id` for use in a specific class."
      ],
      [
        "getColumnIndexOrThrow(java.lang.String)",
        "returns the index of the specified column name, replacing \"_id\" with \"id\" before looking up the index if necessary."
      ]
    ],
    "class com.fsck.k9.provider.DecryptedFileProvider$DecryptedFileProviderCleanupReceiver": [
      [
        "onReceive(android.content.Context,android.content.Intent)",
        "cleans up temporary files created by the DecryptedFileProvider and unregisters the FileCleanupReceiver if all files were deleted."
      ]
    ],
    "class com.fsck.k9.provider.MessageProvider$UnreadExtractor": [
      [
        "getField(com.fsck.k9.activity.MessageInfoHolder)",
        "returns a boolean value indicating whether a message is unread or not based on the read status of the message info holder object."
      ]
    ]
  },
  "com.fsck.k9.remotecontrol": {
    "class com.fsck.k9.remotecontrol.AccountReceiver": [
      [
        "onReceive(android.content.Context,android.content.Intent)",
        "listens for a K9RemoteControl request for accounts and sends back the account UUIDs and descriptions to the requester."
      ]
    ],
    "interface com.fsck.k9.remotecontrol.K9AccountReceptor": [
      [
        "accounts(java.lang.String[],java.lang.String[])",
        "takes two arrays of strings, `uuids` and `descriptions`, and doesn't return anything; it is a void method."
      ]
    ],
    "class com.fsck.k9.remotecontrol.K9RemoteControl": [
      [
        "set(android.content.Context,android.content.Intent)",
        "sends a broadcast intent with a specified action and permission from the given context."
      ],
      [
        "fetchAccounts(android.content.Context,com.fsck.k9.remotecontrol.K9AccountReceptor)",
        "sends a broadcast intent to fetch K9 email accounts and sends the results to a specified receptor."
      ]
    ]
  }
}